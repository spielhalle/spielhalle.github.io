{"version":3,"sources":["webpack/bootstrap","./node_modules/@donmahallem/sudoku/dist/esm/index.js","./src/app/routes/sudoku/services/sudoku-solver.worker.ts"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,sBAAsB;AAC1D,2CAA2C,yBAAyB;AACpE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iBAAiB;AACpD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mCAAmC,iBAAiB;AACpD,0CAA0C,oBAAoB;AAC9D;AACA,4CAA4C,gBAAgB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,YAAY;AAC7C,iCAAiC,SAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,YAAY;AAC1C,gCAAgC,SAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC,wCAAwC,EAAE;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,mBAAmB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,WAAW;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,SAAS;AAC3C;AACA,qCAAqC,SAAS;AAC9C;AACA;AACA;AACA;AACA;AACA,oCAAoC,SAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kBAAkB;AACrD,0CAA0C,qBAAqB;AAC/D,yCAAyC,gBAAgB;AACzD,sCAAsC,oBAAoB;AAC1D,6CAA6C,uBAAuB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kBAAkB;AACrD,0CAA0C,qBAAqB;AAC/D,yCAAyC,gBAAgB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qBAAqB;AAC3D,qCAAqC,gBAAgB;AACrD,2CAA2C,kBAAkB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kBAAkB;AACrD,qCAAqC,gBAAgB;AACrD,8CAA8C,qBAAqB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kBAAkB;AACrD,0CAA0C,qBAAqB;AAC/D;AACA;AACA,8CAA8C,kBAAkB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA,mBAAmB,0DAA0D;AAC7E;AACA;AACA;AACA;AACA;AACA;;AAEgI;AAChI;;AAEA;;;;;;;;;;;;;AC7bA;AAAA;AAAA;;GAEG;AACH,iCAAiC;AACmB;AACpD,gBAAgB,CAAC,SAAS,EAAE,CAAC,GAAiB,EAAQ,EAAE;IACpD,MAAM,OAAO,GAAiB,yEAAa,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IAChE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC","file":"solveSudokuWorker-es2015.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"ZwK9\");\n","/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst COVER_START_IDX = 1;\r\nconst BOARD_START_IDX = 0;\r\nconst CONSTRAINTS = 4;\r\nconst EMPTY_CELL = 0;\r\nconst CELL_VALUE_MIN = 1;\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst checkConstraint = (board, row, constraint, column) => {\r\n    if (board[row][column] !== EMPTY_CELL) {\r\n        if (!constraint[board[row][column] - 1]) {\r\n            constraint[board[row][column] - 1] = true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst checkBoxConstraint = (board, row, column, boardSize, boxSize) => {\r\n    const constraint = new Array(boardSize).fill(false);\r\n    const subsectionRowStart = Math.floor(row / boxSize) * boxSize;\r\n    const subsectionRowEnd = subsectionRowStart + boxSize;\r\n    const subsectionColumnStart = Math.floor(column / boxSize) * boxSize;\r\n    const subsectionColumnEnd = subsectionColumnStart + boxSize;\r\n    for (let r = subsectionRowStart; r < subsectionRowEnd; r++) {\r\n        for (let c = subsectionColumnStart; c < subsectionColumnEnd; c++) {\r\n            if (!checkConstraint(board, r, constraint, c))\r\n                return false;\r\n        }\r\n    }\r\n    return true;\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst checkColumnConstraint = (board, column, boardSize) => {\r\n    const constraint = new Array(boardSize).fill(false);\r\n    for (let row = BOARD_START_IDX; row < boardSize; row++) {\r\n        if (!checkConstraint(board, row, constraint, column)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst checkRowConstraint = (board, row, boardSize) => {\r\n    const constraint = new Array(boardSize).fill(false);\r\n    for (let column = BOARD_START_IDX; column < boardSize; column++) {\r\n        if (!checkConstraint(board, row, constraint, column)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst isValid = (board, row, column, boardSize, boxSize) => {\r\n    return checkRowConstraint(board, row, boardSize) &&\r\n        checkColumnConstraint(board, column, boardSize) &&\r\n        checkBoxConstraint(board, row, column, boardSize, boxSize);\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst solve = (board, boardSize, boxSize) => {\r\n    for (let row = BOARD_START_IDX; row < boardSize; row++) {\r\n        for (let column = BOARD_START_IDX; column < boardSize; column++) {\r\n            if (board[row][column] === EMPTY_CELL) {\r\n                for (let k = CELL_VALUE_MIN; k <= boardSize; k++) {\r\n                    board[row][column] = k;\r\n                    if (isValid(board, row, column, boardSize, boxSize) && solve(board, boardSize, boxSize)) {\r\n                        return true;\r\n                    }\r\n                    board[row][column] = EMPTY_CELL;\r\n                }\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst createEmptySudokuBoard = (boardSize) => {\r\n    return new Array(boardSize)\r\n        .fill(0)\r\n        .map(() => new Array(boardSize).fill(EMPTY_CELL));\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\n// tslint:disable:max-classes-per-file\r\nclass DancingNode {\r\n    constructor(columnNode) {\r\n        this.left = this;\r\n        this.right = this;\r\n        this.top = this;\r\n        this.bottom = this;\r\n        this.column = columnNode;\r\n    }\r\n    linkDown(node) {\r\n        node.bottom = this.bottom;\r\n        node.bottom.top = node;\r\n        node.top = this;\r\n        this.bottom = node;\r\n        return node;\r\n    }\r\n    linkRight(node) {\r\n        node.right = this.right;\r\n        node.right.left = node;\r\n        node.left = this;\r\n        this.right = node;\r\n        return node;\r\n    }\r\n    removeLeftRight() {\r\n        this.left.right = this.right;\r\n        this.right.left = this.left;\r\n    }\r\n    reinsertLeftRight() {\r\n        this.left.right = this;\r\n        this.right.left = this;\r\n    }\r\n    removeTopBottom() {\r\n        this.top.bottom = this.bottom;\r\n        this.bottom.top = this.top;\r\n    }\r\n    reinsertTopBottom() {\r\n        this.top.bottom = this;\r\n        this.bottom.top = this;\r\n    }\r\n}\r\nclass ColumnNode extends DancingNode {\r\n    constructor(name) {\r\n        super();\r\n        this.name = name;\r\n        this.size = 0;\r\n        this.column = this;\r\n    }\r\n    cover() {\r\n        this.removeLeftRight();\r\n        for (let i = this.bottom; i !== this; i = i.bottom) {\r\n            for (let j = i.right; j !== i; j = j.right) {\r\n                j.removeTopBottom();\r\n                j.column.size--;\r\n            }\r\n        }\r\n    }\r\n    uncover() {\r\n        for (let i = this.top; i !== this; i = i.top) {\r\n            for (let j = i.left; j !== i; j = j.left) {\r\n                j.column.size++;\r\n                j.reinsertTopBottom();\r\n            }\r\n        }\r\n        this.reinsertLeftRight();\r\n    }\r\n}\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nclass DLX {\r\n    constructor(cover, boardSize) {\r\n        this.boardSize = boardSize;\r\n        this.isDone = false;\r\n        this.header = this.createDLXList(cover);\r\n    }\r\n    createDLXList(grid) {\r\n        const nbColumns = grid[0].length;\r\n        let headerNode = new ColumnNode('header');\r\n        const columnNodes = [];\r\n        for (let i = 0; i < nbColumns; i++) {\r\n            const n = new ColumnNode(`${i}`);\r\n            columnNodes.push(n);\r\n            headerNode = headerNode.linkRight(n);\r\n        }\r\n        headerNode = headerNode.right.column;\r\n        for (const aGrid of grid) {\r\n            let prev = undefined;\r\n            for (let j = 0; j < nbColumns; j++) {\r\n                if (aGrid[j]) {\r\n                    const col = columnNodes[j];\r\n                    const newNode = new DancingNode(col);\r\n                    // tslint:disable-next-line:triple-equals\r\n                    if (prev == undefined) {\r\n                        prev = newNode;\r\n                    }\r\n                    col.top.linkDown(newNode);\r\n                    prev = prev.linkRight(newNode);\r\n                    col.size++;\r\n                }\r\n            }\r\n        }\r\n        headerNode.size = nbColumns;\r\n        return headerNode;\r\n    }\r\n    selectColumnNodeHeuristic() {\r\n        let min = Number.MAX_VALUE;\r\n        // tslint:disable-next-line:no-unnecessary-initializer\r\n        let ret = undefined;\r\n        for (let c = this.header.right; c !== this.header; c = c.right) {\r\n            if (c.size < min) {\r\n                min = c.size;\r\n                ret = c;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    handleSolution(anser) {\r\n        const field = this.parseSolution(anser);\r\n        this.isDone = this.resultCallback(field);\r\n    }\r\n    parseSolution(answer) {\r\n        const result = createEmptySudokuBoard(this.boardSize);\r\n        for (const n of answer) {\r\n            let rcNode = n;\r\n            let min = parseInt(rcNode.column.name, 10);\r\n            for (let tmp = n.right; tmp !== n; tmp = tmp.right) {\r\n                const val = parseInt(tmp.column.name, 10);\r\n                if (val < min) {\r\n                    min = val;\r\n                    rcNode = tmp;\r\n                }\r\n            }\r\n            const ans1 = parseInt(rcNode.column.name, 10);\r\n            const ans2 = parseInt(rcNode.right.column.name, 10);\r\n            const r = Math.floor(ans1 / this.boardSize);\r\n            const c = ans1 % this.boardSize;\r\n            const num = (ans2 % this.boardSize) + 1;\r\n            result[r][c] = num;\r\n        }\r\n        return result;\r\n    }\r\n    search(k) {\r\n        if (this.isDone) {\r\n            return;\r\n        }\r\n        if (this.header.right === this.header) {\r\n            this.handleSolution(this.answer);\r\n        }\r\n        else {\r\n            let c = this.selectColumnNodeHeuristic();\r\n            c.cover();\r\n            for (let r = c.bottom; r !== c; r = r.bottom) {\r\n                this.answer.push(r);\r\n                for (let j = r.right; j !== r; j = j.right) {\r\n                    j.column.cover();\r\n                }\r\n                this.search(k + 1);\r\n                r = this.answer.splice(this.answer.length - 1, 1)[0];\r\n                c = r.column;\r\n                for (let j = r.left; j !== r; j = j.left) {\r\n                    j.column.uncover();\r\n                }\r\n            }\r\n            c.uncover();\r\n        }\r\n    }\r\n    runSolver(cb) {\r\n        this.answer = [];\r\n        this.isDone = false;\r\n        this.resultCallback = cb;\r\n        this.search(0);\r\n    }\r\n}\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst getIndex = (row, column, num, boardSize) => {\r\n    return (row - 1) * boardSize * boardSize + (column - 1) * boardSize + (num - 1);\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst createBoxConstraints = (matrix, header, boardSize, boxSize) => {\r\n    let headerIter = header;\r\n    for (let row = COVER_START_IDX; row <= boardSize; row += boxSize) {\r\n        for (let column = COVER_START_IDX; column <= boardSize; column += boxSize) {\r\n            for (let n = COVER_START_IDX; n <= boardSize; n++, headerIter++) {\r\n                for (let rowDelta = 0; rowDelta < boxSize; rowDelta++) {\r\n                    for (let columnDelta = 0; columnDelta < boxSize; columnDelta++) {\r\n                        const index = getIndex(row + rowDelta, column + columnDelta, n, boardSize);\r\n                        matrix[index][headerIter] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return headerIter;\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst createCellConstraints = (matrix, header, boardSize) => {\r\n    let headerIter = header;\r\n    for (let row = COVER_START_IDX; row <= boardSize; row++) {\r\n        for (let column = COVER_START_IDX; column <= boardSize; column++, headerIter++) {\r\n            for (let n = COVER_START_IDX; n <= boardSize; n++) {\r\n                const index = getIndex(row, column, n, boardSize);\r\n                // console.log(index, _header, matrix.length);\r\n                matrix[index][headerIter] = true;\r\n            }\r\n        }\r\n    }\r\n    return headerIter;\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst createColumnConstraints = (matrix, header, boardSize) => {\r\n    let iterHeader = header;\r\n    for (let column = COVER_START_IDX; column <= boardSize; column++) {\r\n        for (let n = COVER_START_IDX; n <= boardSize; n++, iterHeader++) {\r\n            for (let row = COVER_START_IDX; row <= boardSize; row++) {\r\n                const index = getIndex(row, column, n, boardSize);\r\n                matrix[index][iterHeader] = true;\r\n            }\r\n        }\r\n    }\r\n    return iterHeader;\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst createRowConstraints = (coverBoard, hBase, boardSize) => {\r\n    let headerIter = hBase;\r\n    for (let row = COVER_START_IDX; row <= boardSize; row++) {\r\n        for (let n = COVER_START_IDX; n <= boardSize; n++, headerIter++) {\r\n            for (let column = COVER_START_IDX; column <= boardSize; column++) {\r\n                const index = getIndex(row, column, n, boardSize);\r\n                coverBoard[index][headerIter] = true;\r\n            }\r\n        }\r\n    }\r\n    return headerIter;\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst createCoverMatrix = (boardSize, boxSize) => {\r\n    const coverMatrix = new Array(boardSize * boardSize * boardSize)\r\n        .fill([])\r\n        .map(() => new Array(boardSize * boardSize * CONSTRAINTS).fill(false));\r\n    let header = 0;\r\n    header = createCellConstraints(coverMatrix, header, boardSize);\r\n    header = createRowConstraints(coverMatrix, header, boardSize);\r\n    header = createColumnConstraints(coverMatrix, header, boardSize);\r\n    createBoxConstraints(coverMatrix, header, boardSize, boxSize);\r\n    return coverMatrix;\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst initializeExactCoverBoard = (board, boardSize, boxSize) => {\r\n    const coverBoard = createCoverMatrix(boardSize, boxSize);\r\n    for (let row = COVER_START_IDX; row <= boardSize; row++) {\r\n        for (let column = COVER_START_IDX; column <= boardSize; column++) {\r\n            const n = board[row - 1][column - 1];\r\n            if (n !== EMPTY_CELL) {\r\n                for (let num = CELL_VALUE_MIN; num <= boardSize; num++) {\r\n                    if (num !== n) {\r\n                        coverBoard[getIndex(row, column, num, boardSize)].fill(false);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return coverBoard;\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst solve$1 = (board, boardSize, boxSize, cb) => {\r\n    const cover = initializeExactCoverBoard(board, boardSize, boxSize);\r\n    const dlx = new DLX(cover, boardSize);\r\n    dlx.runSolver(cb);\r\n};\r\nconst solveNum = (board, boardSize, boxSize, num) => {\r\n    const results = [];\r\n    solve$1(board, boardSize, boxSize, (result) => {\r\n        results.push(result);\r\n        return results.length >= num;\r\n    });\r\n    return results;\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst indexMap = {};\r\nconst getIndexMap = (boardSize) => {\r\n    if (!(boardSize in indexMap)) {\r\n        indexMap[boardSize] = new Array(boardSize ** 2).fill(0).map((val, idx) => idx);\r\n    }\r\n    return indexMap[boardSize];\r\n};\r\nconst createSudokuBoard = (boardSize, retainPercentage) => {\r\n    const board = createEmptySudokuBoard(boardSize);\r\n    const boxSize = Math.sqrt(boardSize);\r\n    const randomNumbers = new Array(boardSize).fill(0).map((val, idx) => idx + 1)\r\n        .sort(() => Math.random() - 0.5);\r\n    for (let i = 0; i < boardSize; i++) {\r\n        board[i][Math.floor(Math.random() * boardSize)] = randomNumbers[i];\r\n    }\r\n    const selectBoard = solveNum(board, boardSize, boxSize, 1)[0];\r\n    const removeIndexes = getIndexMap(boardSize)\r\n        .sort(() => Math.random() - 0.5);\r\n    for (let i = 0; i <= Math.floor(removeIndexes.length * retainPercentage); i++) {\r\n        const removeX = removeIndexes[i] % boardSize;\r\n        const removeY = Math.floor(removeIndexes[i] / boardSize);\r\n        selectBoard[removeX][removeY] = 0;\r\n    }\r\n    return selectBoard;\r\n};\n\nexport { solve as backtrackSolve, createEmptySudokuBoard, createSudokuBoard, solve$1 as knuthSolve, solveNum as knuthSolveNum };\n// BUILD: Mon Feb 22 2021 13:33:42 GMT+0100 (Central European Standard Time)\n\n//# sourceMappingURL=index.js.map\n","/*!\n * Source https://github.com/spielhalle/spielhalle Package: @spielhalle/client\n */\n/// <reference lib=\"webworker\" />\nimport { knuthSolveNum } from '@donmahallem/sudoku';\naddEventListener('message', (evt: MessageEvent): void => {\n    const results: number[][][] = knuthSolveNum(evt.data, 9, 3, 10);\n    self.postMessage(results);\n});\n"],"sourceRoot":"webpack:///"}