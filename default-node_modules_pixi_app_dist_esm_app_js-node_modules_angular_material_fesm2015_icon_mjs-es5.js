(function () {
  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } Object.defineProperty(subClass, "prototype", { value: Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }), writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

  function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  (self["webpackChunk_spielhalle_client"] = self["webpackChunk_spielhalle_client"] || []).push([["default-node_modules_pixi_app_dist_esm_app_js-node_modules_angular_material_fesm2015_icon_mjs"], {
    /***/
    53882:
    /*!********************************************************************!*\
      !*** ./node_modules/@angular/common/__ivy_ngcc__/fesm2015/http.js ***!
      \********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "HTTP_INTERCEPTORS": function HTTP_INTERCEPTORS() {
          return (
            /* binding */
            _HTTP_INTERCEPTORS
          );
        },

        /* harmony export */
        "HttpBackend": function HttpBackend() {
          return (
            /* binding */
            _HttpBackend
          );
        },

        /* harmony export */
        "HttpClient": function HttpClient() {
          return (
            /* binding */
            _HttpClient
          );
        },

        /* harmony export */
        "HttpClientJsonpModule": function HttpClientJsonpModule() {
          return (
            /* binding */
            _HttpClientJsonpModule
          );
        },

        /* harmony export */
        "HttpClientModule": function HttpClientModule() {
          return (
            /* binding */
            _HttpClientModule
          );
        },

        /* harmony export */
        "HttpClientXsrfModule": function HttpClientXsrfModule() {
          return (
            /* binding */
            _HttpClientXsrfModule
          );
        },

        /* harmony export */
        "HttpContext": function HttpContext() {
          return (
            /* binding */
            _HttpContext
          );
        },

        /* harmony export */
        "HttpContextToken": function HttpContextToken() {
          return (
            /* binding */
            _HttpContextToken
          );
        },

        /* harmony export */
        "HttpErrorResponse": function HttpErrorResponse() {
          return (
            /* binding */
            _HttpErrorResponse
          );
        },

        /* harmony export */
        "HttpEventType": function HttpEventType() {
          return (
            /* binding */
            _HttpEventType
          );
        },

        /* harmony export */
        "HttpHandler": function HttpHandler() {
          return (
            /* binding */
            _HttpHandler
          );
        },

        /* harmony export */
        "HttpHeaderResponse": function HttpHeaderResponse() {
          return (
            /* binding */
            _HttpHeaderResponse
          );
        },

        /* harmony export */
        "HttpHeaders": function HttpHeaders() {
          return (
            /* binding */
            _HttpHeaders
          );
        },

        /* harmony export */
        "HttpParams": function HttpParams() {
          return (
            /* binding */
            _HttpParams
          );
        },

        /* harmony export */
        "HttpRequest": function HttpRequest() {
          return (
            /* binding */
            _HttpRequest
          );
        },

        /* harmony export */
        "HttpResponse": function HttpResponse() {
          return (
            /* binding */
            _HttpResponse
          );
        },

        /* harmony export */
        "HttpResponseBase": function HttpResponseBase() {
          return (
            /* binding */
            _HttpResponseBase
          );
        },

        /* harmony export */
        "HttpUrlEncodingCodec": function HttpUrlEncodingCodec() {
          return (
            /* binding */
            _HttpUrlEncodingCodec
          );
        },

        /* harmony export */
        "HttpXhrBackend": function HttpXhrBackend() {
          return (
            /* binding */
            _HttpXhrBackend
          );
        },

        /* harmony export */
        "HttpXsrfTokenExtractor": function HttpXsrfTokenExtractor() {
          return (
            /* binding */
            _HttpXsrfTokenExtractor
          );
        },

        /* harmony export */
        "JsonpClientBackend": function JsonpClientBackend() {
          return (
            /* binding */
            _JsonpClientBackend
          );
        },

        /* harmony export */
        "JsonpInterceptor": function JsonpInterceptor() {
          return (
            /* binding */
            _JsonpInterceptor
          );
        },

        /* harmony export */
        "XhrFactory": function XhrFactory() {
          return (
            /* binding */
            _XhrFactory
          );
        },

        /* harmony export */
        "ɵHttpInterceptingHandler": function ɵHttpInterceptingHandler() {
          return (
            /* binding */
            HttpInterceptingHandler
          );
        },

        /* harmony export */
        "ɵangular_packages_common_http_http_a": function ɵangular_packages_common_http_http_a() {
          return (
            /* binding */
            NoopInterceptor
          );
        },

        /* harmony export */
        "ɵangular_packages_common_http_http_b": function ɵangular_packages_common_http_http_b() {
          return (
            /* binding */
            JsonpCallbackContext
          );
        },

        /* harmony export */
        "ɵangular_packages_common_http_http_c": function ɵangular_packages_common_http_http_c() {
          return (
            /* binding */
            jsonpCallbackContext
          );
        },

        /* harmony export */
        "ɵangular_packages_common_http_http_d": function ɵangular_packages_common_http_http_d() {
          return (
            /* binding */
            XSRF_COOKIE_NAME
          );
        },

        /* harmony export */
        "ɵangular_packages_common_http_http_e": function ɵangular_packages_common_http_http_e() {
          return (
            /* binding */
            XSRF_HEADER_NAME
          );
        },

        /* harmony export */
        "ɵangular_packages_common_http_http_f": function ɵangular_packages_common_http_http_f() {
          return (
            /* binding */
            HttpXsrfCookieExtractor
          );
        },

        /* harmony export */
        "ɵangular_packages_common_http_http_g": function ɵangular_packages_common_http_http_g() {
          return (
            /* binding */
            HttpXsrfInterceptor
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/common */
      54364);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/core */
      2316);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! rxjs */
      75249);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! rxjs */
      59442);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! rxjs/operators */
      19159);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs/operators */
      39754);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! rxjs/operators */
      53399);
      /**
       * @license Angular v12.2.15
       * (c) 2010-2021 Google LLC. https://angular.io/
       * License: MIT
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a
       * `HttpResponse`.
       *
       * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the
       * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the
       * `HttpBackend`.
       *
       * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.
       *
       * @publicApi
       */


      var _HttpHandler = /*#__PURE__*/_createClass(function _HttpHandler() {
        _classCallCheck(this, _HttpHandler);
      });
      /**
       * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.
       *
       * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.
       *
       * When injected, `HttpBackend` dispatches requests directly to the backend, without going
       * through the interceptor chain.
       *
       * @publicApi
       */


      var _HttpBackend = /*#__PURE__*/_createClass(function _HttpBackend() {
        _classCallCheck(this, _HttpBackend);
      });
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Represents the header configuration options for an HTTP request.
       * Instances are immutable. Modifying methods return a cloned
       * instance with the change. The original object is never changed.
       *
       * @publicApi
       */


      var _HttpHeaders = /*#__PURE__*/function () {
        /**  Constructs a new HTTP header object with the given values.*/
        function _HttpHeaders(headers) {
          var _this2 = this;

          _classCallCheck(this, _HttpHeaders);

          /**
           * Internal map of lowercased header names to the normalized
           * form of the name (the form seen first).
           */
          this.normalizedNames = new Map();
          /**
           * Queued updates to be materialized the next initialization.
           */

          this.lazyUpdate = null;

          if (!headers) {
            this.headers = new Map();
          } else if (typeof headers === 'string') {
            this.lazyInit = function () {
              _this2.headers = new Map();
              headers.split('\n').forEach(function (line) {
                var index = line.indexOf(':');

                if (index > 0) {
                  var name = line.slice(0, index);
                  var key = name.toLowerCase();
                  var value = line.slice(index + 1).trim();

                  _this2.maybeSetNormalizedName(name, key);

                  if (_this2.headers.has(key)) {
                    _this2.headers.get(key).push(value);
                  } else {
                    _this2.headers.set(key, [value]);
                  }
                }
              });
            };
          } else {
            this.lazyInit = function () {
              _this2.headers = new Map();
              Object.keys(headers).forEach(function (name) {
                var values = headers[name];
                var key = name.toLowerCase();

                if (typeof values === 'string') {
                  values = [values];
                }

                if (values.length > 0) {
                  _this2.headers.set(key, values);

                  _this2.maybeSetNormalizedName(name, key);
                }
              });
            };
          }
        }
        /**
         * Checks for existence of a given header.
         *
         * @param name The header name to check for existence.
         *
         * @returns True if the header exists, false otherwise.
         */


        _createClass(_HttpHeaders, [{
          key: "has",
          value: function has(name) {
            this.init();
            return this.headers.has(name.toLowerCase());
          }
          /**
           * Retrieves the first value of a given header.
           *
           * @param name The header name.
           *
           * @returns The value string if the header exists, null otherwise
           */

        }, {
          key: "get",
          value: function get(name) {
            this.init();
            var values = this.headers.get(name.toLowerCase());
            return values && values.length > 0 ? values[0] : null;
          }
          /**
           * Retrieves the names of the headers.
           *
           * @returns A list of header names.
           */

        }, {
          key: "keys",
          value: function keys() {
            this.init();
            return Array.from(this.normalizedNames.values());
          }
          /**
           * Retrieves a list of values for a given header.
           *
           * @param name The header name from which to retrieve values.
           *
           * @returns A string of values if the header exists, null otherwise.
           */

        }, {
          key: "getAll",
          value: function getAll(name) {
            this.init();
            return this.headers.get(name.toLowerCase()) || null;
          }
          /**
           * Appends a new value to the existing set of values for a header
           * and returns them in a clone of the original instance.
           *
           * @param name The header name for which to append the values.
           * @param value The value to append.
           *
           * @returns A clone of the HTTP headers object with the value appended to the given header.
           */

        }, {
          key: "append",
          value: function append(name, value) {
            return this.clone({
              name: name,
              value: value,
              op: 'a'
            });
          }
          /**
           * Sets or modifies a value for a given header in a clone of the original instance.
           * If the header already exists, its value is replaced with the given value
           * in the returned object.
           *
           * @param name The header name.
           * @param value The value or values to set or overide for the given header.
           *
           * @returns A clone of the HTTP headers object with the newly set header value.
           */

        }, {
          key: "set",
          value: function set(name, value) {
            return this.clone({
              name: name,
              value: value,
              op: 's'
            });
          }
          /**
           * Deletes values for a given header in a clone of the original instance.
           *
           * @param name The header name.
           * @param value The value or values to delete for the given header.
           *
           * @returns A clone of the HTTP headers object with the given value deleted.
           */

        }, {
          key: "delete",
          value: function _delete(name, value) {
            return this.clone({
              name: name,
              value: value,
              op: 'd'
            });
          }
        }, {
          key: "maybeSetNormalizedName",
          value: function maybeSetNormalizedName(name, lcName) {
            if (!this.normalizedNames.has(lcName)) {
              this.normalizedNames.set(lcName, name);
            }
          }
        }, {
          key: "init",
          value: function init() {
            var _this3 = this;

            if (!!this.lazyInit) {
              if (this.lazyInit instanceof _HttpHeaders) {
                this.copyFrom(this.lazyInit);
              } else {
                this.lazyInit();
              }

              this.lazyInit = null;

              if (!!this.lazyUpdate) {
                this.lazyUpdate.forEach(function (update) {
                  return _this3.applyUpdate(update);
                });
                this.lazyUpdate = null;
              }
            }
          }
        }, {
          key: "copyFrom",
          value: function copyFrom(other) {
            var _this4 = this;

            other.init();
            Array.from(other.headers.keys()).forEach(function (key) {
              _this4.headers.set(key, other.headers.get(key));

              _this4.normalizedNames.set(key, other.normalizedNames.get(key));
            });
          }
        }, {
          key: "clone",
          value: function clone(update) {
            var clone = new _HttpHeaders();
            clone.lazyInit = !!this.lazyInit && this.lazyInit instanceof _HttpHeaders ? this.lazyInit : this;
            clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);
            return clone;
          }
        }, {
          key: "applyUpdate",
          value: function applyUpdate(update) {
            var key = update.name.toLowerCase();

            switch (update.op) {
              case 'a':
              case 's':
                var value = update.value;

                if (typeof value === 'string') {
                  value = [value];
                }

                if (value.length === 0) {
                  return;
                }

                this.maybeSetNormalizedName(update.name, key);
                var base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];
                base.push.apply(base, _toConsumableArray(value));
                this.headers.set(key, base);
                break;

              case 'd':
                var toDelete = update.value;

                if (!toDelete) {
                  this.headers["delete"](key);
                  this.normalizedNames["delete"](key);
                } else {
                  var existing = this.headers.get(key);

                  if (!existing) {
                    return;
                  }

                  existing = existing.filter(function (value) {
                    return toDelete.indexOf(value) === -1;
                  });

                  if (existing.length === 0) {
                    this.headers["delete"](key);
                    this.normalizedNames["delete"](key);
                  } else {
                    this.headers.set(key, existing);
                  }
                }

                break;
            }
          }
          /**
           * @internal
           */

        }, {
          key: "forEach",
          value: function forEach(fn) {
            var _this5 = this;

            this.init();
            Array.from(this.normalizedNames.keys()).forEach(function (key) {
              return fn(_this5.normalizedNames.get(key), _this5.headers.get(key));
            });
          }
        }]);

        return _HttpHeaders;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Provides encoding and decoding of URL parameter and query-string values.
       *
       * Serializes and parses URL parameter keys and values to encode and decode them.
       * If you pass URL query parameters without encoding,
       * the query parameters can be misinterpreted at the receiving end.
       *
       *
       * @publicApi
       */


      var _HttpUrlEncodingCodec = /*#__PURE__*/function () {
        function _HttpUrlEncodingCodec() {
          _classCallCheck(this, _HttpUrlEncodingCodec);
        }

        _createClass(_HttpUrlEncodingCodec, [{
          key: "encodeKey",
          value:
          /**
           * Encodes a key name for a URL parameter or query-string.
           * @param key The key name.
           * @returns The encoded key name.
           */
          function encodeKey(key) {
            return standardEncoding(key);
          }
          /**
           * Encodes the value of a URL parameter or query-string.
           * @param value The value.
           * @returns The encoded value.
           */

        }, {
          key: "encodeValue",
          value: function encodeValue(value) {
            return standardEncoding(value);
          }
          /**
           * Decodes an encoded URL parameter or query-string key.
           * @param key The encoded key name.
           * @returns The decoded key name.
           */

        }, {
          key: "decodeKey",
          value: function decodeKey(key) {
            return decodeURIComponent(key);
          }
          /**
           * Decodes an encoded URL parameter or query-string value.
           * @param value The encoded value.
           * @returns The decoded value.
           */

        }, {
          key: "decodeValue",
          value: function decodeValue(value) {
            return decodeURIComponent(value);
          }
        }]);

        return _HttpUrlEncodingCodec;
      }();

      function paramParser(rawParams, codec) {
        var map = new Map();

        if (rawParams.length > 0) {
          // The `window.location.search` can be used while creating an instance of the `HttpParams` class
          // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`
          // may start with the `?` char, so we strip it if it's present.
          var params = rawParams.replace(/^\?/, '').split('&');
          params.forEach(function (param) {
            var eqIdx = param.indexOf('=');

            var _ref = eqIdx == -1 ? [codec.decodeKey(param), ''] : [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))],
                _ref2 = _slicedToArray(_ref, 2),
                key = _ref2[0],
                val = _ref2[1];

            var list = map.get(key) || [];
            list.push(val);
            map.set(key, list);
          });
        }

        return map;
      }
      /**
       * Encode input string with standard encodeURIComponent and then un-encode specific characters.
       */


      var STANDARD_ENCODING_REGEX = /%(\d[a-f0-9])/gi;
      var STANDARD_ENCODING_REPLACEMENTS = {
        '40': '@',
        '3A': ':',
        '24': '$',
        '2C': ',',
        '3B': ';',
        '2B': '+',
        '3D': '=',
        '3F': '?',
        '2F': '/'
      };

      function standardEncoding(v) {
        return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, function (s, t) {
          var _a;

          return (_a = STANDARD_ENCODING_REPLACEMENTS[t]) !== null && _a !== void 0 ? _a : s;
        });
      }

      function valueToString(value) {
        return "".concat(value);
      }
      /**
       * An HTTP request/response body that represents serialized parameters,
       * per the MIME type `application/x-www-form-urlencoded`.
       *
       * This class is immutable; all mutation operations return a new instance.
       *
       * @publicApi
       */


      var _HttpParams = /*#__PURE__*/function () {
        function _HttpParams() {
          var _this6 = this;

          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          _classCallCheck(this, _HttpParams);

          this.updates = null;
          this.cloneFrom = null;
          this.encoder = options.encoder || new _HttpUrlEncodingCodec();

          if (!!options.fromString) {
            if (!!options.fromObject) {
              throw new Error("Cannot specify both fromString and fromObject.");
            }

            this.map = paramParser(options.fromString, this.encoder);
          } else if (!!options.fromObject) {
            this.map = new Map();
            Object.keys(options.fromObject).forEach(function (key) {
              var value = options.fromObject[key];

              _this6.map.set(key, Array.isArray(value) ? value : [value]);
            });
          } else {
            this.map = null;
          }
        }
        /**
         * Reports whether the body includes one or more values for a given parameter.
         * @param param The parameter name.
         * @returns True if the parameter has one or more values,
         * false if it has no value or is not present.
         */


        _createClass(_HttpParams, [{
          key: "has",
          value: function has(param) {
            this.init();
            return this.map.has(param);
          }
          /**
           * Retrieves the first value for a parameter.
           * @param param The parameter name.
           * @returns The first value of the given parameter,
           * or `null` if the parameter is not present.
           */

        }, {
          key: "get",
          value: function get(param) {
            this.init();
            var res = this.map.get(param);
            return !!res ? res[0] : null;
          }
          /**
           * Retrieves all values for a  parameter.
           * @param param The parameter name.
           * @returns All values in a string array,
           * or `null` if the parameter not present.
           */

        }, {
          key: "getAll",
          value: function getAll(param) {
            this.init();
            return this.map.get(param) || null;
          }
          /**
           * Retrieves all the parameters for this body.
           * @returns The parameter names in a string array.
           */

        }, {
          key: "keys",
          value: function keys() {
            this.init();
            return Array.from(this.map.keys());
          }
          /**
           * Appends a new value to existing values for a parameter.
           * @param param The parameter name.
           * @param value The new value to add.
           * @return A new body with the appended value.
           */

        }, {
          key: "append",
          value: function append(param, value) {
            return this.clone({
              param: param,
              value: value,
              op: 'a'
            });
          }
          /**
           * Constructs a new body with appended values for the given parameter name.
           * @param params parameters and values
           * @return A new body with the new value.
           */

        }, {
          key: "appendAll",
          value: function appendAll(params) {
            var updates = [];
            Object.keys(params).forEach(function (param) {
              var value = params[param];

              if (Array.isArray(value)) {
                value.forEach(function (_value) {
                  updates.push({
                    param: param,
                    value: _value,
                    op: 'a'
                  });
                });
              } else {
                updates.push({
                  param: param,
                  value: value,
                  op: 'a'
                });
              }
            });
            return this.clone(updates);
          }
          /**
           * Replaces the value for a parameter.
           * @param param The parameter name.
           * @param value The new value.
           * @return A new body with the new value.
           */

        }, {
          key: "set",
          value: function set(param, value) {
            return this.clone({
              param: param,
              value: value,
              op: 's'
            });
          }
          /**
           * Removes a given value or all values from a parameter.
           * @param param The parameter name.
           * @param value The value to remove, if provided.
           * @return A new body with the given value removed, or with all values
           * removed if no value is specified.
           */

        }, {
          key: "delete",
          value: function _delete(param, value) {
            return this.clone({
              param: param,
              value: value,
              op: 'd'
            });
          }
          /**
           * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are
           * separated by `&`s.
           */

        }, {
          key: "toString",
          value: function toString() {
            var _this7 = this;

            this.init();
            return this.keys().map(function (key) {
              var eKey = _this7.encoder.encodeKey(key); // `a: ['1']` produces `'a=1'`
              // `b: []` produces `''`
              // `c: ['1', '2']` produces `'c=1&c=2'`


              return _this7.map.get(key).map(function (value) {
                return eKey + '=' + _this7.encoder.encodeValue(value);
              }).join('&');
            }) // filter out empty values because `b: []` produces `''`
            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't
            .filter(function (param) {
              return param !== '';
            }).join('&');
          }
        }, {
          key: "clone",
          value: function clone(update) {
            var clone = new _HttpParams({
              encoder: this.encoder
            });
            clone.cloneFrom = this.cloneFrom || this;
            clone.updates = (this.updates || []).concat(update);
            return clone;
          }
        }, {
          key: "init",
          value: function init() {
            var _this8 = this;

            if (this.map === null) {
              this.map = new Map();
            }

            if (this.cloneFrom !== null) {
              this.cloneFrom.init();
              this.cloneFrom.keys().forEach(function (key) {
                return _this8.map.set(key, _this8.cloneFrom.map.get(key));
              });
              this.updates.forEach(function (update) {
                switch (update.op) {
                  case 'a':
                  case 's':
                    var base = (update.op === 'a' ? _this8.map.get(update.param) : undefined) || [];
                    base.push(valueToString(update.value));

                    _this8.map.set(update.param, base);

                    break;

                  case 'd':
                    if (update.value !== undefined) {
                      var _base = _this8.map.get(update.param) || [];

                      var idx = _base.indexOf(valueToString(update.value));

                      if (idx !== -1) {
                        _base.splice(idx, 1);
                      }

                      if (_base.length > 0) {
                        _this8.map.set(update.param, _base);
                      } else {
                        _this8.map["delete"](update.param);
                      }
                    } else {
                      _this8.map["delete"](update.param);

                      break;
                    }

                }
              });
              this.cloneFrom = this.updates = null;
            }
          }
        }]);

        return _HttpParams;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A token used to manipulate and access values stored in `HttpContext`.
       *
       * @publicApi
       */


      var _HttpContextToken = /*#__PURE__*/_createClass(function _HttpContextToken(defaultValue) {
        _classCallCheck(this, _HttpContextToken);

        this.defaultValue = defaultValue;
      });
      /**
       * Http context stores arbitrary user defined values and ensures type safety without
       * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.
       *
       * This context is mutable and is shared between cloned requests unless explicitly specified.
       *
       * @usageNotes
       *
       * ### Usage Example
       *
       * ```typescript
       * // inside cache.interceptors.ts
       * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);
       *
       * export class CacheInterceptor implements HttpInterceptor {
       *
       *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {
       *     if (req.context.get(IS_CACHE_ENABLED) === true) {
       *       return ...;
       *     }
       *     return delegate.handle(req);
       *   }
       * }
       *
       * // inside a service
       *
       * this.httpClient.get('/api/weather', {
       *   context: new HttpContext().set(IS_CACHE_ENABLED, true)
       * }).subscribe(...);
       * ```
       *
       * @publicApi
       */


      var _HttpContext = /*#__PURE__*/function () {
        function _HttpContext() {
          _classCallCheck(this, _HttpContext);

          this.map = new Map();
        }
        /**
         * Store a value in the context. If a value is already present it will be overwritten.
         *
         * @param token The reference to an instance of `HttpContextToken`.
         * @param value The value to store.
         *
         * @returns A reference to itself for easy chaining.
         */


        _createClass(_HttpContext, [{
          key: "set",
          value: function set(token, value) {
            this.map.set(token, value);
            return this;
          }
          /**
           * Retrieve the value associated with the given token.
           *
           * @param token The reference to an instance of `HttpContextToken`.
           *
           * @returns The stored value or default if one is defined.
           */

        }, {
          key: "get",
          value: function get(token) {
            if (!this.map.has(token)) {
              this.map.set(token, token.defaultValue());
            }

            return this.map.get(token);
          }
          /**
           * Delete the value associated with the given token.
           *
           * @param token The reference to an instance of `HttpContextToken`.
           *
           * @returns A reference to itself for easy chaining.
           */

        }, {
          key: "delete",
          value: function _delete(token) {
            this.map["delete"](token);
            return this;
          }
          /**
           * @returns a list of tokens currently stored in the context.
           */

        }, {
          key: "keys",
          value: function keys() {
            return this.map.keys();
          }
        }]);

        return _HttpContext;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Determine whether the given HTTP method may include a body.
       */


      function mightHaveBody(method) {
        switch (method) {
          case 'DELETE':
          case 'GET':
          case 'HEAD':
          case 'OPTIONS':
          case 'JSONP':
            return false;

          default:
            return true;
        }
      }
      /**
       * Safely assert whether the given value is an ArrayBuffer.
       *
       * In some execution environments ArrayBuffer is not defined.
       */


      function isArrayBuffer(value) {
        return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;
      }
      /**
       * Safely assert whether the given value is a Blob.
       *
       * In some execution environments Blob is not defined.
       */


      function isBlob(value) {
        return typeof Blob !== 'undefined' && value instanceof Blob;
      }
      /**
       * Safely assert whether the given value is a FormData instance.
       *
       * In some execution environments FormData is not defined.
       */


      function isFormData(value) {
        return typeof FormData !== 'undefined' && value instanceof FormData;
      }
      /**
       * Safely assert whether the given value is a URLSearchParams instance.
       *
       * In some execution environments URLSearchParams is not defined.
       */


      function isUrlSearchParams(value) {
        return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;
      }
      /**
       * An outgoing HTTP request with an optional typed body.
       *
       * `HttpRequest` represents an outgoing request, including URL, method,
       * headers, body, and other request configuration options. Instances should be
       * assumed to be immutable. To modify a `HttpRequest`, the `clone`
       * method should be used.
       *
       * @publicApi
       */


      var _HttpRequest = /*#__PURE__*/function () {
        function _HttpRequest(method, url, third, fourth) {
          _classCallCheck(this, _HttpRequest);

          this.url = url;
          /**
           * The request body, or `null` if one isn't set.
           *
           * Bodies are not enforced to be immutable, as they can include a reference to any
           * user-defined data type. However, interceptors should take care to preserve
           * idempotence by treating them as such.
           */

          this.body = null;
          /**
           * Whether this request should be made in a way that exposes progress events.
           *
           * Progress events are expensive (change detection runs on each event) and so
           * they should only be requested if the consumer intends to monitor them.
           */

          this.reportProgress = false;
          /**
           * Whether this request should be sent with outgoing credentials (cookies).
           */

          this.withCredentials = false;
          /**
           * The expected response type of the server.
           *
           * This is used to parse the response appropriately before returning it to
           * the requestee.
           */

          this.responseType = 'json';
          this.method = method.toUpperCase(); // Next, need to figure out which argument holds the HttpRequestInit
          // options, if any.

          var options; // Check whether a body argument is expected. The only valid way to omit
          // the body argument is to use a known no-body method like GET.

          if (mightHaveBody(this.method) || !!fourth) {
            // Body is the third argument, options are the fourth.
            this.body = third !== undefined ? third : null;
            options = fourth;
          } else {
            // No body required, options are the third argument. The body stays null.
            options = third;
          } // If options have been passed, interpret them.


          if (options) {
            // Normalize reportProgress and withCredentials.
            this.reportProgress = !!options.reportProgress;
            this.withCredentials = !!options.withCredentials; // Override default response type of 'json' if one is provided.

            if (!!options.responseType) {
              this.responseType = options.responseType;
            } // Override headers if they're provided.


            if (!!options.headers) {
              this.headers = options.headers;
            }

            if (!!options.context) {
              this.context = options.context;
            }

            if (!!options.params) {
              this.params = options.params;
            }
          } // If no headers have been passed in, construct a new HttpHeaders instance.


          if (!this.headers) {
            this.headers = new _HttpHeaders();
          } // If no context have been passed in, construct a new HttpContext instance.


          if (!this.context) {
            this.context = new _HttpContext();
          } // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.


          if (!this.params) {
            this.params = new _HttpParams();
            this.urlWithParams = url;
          } else {
            // Encode the parameters to a string in preparation for inclusion in the URL.
            var params = this.params.toString();

            if (params.length === 0) {
              // No parameters, the visible URL is just the URL given at creation time.
              this.urlWithParams = url;
            } else {
              // Does the URL already have query parameters? Look for '?'.
              var qIdx = url.indexOf('?'); // There are 3 cases to handle:
              // 1) No existing parameters -> append '?' followed by params.
              // 2) '?' exists and is followed by existing query string ->
              //    append '&' followed by params.
              // 3) '?' exists at the end of the url -> append params directly.
              // This basically amounts to determining the character, if any, with
              // which to join the URL and parameters.

              var sep = qIdx === -1 ? '?' : qIdx < url.length - 1 ? '&' : '';
              this.urlWithParams = url + sep + params;
            }
          }
        }
        /**
         * Transform the free-form body into a serialized format suitable for
         * transmission to the server.
         */


        _createClass(_HttpRequest, [{
          key: "serializeBody",
          value: function serializeBody() {
            // If no body is present, no need to serialize it.
            if (this.body === null) {
              return null;
            } // Check whether the body is already in a serialized form. If so,
            // it can just be returned directly.


            if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) || isUrlSearchParams(this.body) || typeof this.body === 'string') {
              return this.body;
            } // Check whether the body is an instance of HttpUrlEncodedParams.


            if (this.body instanceof _HttpParams) {
              return this.body.toString();
            } // Check whether the body is an object or array, and serialize with JSON if so.


            if (typeof this.body === 'object' || typeof this.body === 'boolean' || Array.isArray(this.body)) {
              return JSON.stringify(this.body);
            } // Fall back on toString() for everything else.


            return this.body.toString();
          }
          /**
           * Examine the body and attempt to infer an appropriate MIME type
           * for it.
           *
           * If no such type can be inferred, this method will return `null`.
           */

        }, {
          key: "detectContentTypeHeader",
          value: function detectContentTypeHeader() {
            // An empty body has no content type.
            if (this.body === null) {
              return null;
            } // FormData bodies rely on the browser's content type assignment.


            if (isFormData(this.body)) {
              return null;
            } // Blobs usually have their own content type. If it doesn't, then
            // no type can be inferred.


            if (isBlob(this.body)) {
              return this.body.type || null;
            } // Array buffers have unknown contents and thus no type can be inferred.


            if (isArrayBuffer(this.body)) {
              return null;
            } // Technically, strings could be a form of JSON data, but it's safe enough
            // to assume they're plain strings.


            if (typeof this.body === 'string') {
              return 'text/plain';
            } // `HttpUrlEncodedParams` has its own content-type.


            if (this.body instanceof _HttpParams) {
              return 'application/x-www-form-urlencoded;charset=UTF-8';
            } // Arrays, objects, boolean and numbers will be encoded as JSON.


            if (typeof this.body === 'object' || typeof this.body === 'number' || typeof this.body === 'boolean') {
              return 'application/json';
            } // No type could be inferred.


            return null;
          }
        }, {
          key: "clone",
          value: function clone() {
            var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            var _a; // For method, url, and responseType, take the current value unless
            // it is overridden in the update hash.


            var method = update.method || this.method;
            var url = update.url || this.url;
            var responseType = update.responseType || this.responseType; // The body is somewhat special - a `null` value in update.body means
            // whatever current body is present is being overridden with an empty
            // body, whereas an `undefined` value in update.body implies no
            // override.

            var body = update.body !== undefined ? update.body : this.body; // Carefully handle the boolean options to differentiate between
            // `false` and `undefined` in the update args.

            var withCredentials = update.withCredentials !== undefined ? update.withCredentials : this.withCredentials;
            var reportProgress = update.reportProgress !== undefined ? update.reportProgress : this.reportProgress; // Headers and params may be appended to if `setHeaders` or
            // `setParams` are used.

            var headers = update.headers || this.headers;
            var params = update.params || this.params; // Pass on context if needed

            var context = (_a = update.context) !== null && _a !== void 0 ? _a : this.context; // Check whether the caller has asked to add headers.

            if (update.setHeaders !== undefined) {
              // Set every requested header.
              headers = Object.keys(update.setHeaders).reduce(function (headers, name) {
                return headers.set(name, update.setHeaders[name]);
              }, headers);
            } // Check whether the caller has asked to set params.


            if (update.setParams) {
              // Set every requested param.
              params = Object.keys(update.setParams).reduce(function (params, param) {
                return params.set(param, update.setParams[param]);
              }, params);
            } // Finally, construct the new HttpRequest using the pieces from above.


            return new _HttpRequest(method, url, body, {
              params: params,
              headers: headers,
              context: context,
              reportProgress: reportProgress,
              responseType: responseType,
              withCredentials: withCredentials
            });
          }
        }]);

        return _HttpRequest;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Type enumeration for the different kinds of `HttpEvent`.
       *
       * @publicApi
       */


      var _HttpEventType;

      (function (HttpEventType) {
        /**
         * The request was sent out over the wire.
         */
        HttpEventType[HttpEventType["Sent"] = 0] = "Sent";
        /**
         * An upload progress event was received.
         */

        HttpEventType[HttpEventType["UploadProgress"] = 1] = "UploadProgress";
        /**
         * The response status code and headers were received.
         */

        HttpEventType[HttpEventType["ResponseHeader"] = 2] = "ResponseHeader";
        /**
         * A download progress event was received.
         */

        HttpEventType[HttpEventType["DownloadProgress"] = 3] = "DownloadProgress";
        /**
         * The full response including the body was received.
         */

        HttpEventType[HttpEventType["Response"] = 4] = "Response";
        /**
         * A custom event from an interceptor or a backend.
         */

        HttpEventType[HttpEventType["User"] = 5] = "User";
      })(_HttpEventType || (_HttpEventType = {}));
      /**
       * Base class for both `HttpResponse` and `HttpHeaderResponse`.
       *
       * @publicApi
       */


      var _HttpResponseBase = /*#__PURE__*/_createClass(
      /**
       * Super-constructor for all responses.
       *
       * The single parameter accepted is an initialization hash. Any properties
       * of the response passed there will override the default values.
       */
      function _HttpResponseBase(init) {
        var defaultStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;
        var defaultStatusText = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'OK';

        _classCallCheck(this, _HttpResponseBase);

        // If the hash has values passed, use them to initialize the response.
        // Otherwise use the default values.
        this.headers = init.headers || new _HttpHeaders();
        this.status = init.status !== undefined ? init.status : defaultStatus;
        this.statusText = init.statusText || defaultStatusText;
        this.url = init.url || null; // Cache the ok value to avoid defining a getter.

        this.ok = this.status >= 200 && this.status < 300;
      });
      /**
       * A partial HTTP response which only includes the status and header data,
       * but no response body.
       *
       * `HttpHeaderResponse` is a `HttpEvent` available on the response
       * event stream, only when progress events are requested.
       *
       * @publicApi
       */


      var _HttpHeaderResponse = /*#__PURE__*/function (_HttpResponseBase2) {
        _inherits(_HttpHeaderResponse, _HttpResponseBase2);

        var _super2 = _createSuper(_HttpHeaderResponse);

        /**
         * Create a new `HttpHeaderResponse` with the given parameters.
         */
        function _HttpHeaderResponse() {
          var _this9;

          var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          _classCallCheck(this, _HttpHeaderResponse);

          _this9 = _super2.call(this, init);
          _this9.type = _HttpEventType.ResponseHeader;
          return _this9;
        }
        /**
         * Copy this `HttpHeaderResponse`, overriding its contents with the
         * given parameter hash.
         */


        _createClass(_HttpHeaderResponse, [{
          key: "clone",
          value: function clone() {
            var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            // Perform a straightforward initialization of the new HttpHeaderResponse,
            // overriding the current parameters with new ones if given.
            return new _HttpHeaderResponse({
              headers: update.headers || this.headers,
              status: update.status !== undefined ? update.status : this.status,
              statusText: update.statusText || this.statusText,
              url: update.url || this.url || undefined
            });
          }
        }]);

        return _HttpHeaderResponse;
      }(_HttpResponseBase);
      /**
       * A full HTTP response, including a typed response body (which may be `null`
       * if one was not returned).
       *
       * `HttpResponse` is a `HttpEvent` available on the response event
       * stream.
       *
       * @publicApi
       */


      var _HttpResponse = /*#__PURE__*/function (_HttpResponseBase3) {
        _inherits(_HttpResponse, _HttpResponseBase3);

        var _super3 = _createSuper(_HttpResponse);

        /**
         * Construct a new `HttpResponse`.
         */
        function _HttpResponse() {
          var _this10;

          var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          _classCallCheck(this, _HttpResponse);

          _this10 = _super3.call(this, init);
          _this10.type = _HttpEventType.Response;
          _this10.body = init.body !== undefined ? init.body : null;
          return _this10;
        }

        _createClass(_HttpResponse, [{
          key: "clone",
          value: function clone() {
            var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            return new _HttpResponse({
              body: update.body !== undefined ? update.body : this.body,
              headers: update.headers || this.headers,
              status: update.status !== undefined ? update.status : this.status,
              statusText: update.statusText || this.statusText,
              url: update.url || this.url || undefined
            });
          }
        }]);

        return _HttpResponse;
      }(_HttpResponseBase);
      /**
       * A response that represents an error or failure, either from a
       * non-successful HTTP status, an error while executing the request,
       * or some other failure which occurred during the parsing of the response.
       *
       * Any error returned on the `Observable` response stream will be
       * wrapped in an `HttpErrorResponse` to provide additional context about
       * the state of the HTTP layer when the error occurred. The error property
       * will contain either a wrapped Error object or the error response returned
       * from the server.
       *
       * @publicApi
       */


      var _HttpErrorResponse = /*#__PURE__*/function (_HttpResponseBase4) {
        _inherits(_HttpErrorResponse, _HttpResponseBase4);

        var _super4 = _createSuper(_HttpErrorResponse);

        function _HttpErrorResponse(init) {
          var _this11;

          _classCallCheck(this, _HttpErrorResponse);

          // Initialize with a default status of 0 / Unknown Error.
          _this11 = _super4.call(this, init, 0, 'Unknown Error');
          _this11.name = 'HttpErrorResponse';
          /**
           * Errors are never okay, even when the status code is in the 2xx success range.
           */

          _this11.ok = false; // If the response was successful, then this was a parse error. Otherwise, it was
          // a protocol-level failure of some sort. Either the request failed in transit
          // or the server returned an unsuccessful status code.

          if (_this11.status >= 200 && _this11.status < 300) {
            _this11.message = "Http failure during parsing for ".concat(init.url || '(unknown url)');
          } else {
            _this11.message = "Http failure response for ".concat(init.url || '(unknown url)', ": ").concat(init.status, " ").concat(init.statusText);
          }

          _this11.error = init.error || null;
          return _this11;
        }

        return _createClass(_HttpErrorResponse);
      }(_HttpResponseBase);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and
       * the given `body`. This function clones the object and adds the body.
       *
       * Note that the `responseType` *options* value is a String that identifies the
       * single data type of the response.
       * A single overload version of the method handles each response type.
       * The value of `responseType` cannot be a union, as the combined signature could imply.
       *
       */


      function addBody(options, body) {
        return {
          body: body,
          headers: options.headers,
          context: options.context,
          observe: options.observe,
          params: options.params,
          reportProgress: options.reportProgress,
          responseType: options.responseType,
          withCredentials: options.withCredentials
        };
      }
      /**
       * Performs HTTP requests.
       * This service is available as an injectable class, with methods to perform HTTP requests.
       * Each request method has multiple signatures, and the return type varies based on
       * the signature that is called (mainly the values of `observe` and `responseType`).
       *
       * Note that the `responseType` *options* value is a String that identifies the
       * single data type of the response.
       * A single overload version of the method handles each response type.
       * The value of `responseType` cannot be a union, as the combined signature could imply.
      
       *
       * @usageNotes
       * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.
       *
       * ### HTTP Request Example
       *
       * ```
       *  // GET heroes whose name contains search term
       * searchHeroes(term: string): observable<Hero[]>{
       *
       *  const params = new HttpParams({fromString: 'name=term'});
       *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});
       * }
       * ```
       *
       * Alternatively, the parameter string can be used without invoking HttpParams
       * by directly joining to the URL.
       * ```
       * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});
       * ```
       *
       *
       * ### JSONP Example
       * ```
       * requestJsonp(url, callback = 'callback') {
       *  return this.httpClient.jsonp(this.heroesURL, callback);
       * }
       * ```
       *
       * ### PATCH Example
       * ```
       * // PATCH one of the heroes' name
       * patchHero (id: number, heroName: string): Observable<{}> {
       * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42
       *  return this.httpClient.patch(url, {name: heroName}, httpOptions)
       *    .pipe(catchError(this.handleError('patchHero')));
       * }
       * ```
       *
       * @see [HTTP Guide](guide/http)
       * @see [HTTP Request](api/common/http/HttpRequest)
       *
       * @publicApi
       */


      var _HttpClient = /*#__PURE__*/function () {
        function _HttpClient(handler) {
          _classCallCheck(this, _HttpClient);

          this.handler = handler;
        }
        /**
         * Constructs an observable for a generic HTTP request that, when subscribed,
         * fires the request through the chain of registered interceptors and on to the
         * server.
         *
         * You can pass an `HttpRequest` directly as the only parameter. In this case,
         * the call returns an observable of the raw `HttpEvent` stream.
         *
         * Alternatively you can pass an HTTP method as the first parameter,
         * a URL string as the second, and an options hash containing the request body as the third.
         * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the
         * type of returned observable.
         *   * The `responseType` value determines how a successful response body is parsed.
         *   * If `responseType` is the default `json`, you can pass a type interface for the resulting
         * object as a type parameter to the call.
         *
         * The `observe` value determines the return type, according to what you are interested in
         * observing.
         *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including
         * progress events by default.
         *   * An `observe` value of response returns an observable of `HttpResponse<T>`,
         * where the `T` parameter depends on the `responseType` and any optionally provided type
         * parameter.
         *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.
         *
         */


        _createClass(_HttpClient, [{
          key: "request",
          value: function request(first, url) {
            var _this12 = this;

            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            var req; // First, check whether the primary argument is an instance of `HttpRequest`.

            if (first instanceof _HttpRequest) {
              // It is. The other arguments must be undefined (per the signatures) and can be
              // ignored.
              req = first;
            } else {
              // It's a string, so it represents a URL. Construct a request based on it,
              // and incorporate the remaining arguments (assuming `GET` unless a method is
              // provided.
              // Figure out the headers.
              var headers = undefined;

              if (options.headers instanceof _HttpHeaders) {
                headers = options.headers;
              } else {
                headers = new _HttpHeaders(options.headers);
              } // Sort out parameters.


              var params = undefined;

              if (!!options.params) {
                if (options.params instanceof _HttpParams) {
                  params = options.params;
                } else {
                  params = new _HttpParams({
                    fromObject: options.params
                  });
                }
              } // Construct the request.


              req = new _HttpRequest(first, url, options.body !== undefined ? options.body : null, {
                headers: headers,
                context: options.context,
                params: params,
                reportProgress: options.reportProgress,
                // By default, JSON is assumed to be returned for all calls.
                responseType: options.responseType || 'json',
                withCredentials: options.withCredentials
              });
            } // Start with an Observable.of() the initial request, and run the handler (which
            // includes all interceptors) inside a concatMap(). This way, the handler runs
            // inside an Observable chain, which causes interceptors to be re-run on every
            // subscription (this also makes retries re-run the handler, including interceptors).


            var events$ = (0, rxjs__WEBPACK_IMPORTED_MODULE_0__.of)(req).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_1__.concatMap)(function (req) {
              return _this12.handler.handle(req);
            })); // If coming via the API signature which accepts a previously constructed HttpRequest,
            // the only option is to get the event stream. Otherwise, return the event stream if
            // that is what was requested.

            if (first instanceof _HttpRequest || options.observe === 'events') {
              return events$;
            } // The requested stream contains either the full response or the body. In either
            // case, the first step is to filter the event stream to extract a stream of
            // responses(s).


            var res$ = events$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_2__.filter)(function (event) {
              return event instanceof _HttpResponse;
            })); // Decide which stream to return.

            switch (options.observe || 'body') {
              case 'body':
                // The requested stream is the body. Map the response stream to the response
                // body. This could be done more simply, but a misbehaving interceptor might
                // transform the response body into a different format and ignore the requested
                // responseType. Guard against this by validating that the response is of the
                // requested type.
                switch (req.responseType) {
                  case 'arraybuffer':
                    return res$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(function (res) {
                      // Validate that the body is an ArrayBuffer.
                      if (res.body !== null && !(res.body instanceof ArrayBuffer)) {
                        throw new Error('Response is not an ArrayBuffer.');
                      }

                      return res.body;
                    }));

                  case 'blob':
                    return res$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(function (res) {
                      // Validate that the body is a Blob.
                      if (res.body !== null && !(res.body instanceof Blob)) {
                        throw new Error('Response is not a Blob.');
                      }

                      return res.body;
                    }));

                  case 'text':
                    return res$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(function (res) {
                      // Validate that the body is a string.
                      if (res.body !== null && typeof res.body !== 'string') {
                        throw new Error('Response is not a string.');
                      }

                      return res.body;
                    }));

                  case 'json':
                  default:
                    // No validation needed for JSON responses, as they can be of any type.
                    return res$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(function (res) {
                      return res.body;
                    }));
                }

              case 'response':
                // The response stream was requested directly, so return it.
                return res$;

              default:
                // Guard against new future observe types being added.
                throw new Error("Unreachable: unhandled observe type ".concat(options.observe, "}"));
            }
          }
          /**
           * Constructs an observable that, when subscribed, causes the configured
           * `DELETE` request to execute on the server. See the individual overloads for
           * details on the return type.
           *
           * @param url     The endpoint URL.
           * @param options The HTTP options to send with the request.
           *
           */

        }, {
          key: "delete",
          value: function _delete(url) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            return this.request('DELETE', url, options);
          }
          /**
           * Constructs an observable that, when subscribed, causes the configured
           * `GET` request to execute on the server. See the individual overloads for
           * details on the return type.
           */

        }, {
          key: "get",
          value: function get(url) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            return this.request('GET', url, options);
          }
          /**
           * Constructs an observable that, when subscribed, causes the configured
           * `HEAD` request to execute on the server. The `HEAD` method returns
           * meta information about the resource without transferring the
           * resource itself. See the individual overloads for
           * details on the return type.
           */

        }, {
          key: "head",
          value: function head(url) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            return this.request('HEAD', url, options);
          }
          /**
           * Constructs an `Observable` that, when subscribed, causes a request with the special method
           * `JSONP` to be dispatched via the interceptor pipeline.
           * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain
           * API endpoints that don't support newer,
           * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.
           * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the
           * requests even if the API endpoint is not located on the same domain (origin) as the client-side
           * application making the request.
           * The endpoint API must support JSONP callback for JSONP requests to work.
           * The resource API returns the JSON response wrapped in a callback function.
           * You can pass the callback function name as one of the query parameters.
           * Note that JSONP requests can only be used with `GET` requests.
           *
           * @param url The resource URL.
           * @param callbackParam The callback function name.
           *
           */

        }, {
          key: "jsonp",
          value: function jsonp(url, callbackParam) {
            return this.request('JSONP', url, {
              params: new _HttpParams().append(callbackParam, 'JSONP_CALLBACK'),
              observe: 'body',
              responseType: 'json'
            });
          }
          /**
           * Constructs an `Observable` that, when subscribed, causes the configured
           * `OPTIONS` request to execute on the server. This method allows the client
           * to determine the supported HTTP methods and other capabilities of an endpoint,
           * without implying a resource action. See the individual overloads for
           * details on the return type.
           */

        }, {
          key: "options",
          value: function options(url) {
            var _options2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            return this.request('OPTIONS', url, _options2);
          }
          /**
           * Constructs an observable that, when subscribed, causes the configured
           * `PATCH` request to execute on the server. See the individual overloads for
           * details on the return type.
           */

        }, {
          key: "patch",
          value: function patch(url, body) {
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            return this.request('PATCH', url, addBody(options, body));
          }
          /**
           * Constructs an observable that, when subscribed, causes the configured
           * `POST` request to execute on the server. The server responds with the location of
           * the replaced resource. See the individual overloads for
           * details on the return type.
           */

        }, {
          key: "post",
          value: function post(url, body) {
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            return this.request('POST', url, addBody(options, body));
          }
          /**
           * Constructs an observable that, when subscribed, causes the configured
           * `PUT` request to execute on the server. The `PUT` method replaces an existing resource
           * with a new set of values.
           * See the individual overloads for details on the return type.
           */

        }, {
          key: "put",
          value: function put(url, body) {
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            return this.request('PUT', url, addBody(options, body));
          }
        }]);

        return _HttpClient;
      }();

      _HttpClient.ɵfac = function HttpClient_Factory(t) {
        return new (t || _HttpClient)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](_HttpHandler));
      };

      _HttpClient.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
        token: _HttpClient,
        factory: _HttpClient.ɵfac
      });

      _HttpClient.ctorParameters = function () {
        return [{
          type: _HttpHandler
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](_HttpClient, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable
        }], function () {
          return [{
            type: _HttpHandler
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.
       *
       *
       */


      var HttpInterceptorHandler = /*#__PURE__*/function () {
        function HttpInterceptorHandler(next, interceptor) {
          _classCallCheck(this, HttpInterceptorHandler);

          this.next = next;
          this.interceptor = interceptor;
        }

        _createClass(HttpInterceptorHandler, [{
          key: "handle",
          value: function handle(req) {
            return this.interceptor.intercept(req, this.next);
          }
        }]);

        return HttpInterceptorHandler;
      }();
      /**
       * A multi-provider token that represents the array of registered
       * `HttpInterceptor` objects.
       *
       * @publicApi
       */


      var _HTTP_INTERCEPTORS = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.InjectionToken('HTTP_INTERCEPTORS');

      var NoopInterceptor = /*#__PURE__*/function () {
        function NoopInterceptor() {
          _classCallCheck(this, NoopInterceptor);
        }

        _createClass(NoopInterceptor, [{
          key: "intercept",
          value: function intercept(req, next) {
            return next.handle(req);
          }
        }]);

        return NoopInterceptor;
      }();

      NoopInterceptor.ɵfac = function NoopInterceptor_Factory(t) {
        return new (t || NoopInterceptor)();
      };

      NoopInterceptor.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
        token: NoopInterceptor,
        factory: NoopInterceptor.ɵfac
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](NoopInterceptor, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // Every request made through JSONP needs a callback name that's unique across the
      // whole page. Each request is assigned an id and the callback name is constructed
      // from that. The next id to be assigned is tracked in a global variable here that
      // is shared among all applications on the page.


      var nextRequestId = 0; // Error text given when a JSONP script is injected, but doesn't invoke the callback
      // passed in its URL.

      var JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.'; // Error text given when a request is passed to the JsonpClientBackend that doesn't
      // have a request method JSONP.

      var JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';
      var JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';
      /**
       * DI token/abstract type representing a map of JSONP callbacks.
       *
       * In the browser, this should always be the `window` object.
       *
       *
       */

      var JsonpCallbackContext = /*#__PURE__*/_createClass(function JsonpCallbackContext() {
        _classCallCheck(this, JsonpCallbackContext);
      });
      /**
       * Processes an `HttpRequest` with the JSONP method,
       * by performing JSONP style requests.
       * @see `HttpHandler`
       * @see `HttpXhrBackend`
       *
       * @publicApi
       */


      var _JsonpClientBackend = /*#__PURE__*/function () {
        function _JsonpClientBackend(callbackMap, document) {
          _classCallCheck(this, _JsonpClientBackend);

          this.callbackMap = callbackMap;
          this.document = document;
          /**
           * A resolved promise that can be used to schedule microtasks in the event handlers.
           */

          this.resolvedPromise = Promise.resolve();
        }
        /**
         * Get the name of the next callback method, by incrementing the global `nextRequestId`.
         */


        _createClass(_JsonpClientBackend, [{
          key: "nextCallback",
          value: function nextCallback() {
            return "ng_jsonp_callback_".concat(nextRequestId++);
          }
          /**
           * Processes a JSONP request and returns an event stream of the results.
           * @param req The request object.
           * @returns An observable of the response events.
           *
           */

        }, {
          key: "handle",
          value: function handle(req) {
            var _this13 = this;

            // Firstly, check both the method and response type. If either doesn't match
            // then the request was improperly routed here and cannot be handled.
            if (req.method !== 'JSONP') {
              throw new Error(JSONP_ERR_WRONG_METHOD);
            } else if (req.responseType !== 'json') {
              throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);
            } // Everything else happens inside the Observable boundary.


            return new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable(function (observer) {
              // The first step to make a request is to generate the callback name, and replace the
              // callback placeholder in the URL with the name. Care has to be taken here to ensure
              // a trailing &, if matched, gets inserted back into the URL in the correct place.
              var callback = _this13.nextCallback();

              var url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, "=".concat(callback, "$1")); // Construct the <script> tag and point it at the URL.

              var node = _this13.document.createElement('script');

              node.src = url; // A JSONP request requires waiting for multiple callbacks. These variables
              // are closed over and track state across those callbacks.
              // The response object, if one has been received, or null otherwise.

              var body = null; // Whether the response callback has been called.

              var finished = false; // Whether the request has been cancelled (and thus any other callbacks)
              // should be ignored.

              var cancelled = false; // Set the response callback in this.callbackMap (which will be the window
              // object in the browser. The script being loaded via the <script> tag will
              // eventually call this callback.

              _this13.callbackMap[callback] = function (data) {
                // Data has been received from the JSONP script. Firstly, delete this callback.
                delete _this13.callbackMap[callback]; // Next, make sure the request wasn't cancelled in the meantime.

                if (cancelled) {
                  return;
                } // Set state to indicate data was received.


                body = data;
                finished = true;
              }; // cleanup() is a utility closure that removes the <script> from the page and
              // the response callback from the window. This logic is used in both the
              // success, error, and cancellation paths, so it's extracted out for convenience.


              var cleanup = function cleanup() {
                // Remove the <script> tag if it's still on the page.
                if (node.parentNode) {
                  node.parentNode.removeChild(node);
                } // Remove the response callback from the callbackMap (window object in the
                // browser).


                delete _this13.callbackMap[callback];
              }; // onLoad() is the success callback which runs after the response callback
              // if the JSONP script loads successfully. The event itself is unimportant.
              // If something went wrong, onLoad() may run without the response callback
              // having been invoked.


              var onLoad = function onLoad(event) {
                // Do nothing if the request has been cancelled.
                if (cancelled) {
                  return;
                } // We wrap it in an extra Promise, to ensure the microtask
                // is scheduled after the loaded endpoint has executed any potential microtask itself,
                // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496


                _this13.resolvedPromise.then(function () {
                  // Cleanup the page.
                  cleanup(); // Check whether the response callback has run.

                  if (!finished) {
                    // It hasn't, something went wrong with the request. Return an error via
                    // the Observable error path. All JSONP errors have status 0.
                    observer.error(new _HttpErrorResponse({
                      url: url,
                      status: 0,
                      statusText: 'JSONP Error',
                      error: new Error(JSONP_ERR_NO_CALLBACK)
                    }));
                    return;
                  } // Success. body either contains the response body or null if none was
                  // returned.


                  observer.next(new _HttpResponse({
                    body: body,
                    status: 200
                    /* Ok */
                    ,
                    statusText: 'OK',
                    url: url
                  })); // Complete the stream, the response is over.

                  observer.complete();
                });
              }; // onError() is the error callback, which runs if the script returned generates
              // a Javascript error. It emits the error via the Observable error channel as
              // a HttpErrorResponse.


              var onError = function onError(error) {
                // If the request was already cancelled, no need to emit anything.
                if (cancelled) {
                  return;
                }

                cleanup(); // Wrap the error in a HttpErrorResponse.

                observer.error(new _HttpErrorResponse({
                  error: error,
                  status: 0,
                  statusText: 'JSONP Error',
                  url: url
                }));
              }; // Subscribe to both the success (load) and error events on the <script> tag,
              // and add it to the page.


              node.addEventListener('load', onLoad);
              node.addEventListener('error', onError);

              _this13.document.body.appendChild(node); // The request has now been successfully sent.


              observer.next({
                type: _HttpEventType.Sent
              }); // Cancellation handler.

              return function () {
                // Track the cancellation so event listeners won't do anything even if already scheduled.
                cancelled = true; // Remove the event listeners so they won't run if the events later fire.

                node.removeEventListener('load', onLoad);
                node.removeEventListener('error', onError); // And finally, clean up the page.

                cleanup();
              };
            });
          }
        }]);

        return _JsonpClientBackend;
      }();

      _JsonpClientBackend.ɵfac = function JsonpClientBackend_Factory(t) {
        return new (t || _JsonpClientBackend)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](JsonpCallbackContext), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT));
      };

      _JsonpClientBackend.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
        token: _JsonpClientBackend,
        factory: _JsonpClientBackend.ɵfac
      });

      _JsonpClientBackend.ctorParameters = function () {
        return [{
          type: JsonpCallbackContext
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](_JsonpClientBackend, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable
        }], function () {
          return [{
            type: JsonpCallbackContext
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT]
            }]
          }];
        }, null);
      })();
      /**
       * Identifies requests with the method JSONP and
       * shifts them to the `JsonpClientBackend`.
       *
       * @see `HttpInterceptor`
       *
       * @publicApi
       */


      var _JsonpInterceptor = /*#__PURE__*/function () {
        function _JsonpInterceptor(jsonp) {
          _classCallCheck(this, _JsonpInterceptor);

          this.jsonp = jsonp;
        }
        /**
         * Identifies and handles a given JSONP request.
         * @param req The outgoing request object to handle.
         * @param next The next interceptor in the chain, or the backend
         * if no interceptors remain in the chain.
         * @returns An observable of the event stream.
         */


        _createClass(_JsonpInterceptor, [{
          key: "intercept",
          value: function intercept(req, next) {
            if (req.method === 'JSONP') {
              return this.jsonp.handle(req);
            } // Fall through for normal HTTP requests.


            return next.handle(req);
          }
        }]);

        return _JsonpInterceptor;
      }();

      _JsonpInterceptor.ɵfac = function JsonpInterceptor_Factory(t) {
        return new (t || _JsonpInterceptor)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](_JsonpClientBackend));
      };

      _JsonpInterceptor.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
        token: _JsonpInterceptor,
        factory: _JsonpInterceptor.ɵfac
      });

      _JsonpInterceptor.ctorParameters = function () {
        return [{
          type: _JsonpClientBackend
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](_JsonpInterceptor, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable
        }], function () {
          return [{
            type: _JsonpClientBackend
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var XSSI_PREFIX = /^\)\]\}',?\n/;
      /**
       * Determine an appropriate URL for the response, by checking either
       * XMLHttpRequest.responseURL or the X-Request-URL header.
       */

      function getResponseUrl(xhr) {
        if ('responseURL' in xhr && xhr.responseURL) {
          return xhr.responseURL;
        }

        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
          return xhr.getResponseHeader('X-Request-URL');
        }

        return null;
      }
      /**
       * Uses `XMLHttpRequest` to send requests to a backend server.
       * @see `HttpHandler`
       * @see `JsonpClientBackend`
       *
       * @publicApi
       */


      var _HttpXhrBackend = /*#__PURE__*/function () {
        function _HttpXhrBackend(xhrFactory) {
          _classCallCheck(this, _HttpXhrBackend);

          this.xhrFactory = xhrFactory;
        }
        /**
         * Processes a request and returns a stream of response events.
         * @param req The request object.
         * @returns An observable of the response events.
         */


        _createClass(_HttpXhrBackend, [{
          key: "handle",
          value: function handle(req) {
            var _this14 = this;

            // Quick check to give a better error message when a user attempts to use
            // HttpClient.jsonp() without installing the HttpClientJsonpModule
            if (req.method === 'JSONP') {
              throw new Error("Attempted to construct Jsonp request without HttpClientJsonpModule installed.");
            } // Everything happens on Observable subscription.


            return new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable(function (observer) {
              // Start by setting up the XHR object with request method, URL, and withCredentials flag.
              var xhr = _this14.xhrFactory.build();

              xhr.open(req.method, req.urlWithParams);

              if (!!req.withCredentials) {
                xhr.withCredentials = true;
              } // Add all the requested headers.


              req.headers.forEach(function (name, values) {
                return xhr.setRequestHeader(name, values.join(','));
              }); // Add an Accept header if one isn't present already.

              if (!req.headers.has('Accept')) {
                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');
              } // Auto-detect the Content-Type header if one isn't present already.


              if (!req.headers.has('Content-Type')) {
                var detectedType = req.detectContentTypeHeader(); // Sometimes Content-Type detection fails.

                if (detectedType !== null) {
                  xhr.setRequestHeader('Content-Type', detectedType);
                }
              } // Set the responseType if one was requested.


              if (req.responseType) {
                var responseType = req.responseType.toLowerCase(); // JSON responses need to be processed as text. This is because if the server
                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,
                // xhr.response will be null, and xhr.responseText cannot be accessed to
                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON
                // is parsed by first requesting text and then applying JSON.parse.

                xhr.responseType = responseType !== 'json' ? responseType : 'text';
              } // Serialize the request body if one is present. If not, this will be set to null.


              var reqBody = req.serializeBody(); // If progress events are enabled, response headers will be delivered
              // in two events - the HttpHeaderResponse event and the full HttpResponse
              // event. However, since response headers don't change in between these
              // two events, it doesn't make sense to parse them twice. So headerResponse
              // caches the data extracted from the response whenever it's first parsed,
              // to ensure parsing isn't duplicated.

              var headerResponse = null; // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest
              // state, and memoizes it into headerResponse.

              var partialFromXhr = function partialFromXhr() {
                if (headerResponse !== null) {
                  return headerResponse;
                } // Read status and normalize an IE9 bug (https://bugs.jquery.com/ticket/1450).


                var status = xhr.status === 1223 ? 204
                /* NoContent */
                : xhr.status;
                var statusText = xhr.statusText || 'OK'; // Parse headers from XMLHttpRequest - this step is lazy.

                var headers = new _HttpHeaders(xhr.getAllResponseHeaders()); // Read the response URL from the XMLHttpResponse instance and fall back on the
                // request URL.

                var url = getResponseUrl(xhr) || req.url; // Construct the HttpHeaderResponse and memoize it.

                headerResponse = new _HttpHeaderResponse({
                  headers: headers,
                  status: status,
                  statusText: statusText,
                  url: url
                });
                return headerResponse;
              }; // Next, a few closures are defined for the various events which XMLHttpRequest can
              // emit. This allows them to be unregistered as event listeners later.
              // First up is the load event, which represents a response being fully available.


              var onLoad = function onLoad() {
                // Read response state from the memoized partial data.
                var _partialFromXhr = partialFromXhr(),
                    headers = _partialFromXhr.headers,
                    status = _partialFromXhr.status,
                    statusText = _partialFromXhr.statusText,
                    url = _partialFromXhr.url; // The body will be read out if present.


                var body = null;

                if (status !== 204
                /* NoContent */
                ) {
                  // Use XMLHttpRequest.response if set, responseText otherwise.
                  body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;
                } // Normalize another potential bug (this one comes from CORS).


                if (status === 0) {
                  status = !!body ? 200
                  /* Ok */
                  : 0;
                } // ok determines whether the response will be transmitted on the event or
                // error channel. Unsuccessful status codes (not 2xx) will always be errors,
                // but a successful status code can still result in an error if the user
                // asked for JSON data and the body cannot be parsed as such.


                var ok = status >= 200 && status < 300; // Check whether the body needs to be parsed as JSON (in many cases the browser
                // will have done that already).

                if (req.responseType === 'json' && typeof body === 'string') {
                  // Save the original body, before attempting XSSI prefix stripping.
                  var originalBody = body;
                  body = body.replace(XSSI_PREFIX, '');

                  try {
                    // Attempt the parse. If it fails, a parse error should be delivered to the user.
                    body = body !== '' ? JSON.parse(body) : null;
                  } catch (error) {
                    // Since the JSON.parse failed, it's reasonable to assume this might not have been a
                    // JSON response. Restore the original body (including any XSSI prefix) to deliver
                    // a better error response.
                    body = originalBody; // If this was an error request to begin with, leave it as a string, it probably
                    // just isn't JSON. Otherwise, deliver the parsing error to the user.

                    if (ok) {
                      // Even though the response status was 2xx, this is still an error.
                      ok = false; // The parse error contains the text of the body that failed to parse.

                      body = {
                        error: error,
                        text: body
                      };
                    }
                  }
                }

                if (ok) {
                  // A successful response is delivered on the event stream.
                  observer.next(new _HttpResponse({
                    body: body,
                    headers: headers,
                    status: status,
                    statusText: statusText,
                    url: url || undefined
                  })); // The full body has been received and delivered, no further events
                  // are possible. This request is complete.

                  observer.complete();
                } else {
                  // An unsuccessful request is delivered on the error channel.
                  observer.error(new _HttpErrorResponse({
                    // The error in this case is the response body (error from the server).
                    error: body,
                    headers: headers,
                    status: status,
                    statusText: statusText,
                    url: url || undefined
                  }));
                }
              }; // The onError callback is called when something goes wrong at the network level.
              // Connection timeout, DNS error, offline, etc. These are actual errors, and are
              // transmitted on the error channel.


              var onError = function onError(error) {
                var _partialFromXhr2 = partialFromXhr(),
                    url = _partialFromXhr2.url;

                var res = new _HttpErrorResponse({
                  error: error,
                  status: xhr.status || 0,
                  statusText: xhr.statusText || 'Unknown Error',
                  url: url || undefined
                });
                observer.error(res);
              }; // The sentHeaders flag tracks whether the HttpResponseHeaders event
              // has been sent on the stream. This is necessary to track if progress
              // is enabled since the event will be sent on only the first download
              // progerss event.


              var sentHeaders = false; // The download progress event handler, which is only registered if
              // progress events are enabled.

              var onDownProgress = function onDownProgress(event) {
                // Send the HttpResponseHeaders event if it hasn't been sent already.
                if (!sentHeaders) {
                  observer.next(partialFromXhr());
                  sentHeaders = true;
                } // Start building the download progress event to deliver on the response
                // event stream.


                var progressEvent = {
                  type: _HttpEventType.DownloadProgress,
                  loaded: event.loaded
                }; // Set the total number of bytes in the event if it's available.

                if (event.lengthComputable) {
                  progressEvent.total = event.total;
                } // If the request was for text content and a partial response is
                // available on XMLHttpRequest, include it in the progress event
                // to allow for streaming reads.


                if (req.responseType === 'text' && !!xhr.responseText) {
                  progressEvent.partialText = xhr.responseText;
                } // Finally, fire the event.


                observer.next(progressEvent);
              }; // The upload progress event handler, which is only registered if
              // progress events are enabled.


              var onUpProgress = function onUpProgress(event) {
                // Upload progress events are simpler. Begin building the progress
                // event.
                var progress = {
                  type: _HttpEventType.UploadProgress,
                  loaded: event.loaded
                }; // If the total number of bytes being uploaded is available, include
                // it.

                if (event.lengthComputable) {
                  progress.total = event.total;
                } // Send the event.


                observer.next(progress);
              }; // By default, register for load and error events.


              xhr.addEventListener('load', onLoad);
              xhr.addEventListener('error', onError);
              xhr.addEventListener('timeout', onError);
              xhr.addEventListener('abort', onError); // Progress events are only enabled if requested.

              if (req.reportProgress) {
                // Download progress is always enabled if requested.
                xhr.addEventListener('progress', onDownProgress); // Upload progress depends on whether there is a body to upload.

                if (reqBody !== null && xhr.upload) {
                  xhr.upload.addEventListener('progress', onUpProgress);
                }
              } // Fire the request, and notify the event stream that it was fired.


              xhr.send(reqBody);
              observer.next({
                type: _HttpEventType.Sent
              }); // This is the return from the Observable function, which is the
              // request cancellation handler.

              return function () {
                // On a cancellation, remove all registered event listeners.
                xhr.removeEventListener('error', onError);
                xhr.removeEventListener('abort', onError);
                xhr.removeEventListener('load', onLoad);
                xhr.removeEventListener('timeout', onError);

                if (req.reportProgress) {
                  xhr.removeEventListener('progress', onDownProgress);

                  if (reqBody !== null && xhr.upload) {
                    xhr.upload.removeEventListener('progress', onUpProgress);
                  }
                } // Finally, abort the in-flight request.


                if (xhr.readyState !== xhr.DONE) {
                  xhr.abort();
                }
              };
            });
          }
        }]);

        return _HttpXhrBackend;
      }();

      _HttpXhrBackend.ɵfac = function HttpXhrBackend_Factory(t) {
        return new (t || _HttpXhrBackend)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_6__.XhrFactory));
      };

      _HttpXhrBackend.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
        token: _HttpXhrBackend,
        factory: _HttpXhrBackend.ɵfac
      });

      _HttpXhrBackend.ctorParameters = function () {
        return [{
          type: _angular_common__WEBPACK_IMPORTED_MODULE_6__.XhrFactory
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](_HttpXhrBackend, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable
        }], function () {
          return [{
            type: _angular_common__WEBPACK_IMPORTED_MODULE_6__.XhrFactory
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var XSRF_COOKIE_NAME = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.InjectionToken('XSRF_COOKIE_NAME');
      var XSRF_HEADER_NAME = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.InjectionToken('XSRF_HEADER_NAME');
      /**
       * Retrieves the current XSRF token to use with the next outgoing request.
       *
       * @publicApi
       */

      var _HttpXsrfTokenExtractor = /*#__PURE__*/_createClass(function _HttpXsrfTokenExtractor() {
        _classCallCheck(this, _HttpXsrfTokenExtractor);
      });
      /**
       * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.
       */


      var HttpXsrfCookieExtractor = /*#__PURE__*/function () {
        function HttpXsrfCookieExtractor(doc, platform, cookieName) {
          _classCallCheck(this, HttpXsrfCookieExtractor);

          this.doc = doc;
          this.platform = platform;
          this.cookieName = cookieName;
          this.lastCookieString = '';
          this.lastToken = null;
          /**
           * @internal for testing
           */

          this.parseCount = 0;
        }

        _createClass(HttpXsrfCookieExtractor, [{
          key: "getToken",
          value: function getToken() {
            if (this.platform === 'server') {
              return null;
            }

            var cookieString = this.doc.cookie || '';

            if (cookieString !== this.lastCookieString) {
              this.parseCount++;
              this.lastToken = (0, _angular_common__WEBPACK_IMPORTED_MODULE_6__["ɵparseCookieValue"])(cookieString, this.cookieName);
              this.lastCookieString = cookieString;
            }

            return this.lastToken;
          }
        }]);

        return HttpXsrfCookieExtractor;
      }();

      HttpXsrfCookieExtractor.ɵfac = function HttpXsrfCookieExtractor_Factory(t) {
        return new (t || HttpXsrfCookieExtractor)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.PLATFORM_ID), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](XSRF_COOKIE_NAME));
      };

      HttpXsrfCookieExtractor.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
        token: HttpXsrfCookieExtractor,
        factory: HttpXsrfCookieExtractor.ɵfac
      });

      HttpXsrfCookieExtractor.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT]
          }]
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Inject,
            args: [_angular_core__WEBPACK_IMPORTED_MODULE_4__.PLATFORM_ID]
          }]
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Inject,
            args: [XSRF_COOKIE_NAME]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](HttpXsrfCookieExtractor, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT]
            }]
          }, {
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Inject,
              args: [_angular_core__WEBPACK_IMPORTED_MODULE_4__.PLATFORM_ID]
            }]
          }, {
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Inject,
              args: [XSRF_COOKIE_NAME]
            }]
          }];
        }, null);
      })();
      /**
       * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.
       */


      var HttpXsrfInterceptor = /*#__PURE__*/function () {
        function HttpXsrfInterceptor(tokenService, headerName) {
          _classCallCheck(this, HttpXsrfInterceptor);

          this.tokenService = tokenService;
          this.headerName = headerName;
        }

        _createClass(HttpXsrfInterceptor, [{
          key: "intercept",
          value: function intercept(req, next) {
            var lcUrl = req.url.toLowerCase(); // Skip both non-mutating requests and absolute URLs.
            // Non-mutating requests don't require a token, and absolute URLs require special handling
            // anyway as the cookie set
            // on our origin is not the same as the token expected by another origin.

            if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {
              return next.handle(req);
            }

            var token = this.tokenService.getToken(); // Be careful not to overwrite an existing header of the same name.

            if (token !== null && !req.headers.has(this.headerName)) {
              req = req.clone({
                headers: req.headers.set(this.headerName, token)
              });
            }

            return next.handle(req);
          }
        }]);

        return HttpXsrfInterceptor;
      }();

      HttpXsrfInterceptor.ɵfac = function HttpXsrfInterceptor_Factory(t) {
        return new (t || HttpXsrfInterceptor)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](_HttpXsrfTokenExtractor), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](XSRF_HEADER_NAME));
      };

      HttpXsrfInterceptor.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
        token: HttpXsrfInterceptor,
        factory: HttpXsrfInterceptor.ɵfac
      });

      HttpXsrfInterceptor.ctorParameters = function () {
        return [{
          type: _HttpXsrfTokenExtractor
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Inject,
            args: [XSRF_HEADER_NAME]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](HttpXsrfInterceptor, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable
        }], function () {
          return [{
            type: _HttpXsrfTokenExtractor
          }, {
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Inject,
              args: [XSRF_HEADER_NAME]
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * An injectable `HttpHandler` that applies multiple interceptors
       * to a request before passing it to the given `HttpBackend`.
       *
       * The interceptors are loaded lazily from the injector, to allow
       * interceptors to themselves inject classes depending indirectly
       * on `HttpInterceptingHandler` itself.
       * @see `HttpInterceptor`
       */


      var HttpInterceptingHandler = /*#__PURE__*/function () {
        function HttpInterceptingHandler(backend, injector) {
          _classCallCheck(this, HttpInterceptingHandler);

          this.backend = backend;
          this.injector = injector;
          this.chain = null;
        }

        _createClass(HttpInterceptingHandler, [{
          key: "handle",
          value: function handle(req) {
            if (this.chain === null) {
              var interceptors = this.injector.get(_HTTP_INTERCEPTORS, []);
              this.chain = interceptors.reduceRight(function (next, interceptor) {
                return new HttpInterceptorHandler(next, interceptor);
              }, this.backend);
            }

            return this.chain.handle(req);
          }
        }]);

        return HttpInterceptingHandler;
      }();

      HttpInterceptingHandler.ɵfac = function HttpInterceptingHandler_Factory(t) {
        return new (t || HttpInterceptingHandler)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](_HttpBackend), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.Injector));
      };

      HttpInterceptingHandler.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
        token: HttpInterceptingHandler,
        factory: HttpInterceptingHandler.ɵfac
      });

      HttpInterceptingHandler.ctorParameters = function () {
        return [{
          type: _HttpBackend
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Injector
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](HttpInterceptingHandler, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable
        }], function () {
          return [{
            type: _HttpBackend
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Injector
          }];
        }, null);
      })();
      /**
       * Constructs an `HttpHandler` that applies interceptors
       * to a request before passing it to the given `HttpBackend`.
       *
       * Use as a factory function within `HttpClientModule`.
       *
       *
       */


      function interceptingHandler(backend) {
        var interceptors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

        if (!interceptors) {
          return backend;
        }

        return interceptors.reduceRight(function (next, interceptor) {
          return new HttpInterceptorHandler(next, interceptor);
        }, backend);
      }
      /**
       * Factory function that determines where to store JSONP callbacks.
       *
       * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist
       * in test environments. In that case, callbacks are stored on an anonymous object instead.
       *
       *
       */


      function jsonpCallbackContext() {
        if (typeof window === 'object') {
          return window;
        }

        return {};
      }
      /**
       * Configures XSRF protection support for outgoing requests.
       *
       * For a server that supports a cookie-based XSRF protection system,
       * use directly to configure XSRF protection with the correct
       * cookie and header names.
       *
       * If no names are supplied, the default cookie name is `XSRF-TOKEN`
       * and the default header name is `X-XSRF-TOKEN`.
       *
       * @publicApi
       */


      var _HttpClientXsrfModule = /*#__PURE__*/function () {
        function _HttpClientXsrfModule() {
          _classCallCheck(this, _HttpClientXsrfModule);
        }

        _createClass(_HttpClientXsrfModule, null, [{
          key: "disable",
          value:
          /**
           * Disable the default XSRF protection.
           */
          function disable() {
            return {
              ngModule: _HttpClientXsrfModule,
              providers: [{
                provide: HttpXsrfInterceptor,
                useClass: NoopInterceptor
              }]
            };
          }
          /**
           * Configure XSRF protection.
           * @param options An object that can specify either or both
           * cookie name or header name.
           * - Cookie name default is `XSRF-TOKEN`.
           * - Header name default is `X-XSRF-TOKEN`.
           *
           */

        }, {
          key: "withOptions",
          value: function withOptions() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            return {
              ngModule: _HttpClientXsrfModule,
              providers: [options.cookieName ? {
                provide: XSRF_COOKIE_NAME,
                useValue: options.cookieName
              } : [], options.headerName ? {
                provide: XSRF_HEADER_NAME,
                useValue: options.headerName
              } : []]
            };
          }
        }]);

        return _HttpClientXsrfModule;
      }();

      _HttpClientXsrfModule.ɵfac = function HttpClientXsrfModule_Factory(t) {
        return new (t || _HttpClientXsrfModule)();
      };

      _HttpClientXsrfModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineNgModule"]({
        type: _HttpClientXsrfModule
      });
      _HttpClientXsrfModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjector"]({
        providers: [HttpXsrfInterceptor, {
          provide: _HTTP_INTERCEPTORS,
          useExisting: HttpXsrfInterceptor,
          multi: true
        }, {
          provide: _HttpXsrfTokenExtractor,
          useClass: HttpXsrfCookieExtractor
        }, {
          provide: XSRF_COOKIE_NAME,
          useValue: 'XSRF-TOKEN'
        }, {
          provide: XSRF_HEADER_NAME,
          useValue: 'X-XSRF-TOKEN'
        }]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](_HttpClientXsrfModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.NgModule,
          args: [{
            providers: [HttpXsrfInterceptor, {
              provide: _HTTP_INTERCEPTORS,
              useExisting: HttpXsrfInterceptor,
              multi: true
            }, {
              provide: _HttpXsrfTokenExtractor,
              useClass: HttpXsrfCookieExtractor
            }, {
              provide: XSRF_COOKIE_NAME,
              useValue: 'XSRF-TOKEN'
            }, {
              provide: XSRF_HEADER_NAME,
              useValue: 'X-XSRF-TOKEN'
            }]
          }]
        }], null, null);
      })();
      /**
       * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`
       * with supporting services for XSRF. Automatically imported by `HttpClientModule`.
       *
       * You can add interceptors to the chain behind `HttpClient` by binding them to the
       * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.
       *
       * @publicApi
       */


      var _HttpClientModule = /*#__PURE__*/_createClass(function _HttpClientModule() {
        _classCallCheck(this, _HttpClientModule);
      });

      _HttpClientModule.ɵfac = function HttpClientModule_Factory(t) {
        return new (t || _HttpClientModule)();
      };

      _HttpClientModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineNgModule"]({
        type: _HttpClientModule
      });
      _HttpClientModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjector"]({
        providers: [_HttpClient, {
          provide: _HttpHandler,
          useClass: HttpInterceptingHandler
        }, _HttpXhrBackend, {
          provide: _HttpBackend,
          useExisting: _HttpXhrBackend
        }],
        imports: [[_HttpClientXsrfModule.withOptions({
          cookieName: 'XSRF-TOKEN',
          headerName: 'X-XSRF-TOKEN'
        })]]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](_HttpClientModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.NgModule,
          args: [{
            /**
             * Optional configuration for XSRF protection.
             */
            imports: [_HttpClientXsrfModule.withOptions({
              cookieName: 'XSRF-TOKEN',
              headerName: 'X-XSRF-TOKEN'
            })],

            /**
             * Configures the [dependency injector](guide/glossary#injector) where it is imported
             * with supporting services for HTTP communications.
             */
            providers: [_HttpClient, {
              provide: _HttpHandler,
              useClass: HttpInterceptingHandler
            }, _HttpXhrBackend, {
              provide: _HttpBackend,
              useExisting: _HttpXhrBackend
            }]
          }]
        }], null, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵsetNgModuleScope"](_HttpClientModule, {
          imports: [_HttpClientXsrfModule]
        });
      })();
      /**
       * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`
       * with supporting services for JSONP.
       * Without this module, Jsonp requests reach the backend
       * with method JSONP, where they are rejected.
       *
       * You can add interceptors to the chain behind `HttpClient` by binding them to the
       * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.
       *
       * @publicApi
       */


      var _HttpClientJsonpModule = /*#__PURE__*/_createClass(function _HttpClientJsonpModule() {
        _classCallCheck(this, _HttpClientJsonpModule);
      });

      _HttpClientJsonpModule.ɵfac = function HttpClientJsonpModule_Factory(t) {
        return new (t || _HttpClientJsonpModule)();
      };

      _HttpClientJsonpModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineNgModule"]({
        type: _HttpClientJsonpModule
      });
      _HttpClientJsonpModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjector"]({
        providers: [_JsonpClientBackend, {
          provide: JsonpCallbackContext,
          useFactory: jsonpCallbackContext
        }, {
          provide: _HTTP_INTERCEPTORS,
          useClass: _JsonpInterceptor,
          multi: true
        }]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](_HttpClientJsonpModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.NgModule,
          args: [{
            providers: [_JsonpClientBackend, {
              provide: JsonpCallbackContext,
              useFactory: jsonpCallbackContext
            }, {
              provide: _HTTP_INTERCEPTORS,
              useClass: _JsonpInterceptor,
              multi: true
            }]
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A wrapper around the `XMLHttpRequest` constructor.
       *
       * @publicApi
       * @see `XhrFactory`
       * @deprecated
       * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.
       */


      var _XhrFactory = _angular_common__WEBPACK_IMPORTED_MODULE_6__.XhrFactory;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */

      /***/
    },

    /***/
    86261:
    /*!************************************************!*\
      !*** ./node_modules/@pixi/app/dist/esm/app.js ***!
      \************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "Application": function Application() {
          return (
            /* binding */
            _Application
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _pixi_display__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @pixi/display */
      52630);
      /* harmony import */


      var _pixi_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @pixi/core */
      38373);
      /*!
       * @pixi/app - v6.2.0
       * Compiled Mon, 01 Nov 2021 16:52:10 UTC
       *
       * @pixi/app is licensed under the MIT License.
       * http://www.opensource.org/licenses/mit-license
       */

      /**
       * Convenience class to create a new PIXI application.
       *
       * This class automatically creates the renderer, ticker and root container.
       *
       * @example
       * // Create the application
       * const app = new PIXI.Application();
       *
       * // Add the view to the DOM
       * document.body.appendChild(app.view);
       *
       * // ex, add display objects
       * app.stage.addChild(PIXI.Sprite.from('something.png'));
       *
       * @class
       * @memberof PIXI
       */


      var _Application =
      /** @class */
      function () {
        /**
         * @param {object} [options] - The optional renderer parameters.
         * @param {boolean} [options.autoStart=true] - Automatically starts the rendering after the construction.
         *     **Note**: Setting this parameter to false does NOT stop the shared ticker even if you set
         *     options.sharedTicker to true in case that it is already started. Stop it by your own.
         * @param {number} [options.width=800] - The width of the renderers view.
         * @param {number} [options.height=600] - The height of the renderers view.
         * @param {HTMLCanvasElement} [options.view] - The canvas to use as a view, optional.
         * @param {boolean} [options.useContextAlpha=true] - Pass-through value for canvas' context `alpha` property.
         *   If you want to set transparency, please use `backgroundAlpha`. This option is for cases where the
         *   canvas needs to be opaque, possibly for performance reasons on some older devices.
         * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for
         *   resolutions other than 1.
         * @param {boolean} [options.antialias=false] - Sets antialias
         * @param {boolean} [options.preserveDrawingBuffer=false] - Enables drawing buffer preservation, enable this if you
         *  need to call toDataUrl on the WebGL context.
         * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the renderer.
         * @param {boolean} [options.forceCanvas=false] - prevents selection of WebGL renderer, even if such is present, this
         *   option only is available when using **pixi.js-legacy** or **@pixi/canvas-renderer** modules, otherwise
         *   it is ignored.
         * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area
         *  (shown if not transparent).
         * @param {number} [options.backgroundAlpha=1] - Value from 0 (fully transparent) to 1 (fully opaque).
         * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or
         *   not before the new render pass.
         * @param {string} [options.powerPreference] - Parameter passed to webgl context, set to "high-performance"
         *  for devices with dual graphics card. **(WebGL only)**.
         * @param {boolean} [options.sharedTicker=false] - `true` to use PIXI.Ticker.shared, `false` to create new ticker.
         *  If set to false, you cannot register a handler to occur before anything that runs on the shared ticker.
         *  The system ticker will always run before both the shared ticker and the app ticker.
         * @param {boolean} [options.sharedLoader=false] - `true` to use PIXI.Loader.shared, `false` to create new Loader.
         * @param {Window|HTMLElement} [options.resizeTo] - Element to automatically resize stage to.
         */
        function Application(options) {
          var _this = this;
          /**
           * The root display container that's rendered.
           * @member {PIXI.Container}
           */


          this.stage = new _pixi_display__WEBPACK_IMPORTED_MODULE_0__.Container(); // The default options

          options = Object.assign({
            forceCanvas: false
          }, options);
          this.renderer = (0, _pixi_core__WEBPACK_IMPORTED_MODULE_1__.autoDetectRenderer)(options); // install plugins here

          Application._plugins.forEach(function (plugin) {
            plugin.init.call(_this, options);
          });
        }
        /**
         * Register a middleware plugin for the application
         * @static
         * @param {PIXI.IApplicationPlugin} plugin - Plugin being installed
         */


        Application.registerPlugin = function (plugin) {
          Application._plugins.push(plugin);
        };
        /**
         * Render the current stage.
         */


        Application.prototype.render = function () {
          this.renderer.render(this.stage);
        };

        Object.defineProperty(Application.prototype, "view", {
          /**
           * Reference to the renderer's canvas element.
           * @member {HTMLCanvasElement}
           * @readonly
           */
          get: function get() {
            return this.renderer.view;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Application.prototype, "screen", {
          /**
           * Reference to the renderer's screen rectangle. Its safe to use as `filterArea` or `hitArea` for the whole screen.
           * @member {PIXI.Rectangle}
           * @readonly
           */
          get: function get() {
            return this.renderer.screen;
          },
          enumerable: false,
          configurable: true
        });
        /**
         * Destroy and don't use after this.
         * @param {Boolean} [removeView=false] - Automatically remove canvas from DOM.
         * @param {object|boolean} [stageOptions] - Options parameter. A boolean will act as if all options
         *  have been set to that value
         * @param {boolean} [stageOptions.children=false] - if set to true, all the children will have their destroy
         *  method called as well. 'stageOptions' will be passed on to those calls.
         * @param {boolean} [stageOptions.texture=false] - Only used for child Sprites if stageOptions.children is set
         *  to true. Should it destroy the texture of the child sprite
         * @param {boolean} [stageOptions.baseTexture=false] - Only used for child Sprites if stageOptions.children is set
         *  to true. Should it destroy the base texture of the child sprite
         */

        Application.prototype.destroy = function (removeView, stageOptions) {
          var _this = this; // Destroy plugins in the opposite order
          // which they were constructed


          var plugins = Application._plugins.slice(0);

          plugins.reverse();
          plugins.forEach(function (plugin) {
            plugin.destroy.call(_this);
          });
          this.stage.destroy(stageOptions);
          this.stage = null;
          this.renderer.destroy(removeView);
          this.renderer = null;
        };
        /** Collection of installed plugins. */


        Application._plugins = [];
        return Application;
      }();
      /**
       * Middleware for for Application's resize functionality
       * @private
       * @class
       */


      var ResizePlugin =
      /** @class */
      function () {
        function ResizePlugin() {}
        /**
         * Initialize the plugin with scope of application instance
         * @static
         * @private
         * @param {object} [options] - See application options
         */


        ResizePlugin.init = function (options) {
          var _this = this;

          Object.defineProperty(this, 'resizeTo',
          /**
           * The HTML element or window to automatically resize the
           * renderer's view element to match width and height.
           * @member {Window|HTMLElement}
           * @name resizeTo
           * @memberof PIXI.Application#
           */
          {
            set: function set(dom) {
              self.removeEventListener('resize', this.queueResize);
              this._resizeTo = dom;

              if (dom) {
                self.addEventListener('resize', this.queueResize);
                this.resize();
              }
            },
            get: function get() {
              return this._resizeTo;
            }
          });
          /**
           * Resize is throttled, so it's safe to call this multiple times per frame and it'll
           * only be called once.
           *
           * @memberof PIXI.Application#
           * @method queueResize
           * @private
           */

          this.queueResize = function () {
            if (!_this._resizeTo) {
              return;
            }

            _this.cancelResize(); // // Throttle resize events per raf


            _this._resizeId = requestAnimationFrame(function () {
              return _this.resize();
            });
          };
          /**
           * Cancel the resize queue.
           *
           * @memberof PIXI.Application#
           * @method cancelResize
           * @private
           */


          this.cancelResize = function () {
            if (_this._resizeId) {
              cancelAnimationFrame(_this._resizeId);
              _this._resizeId = null;
            }
          };
          /**
           * Execute an immediate resize on the renderer, this is not
           * throttled and can be expensive to call many times in a row.
           * Will resize only if `resizeTo` property is set.
           *
           * @memberof PIXI.Application#
           * @method resize
           */


          this.resize = function () {
            if (!_this._resizeTo) {
              return;
            } // clear queue resize


            _this.cancelResize();

            var width;
            var height; // Resize to the window

            if (_this._resizeTo === self) {
              width = self.innerWidth;
              height = self.innerHeight;
            } // Resize to other HTML entities
            else {
              var _a = _this._resizeTo,
                  clientWidth = _a.clientWidth,
                  clientHeight = _a.clientHeight;
              width = clientWidth;
              height = clientHeight;
            }

            _this.renderer.resize(width, height);
          }; // On resize


          this._resizeId = null;
          this._resizeTo = null;
          this.resizeTo = options.resizeTo || null;
        };
        /**
         * Clean up the ticker, scoped to application
         *
         * @static
         * @private
         */


        ResizePlugin.destroy = function () {
          self.removeEventListener('resize', this.queueResize);
          this.cancelResize();
          this.cancelResize = null;
          this.queueResize = null;
          this.resizeTo = null;
          this.resize = null;
        };

        return ResizePlugin;
      }();

      _Application.registerPlugin(ResizePlugin);
      /***/

    },

    /***/
    29878:
    /*!************************************************************!*\
      !*** ./node_modules/@pixi/constants/dist/esm/constants.js ***!
      \************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "ALPHA_MODES": function ALPHA_MODES() {
          return (
            /* binding */
            _ALPHA_MODES
          );
        },

        /* harmony export */
        "BLEND_MODES": function BLEND_MODES() {
          return (
            /* binding */
            _BLEND_MODES
          );
        },

        /* harmony export */
        "BUFFER_BITS": function BUFFER_BITS() {
          return (
            /* binding */
            _BUFFER_BITS
          );
        },

        /* harmony export */
        "BUFFER_TYPE": function BUFFER_TYPE() {
          return (
            /* binding */
            _BUFFER_TYPE
          );
        },

        /* harmony export */
        "CLEAR_MODES": function CLEAR_MODES() {
          return (
            /* binding */
            _CLEAR_MODES
          );
        },

        /* harmony export */
        "DRAW_MODES": function DRAW_MODES() {
          return (
            /* binding */
            _DRAW_MODES
          );
        },

        /* harmony export */
        "ENV": function ENV() {
          return (
            /* binding */
            _ENV
          );
        },

        /* harmony export */
        "FORMATS": function FORMATS() {
          return (
            /* binding */
            _FORMATS
          );
        },

        /* harmony export */
        "GC_MODES": function GC_MODES() {
          return (
            /* binding */
            _GC_MODES
          );
        },

        /* harmony export */
        "MASK_TYPES": function MASK_TYPES() {
          return (
            /* binding */
            _MASK_TYPES
          );
        },

        /* harmony export */
        "MIPMAP_MODES": function MIPMAP_MODES() {
          return (
            /* binding */
            _MIPMAP_MODES
          );
        },

        /* harmony export */
        "MSAA_QUALITY": function MSAA_QUALITY() {
          return (
            /* binding */
            _MSAA_QUALITY
          );
        },

        /* harmony export */
        "PRECISION": function PRECISION() {
          return (
            /* binding */
            _PRECISION
          );
        },

        /* harmony export */
        "RENDERER_TYPE": function RENDERER_TYPE() {
          return (
            /* binding */
            _RENDERER_TYPE
          );
        },

        /* harmony export */
        "SAMPLER_TYPES": function SAMPLER_TYPES() {
          return (
            /* binding */
            _SAMPLER_TYPES
          );
        },

        /* harmony export */
        "SCALE_MODES": function SCALE_MODES() {
          return (
            /* binding */
            _SCALE_MODES
          );
        },

        /* harmony export */
        "TARGETS": function TARGETS() {
          return (
            /* binding */
            _TARGETS
          );
        },

        /* harmony export */
        "TYPES": function TYPES() {
          return (
            /* binding */
            _TYPES
          );
        },

        /* harmony export */
        "WRAP_MODES": function WRAP_MODES() {
          return (
            /* binding */
            _WRAP_MODES
          );
        }
        /* harmony export */

      });
      /*!
       * @pixi/constants - v6.2.0
       * Compiled Mon, 01 Nov 2021 16:52:10 UTC
       *
       * @pixi/constants is licensed under the MIT License.
       * http://www.opensource.org/licenses/mit-license
       */

      /**
       * Different types of environments for WebGL.
       *
       * @static
       * @memberof PIXI
       * @name ENV
       * @enum {number}
       * @property {number} WEBGL_LEGACY - Used for older v1 WebGL devices. PixiJS will aim to ensure compatibility
       *  with older / less advanced devices. If you experience unexplained flickering prefer this environment.
       * @property {number} WEBGL - Version 1 of WebGL
       * @property {number} WEBGL2 - Version 2 of WebGL
       */


      var _ENV;

      (function (ENV) {
        ENV[ENV["WEBGL_LEGACY"] = 0] = "WEBGL_LEGACY";
        ENV[ENV["WEBGL"] = 1] = "WEBGL";
        ENV[ENV["WEBGL2"] = 2] = "WEBGL2";
      })(_ENV || (_ENV = {}));
      /**
       * Constant to identify the Renderer Type.
       *
       * @static
       * @memberof PIXI
       * @name RENDERER_TYPE
       * @enum {number}
       * @property {number} UNKNOWN - Unknown render type.
       * @property {number} WEBGL - WebGL render type.
       * @property {number} CANVAS - Canvas render type.
       */


      var _RENDERER_TYPE;

      (function (RENDERER_TYPE) {
        RENDERER_TYPE[RENDERER_TYPE["UNKNOWN"] = 0] = "UNKNOWN";
        RENDERER_TYPE[RENDERER_TYPE["WEBGL"] = 1] = "WEBGL";
        RENDERER_TYPE[RENDERER_TYPE["CANVAS"] = 2] = "CANVAS";
      })(_RENDERER_TYPE || (_RENDERER_TYPE = {}));
      /**
       * Bitwise OR of masks that indicate the buffers to be cleared.
       *
       * @static
       * @memberof PIXI
       * @name BUFFER_BITS
       * @enum {number}
       * @property {number} COLOR - Indicates the buffers currently enabled for color writing.
       * @property {number} DEPTH - Indicates the depth buffer.
       * @property {number} STENCIL - Indicates the stencil buffer.
       */


      var _BUFFER_BITS;

      (function (BUFFER_BITS) {
        BUFFER_BITS[BUFFER_BITS["COLOR"] = 16384] = "COLOR";
        BUFFER_BITS[BUFFER_BITS["DEPTH"] = 256] = "DEPTH";
        BUFFER_BITS[BUFFER_BITS["STENCIL"] = 1024] = "STENCIL";
      })(_BUFFER_BITS || (_BUFFER_BITS = {}));
      /**
       * Various blend modes supported by PIXI.
       *
       * IMPORTANT - The WebGL renderer only supports the NORMAL, ADD, MULTIPLY and SCREEN blend modes.
       * Anything else will silently act like NORMAL.
       *
       * @memberof PIXI
       * @name BLEND_MODES
       * @enum {number}
       * @property {number} NORMAL
       * @property {number} ADD
       * @property {number} MULTIPLY
       * @property {number} SCREEN
       * @property {number} OVERLAY
       * @property {number} DARKEN
       * @property {number} LIGHTEN
       * @property {number} COLOR_DODGE
       * @property {number} COLOR_BURN
       * @property {number} HARD_LIGHT
       * @property {number} SOFT_LIGHT
       * @property {number} DIFFERENCE
       * @property {number} EXCLUSION
       * @property {number} HUE
       * @property {number} SATURATION
       * @property {number} COLOR
       * @property {number} LUMINOSITY
       * @property {number} NORMAL_NPM
       * @property {number} ADD_NPM
       * @property {number} SCREEN_NPM
       * @property {number} NONE
       * @property {number} SRC_IN
       * @property {number} SRC_OUT
       * @property {number} SRC_ATOP
       * @property {number} DST_OVER
       * @property {number} DST_IN
       * @property {number} DST_OUT
       * @property {number} DST_ATOP
       * @property {number} SUBTRACT
       * @property {number} SRC_OVER
       * @property {number} ERASE
       * @property {number} XOR
       */


      var _BLEND_MODES;

      (function (BLEND_MODES) {
        BLEND_MODES[BLEND_MODES["NORMAL"] = 0] = "NORMAL";
        BLEND_MODES[BLEND_MODES["ADD"] = 1] = "ADD";
        BLEND_MODES[BLEND_MODES["MULTIPLY"] = 2] = "MULTIPLY";
        BLEND_MODES[BLEND_MODES["SCREEN"] = 3] = "SCREEN";
        BLEND_MODES[BLEND_MODES["OVERLAY"] = 4] = "OVERLAY";
        BLEND_MODES[BLEND_MODES["DARKEN"] = 5] = "DARKEN";
        BLEND_MODES[BLEND_MODES["LIGHTEN"] = 6] = "LIGHTEN";
        BLEND_MODES[BLEND_MODES["COLOR_DODGE"] = 7] = "COLOR_DODGE";
        BLEND_MODES[BLEND_MODES["COLOR_BURN"] = 8] = "COLOR_BURN";
        BLEND_MODES[BLEND_MODES["HARD_LIGHT"] = 9] = "HARD_LIGHT";
        BLEND_MODES[BLEND_MODES["SOFT_LIGHT"] = 10] = "SOFT_LIGHT";
        BLEND_MODES[BLEND_MODES["DIFFERENCE"] = 11] = "DIFFERENCE";
        BLEND_MODES[BLEND_MODES["EXCLUSION"] = 12] = "EXCLUSION";
        BLEND_MODES[BLEND_MODES["HUE"] = 13] = "HUE";
        BLEND_MODES[BLEND_MODES["SATURATION"] = 14] = "SATURATION";
        BLEND_MODES[BLEND_MODES["COLOR"] = 15] = "COLOR";
        BLEND_MODES[BLEND_MODES["LUMINOSITY"] = 16] = "LUMINOSITY";
        BLEND_MODES[BLEND_MODES["NORMAL_NPM"] = 17] = "NORMAL_NPM";
        BLEND_MODES[BLEND_MODES["ADD_NPM"] = 18] = "ADD_NPM";
        BLEND_MODES[BLEND_MODES["SCREEN_NPM"] = 19] = "SCREEN_NPM";
        BLEND_MODES[BLEND_MODES["NONE"] = 20] = "NONE";
        BLEND_MODES[BLEND_MODES["SRC_OVER"] = 0] = "SRC_OVER";
        BLEND_MODES[BLEND_MODES["SRC_IN"] = 21] = "SRC_IN";
        BLEND_MODES[BLEND_MODES["SRC_OUT"] = 22] = "SRC_OUT";
        BLEND_MODES[BLEND_MODES["SRC_ATOP"] = 23] = "SRC_ATOP";
        BLEND_MODES[BLEND_MODES["DST_OVER"] = 24] = "DST_OVER";
        BLEND_MODES[BLEND_MODES["DST_IN"] = 25] = "DST_IN";
        BLEND_MODES[BLEND_MODES["DST_OUT"] = 26] = "DST_OUT";
        BLEND_MODES[BLEND_MODES["DST_ATOP"] = 27] = "DST_ATOP";
        BLEND_MODES[BLEND_MODES["ERASE"] = 26] = "ERASE";
        BLEND_MODES[BLEND_MODES["SUBTRACT"] = 28] = "SUBTRACT";
        BLEND_MODES[BLEND_MODES["XOR"] = 29] = "XOR";
      })(_BLEND_MODES || (_BLEND_MODES = {}));
      /**
       * Various webgl draw modes. These can be used to specify which GL drawMode to use
       * under certain situations and renderers.
       *
       * @memberof PIXI
       * @static
       * @name DRAW_MODES
       * @enum {number}
       * @property {number} POINTS
       * @property {number} LINES
       * @property {number} LINE_LOOP
       * @property {number} LINE_STRIP
       * @property {number} TRIANGLES
       * @property {number} TRIANGLE_STRIP
       * @property {number} TRIANGLE_FAN
       */


      var _DRAW_MODES;

      (function (DRAW_MODES) {
        DRAW_MODES[DRAW_MODES["POINTS"] = 0] = "POINTS";
        DRAW_MODES[DRAW_MODES["LINES"] = 1] = "LINES";
        DRAW_MODES[DRAW_MODES["LINE_LOOP"] = 2] = "LINE_LOOP";
        DRAW_MODES[DRAW_MODES["LINE_STRIP"] = 3] = "LINE_STRIP";
        DRAW_MODES[DRAW_MODES["TRIANGLES"] = 4] = "TRIANGLES";
        DRAW_MODES[DRAW_MODES["TRIANGLE_STRIP"] = 5] = "TRIANGLE_STRIP";
        DRAW_MODES[DRAW_MODES["TRIANGLE_FAN"] = 6] = "TRIANGLE_FAN";
      })(_DRAW_MODES || (_DRAW_MODES = {}));
      /**
       * Various GL texture/resources formats.
       *
       * @memberof PIXI
       * @static
       * @name FORMATS
       * @enum {number}
       * @property {number} RGBA=6408
       * @property {number} RGB=6407
       * @property {number} RG=33319
       * @property {number} RED=6403
       * @property {number} RGBA_INTEGER=36249
       * @property {number} RGB_INTEGER=36248
       * @property {number} RG_INTEGER=33320
       * @property {number} RED_INTEGER=36244
       * @property {number} ALPHA=6406
       * @property {number} LUMINANCE=6409
       * @property {number} LUMINANCE_ALPHA=6410
       * @property {number} DEPTH_COMPONENT=6402
       * @property {number} DEPTH_STENCIL=34041
       */


      var _FORMATS;

      (function (FORMATS) {
        FORMATS[FORMATS["RGBA"] = 6408] = "RGBA";
        FORMATS[FORMATS["RGB"] = 6407] = "RGB";
        FORMATS[FORMATS["RG"] = 33319] = "RG";
        FORMATS[FORMATS["RED"] = 6403] = "RED";
        FORMATS[FORMATS["RGBA_INTEGER"] = 36249] = "RGBA_INTEGER";
        FORMATS[FORMATS["RGB_INTEGER"] = 36248] = "RGB_INTEGER";
        FORMATS[FORMATS["RG_INTEGER"] = 33320] = "RG_INTEGER";
        FORMATS[FORMATS["RED_INTEGER"] = 36244] = "RED_INTEGER";
        FORMATS[FORMATS["ALPHA"] = 6406] = "ALPHA";
        FORMATS[FORMATS["LUMINANCE"] = 6409] = "LUMINANCE";
        FORMATS[FORMATS["LUMINANCE_ALPHA"] = 6410] = "LUMINANCE_ALPHA";
        FORMATS[FORMATS["DEPTH_COMPONENT"] = 6402] = "DEPTH_COMPONENT";
        FORMATS[FORMATS["DEPTH_STENCIL"] = 34041] = "DEPTH_STENCIL";
      })(_FORMATS || (_FORMATS = {}));
      /**
       * Various GL target types.
       *
       * @memberof PIXI
       * @static
       * @name TARGETS
       * @enum {number}
       * @property {number} TEXTURE_2D=3553
       * @property {number} TEXTURE_CUBE_MAP=34067
       * @property {number} TEXTURE_2D_ARRAY=35866
       * @property {number} TEXTURE_CUBE_MAP_POSITIVE_X=34069
       * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_X=34070
       * @property {number} TEXTURE_CUBE_MAP_POSITIVE_Y=34071
       * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_Y=34072
       * @property {number} TEXTURE_CUBE_MAP_POSITIVE_Z=34073
       * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_Z=34074
       */


      var _TARGETS;

      (function (TARGETS) {
        TARGETS[TARGETS["TEXTURE_2D"] = 3553] = "TEXTURE_2D";
        TARGETS[TARGETS["TEXTURE_CUBE_MAP"] = 34067] = "TEXTURE_CUBE_MAP";
        TARGETS[TARGETS["TEXTURE_2D_ARRAY"] = 35866] = "TEXTURE_2D_ARRAY";
        TARGETS[TARGETS["TEXTURE_CUBE_MAP_POSITIVE_X"] = 34069] = "TEXTURE_CUBE_MAP_POSITIVE_X";
        TARGETS[TARGETS["TEXTURE_CUBE_MAP_NEGATIVE_X"] = 34070] = "TEXTURE_CUBE_MAP_NEGATIVE_X";
        TARGETS[TARGETS["TEXTURE_CUBE_MAP_POSITIVE_Y"] = 34071] = "TEXTURE_CUBE_MAP_POSITIVE_Y";
        TARGETS[TARGETS["TEXTURE_CUBE_MAP_NEGATIVE_Y"] = 34072] = "TEXTURE_CUBE_MAP_NEGATIVE_Y";
        TARGETS[TARGETS["TEXTURE_CUBE_MAP_POSITIVE_Z"] = 34073] = "TEXTURE_CUBE_MAP_POSITIVE_Z";
        TARGETS[TARGETS["TEXTURE_CUBE_MAP_NEGATIVE_Z"] = 34074] = "TEXTURE_CUBE_MAP_NEGATIVE_Z";
      })(_TARGETS || (_TARGETS = {}));
      /**
       * Various GL data format types.
       *
       * @memberof PIXI
       * @static
       * @name TYPES
       * @enum {number}
       * @property {number} UNSIGNED_BYTE=5121
       * @property {number} UNSIGNED_SHORT=5123
       * @property {number} UNSIGNED_SHORT_5_6_5=33635
       * @property {number} UNSIGNED_SHORT_4_4_4_4=32819
       * @property {number} UNSIGNED_SHORT_5_5_5_1=32820
       * @property {number} UNSIGNED_INT=5125
       * @property {number} UNSIGNED_INT_10F_11F_11F_REV=35899
       * @property {number} UNSIGNED_INT_2_10_10_10_REV=33640
       * @property {number} UNSIGNED_INT_24_8=34042
       * @property {number} UNSIGNED_INT_5_9_9_9_REV=35902
       * @property {number} BYTE=5120
       * @property {number} SHORT=5122
       * @property {number} INT=5124
       * @property {number} FLOAT=5126
       * @property {number} FLOAT_32_UNSIGNED_INT_24_8_REV=36269
       * @property {number} HALF_FLOAT=36193
       */


      var _TYPES;

      (function (TYPES) {
        TYPES[TYPES["UNSIGNED_BYTE"] = 5121] = "UNSIGNED_BYTE";
        TYPES[TYPES["UNSIGNED_SHORT"] = 5123] = "UNSIGNED_SHORT";
        TYPES[TYPES["UNSIGNED_SHORT_5_6_5"] = 33635] = "UNSIGNED_SHORT_5_6_5";
        TYPES[TYPES["UNSIGNED_SHORT_4_4_4_4"] = 32819] = "UNSIGNED_SHORT_4_4_4_4";
        TYPES[TYPES["UNSIGNED_SHORT_5_5_5_1"] = 32820] = "UNSIGNED_SHORT_5_5_5_1";
        TYPES[TYPES["UNSIGNED_INT"] = 5125] = "UNSIGNED_INT";
        TYPES[TYPES["UNSIGNED_INT_10F_11F_11F_REV"] = 35899] = "UNSIGNED_INT_10F_11F_11F_REV";
        TYPES[TYPES["UNSIGNED_INT_2_10_10_10_REV"] = 33640] = "UNSIGNED_INT_2_10_10_10_REV";
        TYPES[TYPES["UNSIGNED_INT_24_8"] = 34042] = "UNSIGNED_INT_24_8";
        TYPES[TYPES["UNSIGNED_INT_5_9_9_9_REV"] = 35902] = "UNSIGNED_INT_5_9_9_9_REV";
        TYPES[TYPES["BYTE"] = 5120] = "BYTE";
        TYPES[TYPES["SHORT"] = 5122] = "SHORT";
        TYPES[TYPES["INT"] = 5124] = "INT";
        TYPES[TYPES["FLOAT"] = 5126] = "FLOAT";
        TYPES[TYPES["FLOAT_32_UNSIGNED_INT_24_8_REV"] = 36269] = "FLOAT_32_UNSIGNED_INT_24_8_REV";
        TYPES[TYPES["HALF_FLOAT"] = 36193] = "HALF_FLOAT";
      })(_TYPES || (_TYPES = {}));
      /**
       * Various sampler types. Correspond to `sampler`, `isampler`, `usampler` GLSL types respectively.
       * WebGL1 works only with FLOAT.
       *
       * @memberof PIXI
       * @static
       * @name SAMPLER_TYPES
       * @enum {number}
       * @property {number} FLOAT=0
       * @property {number} INT=1
       * @property {number} UINT=2
       */


      var _SAMPLER_TYPES;

      (function (SAMPLER_TYPES) {
        SAMPLER_TYPES[SAMPLER_TYPES["FLOAT"] = 0] = "FLOAT";
        SAMPLER_TYPES[SAMPLER_TYPES["INT"] = 1] = "INT";
        SAMPLER_TYPES[SAMPLER_TYPES["UINT"] = 2] = "UINT";
      })(_SAMPLER_TYPES || (_SAMPLER_TYPES = {}));
      /**
       * The scale modes that are supported by pixi.
       *
       * The {@link PIXI.settings.SCALE_MODE} scale mode affects the default scaling mode of future operations.
       * It can be re-assigned to either LINEAR or NEAREST, depending upon suitability.
       *
       * @memberof PIXI
       * @static
       * @name SCALE_MODES
       * @enum {number}
       * @property {number} LINEAR Smooth scaling
       * @property {number} NEAREST Pixelating scaling
       */


      var _SCALE_MODES;

      (function (SCALE_MODES) {
        SCALE_MODES[SCALE_MODES["NEAREST"] = 0] = "NEAREST";
        SCALE_MODES[SCALE_MODES["LINEAR"] = 1] = "LINEAR";
      })(_SCALE_MODES || (_SCALE_MODES = {}));
      /**
       * The wrap modes that are supported by pixi.
       *
       * The {@link PIXI.settings.WRAP_MODE} wrap mode affects the default wrapping mode of future operations.
       * It can be re-assigned to either CLAMP or REPEAT, depending upon suitability.
       * If the texture is non power of two then clamp will be used regardless as WebGL can
       * only use REPEAT if the texture is po2.
       *
       * This property only affects WebGL.
       *
       * @name WRAP_MODES
       * @memberof PIXI
       * @static
       * @enum {number}
       * @property {number} CLAMP - The textures uvs are clamped
       * @property {number} REPEAT - The texture uvs tile and repeat
       * @property {number} MIRRORED_REPEAT - The texture uvs tile and repeat with mirroring
       */


      var _WRAP_MODES;

      (function (WRAP_MODES) {
        WRAP_MODES[WRAP_MODES["CLAMP"] = 33071] = "CLAMP";
        WRAP_MODES[WRAP_MODES["REPEAT"] = 10497] = "REPEAT";
        WRAP_MODES[WRAP_MODES["MIRRORED_REPEAT"] = 33648] = "MIRRORED_REPEAT";
      })(_WRAP_MODES || (_WRAP_MODES = {}));
      /**
       * Mipmap filtering modes that are supported by pixi.
       *
       * The {@link PIXI.settings.MIPMAP_TEXTURES} affects default texture filtering.
       * Mipmaps are generated for a baseTexture if its `mipmap` field is `ON`,
       * or its `POW2` and texture dimensions are powers of 2.
       * Due to platform restriction, `ON` option will work like `POW2` for webgl-1.
       *
       * This property only affects WebGL.
       *
       * @name MIPMAP_MODES
       * @memberof PIXI
       * @static
       * @enum {number}
       * @property {number} OFF - No mipmaps
       * @property {number} POW2 - Generate mipmaps if texture dimensions are pow2
       * @property {number} ON - Always generate mipmaps
       * @property {number} ON_MANUAL - Use mipmaps, but do not auto-generate them; this is used with a resource
       *   that supports buffering each level-of-detail.
       */


      var _MIPMAP_MODES;

      (function (MIPMAP_MODES) {
        MIPMAP_MODES[MIPMAP_MODES["OFF"] = 0] = "OFF";
        MIPMAP_MODES[MIPMAP_MODES["POW2"] = 1] = "POW2";
        MIPMAP_MODES[MIPMAP_MODES["ON"] = 2] = "ON";
        MIPMAP_MODES[MIPMAP_MODES["ON_MANUAL"] = 3] = "ON_MANUAL";
      })(_MIPMAP_MODES || (_MIPMAP_MODES = {}));
      /**
       * How to treat textures with premultiplied alpha
       *
       * @name ALPHA_MODES
       * @memberof PIXI
       * @static
       * @enum {number}
       * @property {number} NO_PREMULTIPLIED_ALPHA - Source is not premultiplied, leave it like that.
       *  Option for compressed and data textures that are created from typed arrays.
       * @property {number} PREMULTIPLY_ON_UPLOAD - Source is not premultiplied, premultiply on upload.
       *  Default option, used for all loaded images.
       * @property {number} PREMULTIPLIED_ALPHA - Source is already premultiplied
       *  Example: spine atlases with `_pma` suffix.
       * @property {number} NPM - Alias for NO_PREMULTIPLIED_ALPHA.
       * @property {number} UNPACK - Default option, alias for PREMULTIPLY_ON_UPLOAD.
       * @property {number} PMA - Alias for PREMULTIPLIED_ALPHA.
       */


      var _ALPHA_MODES;

      (function (ALPHA_MODES) {
        ALPHA_MODES[ALPHA_MODES["NPM"] = 0] = "NPM";
        ALPHA_MODES[ALPHA_MODES["UNPACK"] = 1] = "UNPACK";
        ALPHA_MODES[ALPHA_MODES["PMA"] = 2] = "PMA";
        ALPHA_MODES[ALPHA_MODES["NO_PREMULTIPLIED_ALPHA"] = 0] = "NO_PREMULTIPLIED_ALPHA";
        ALPHA_MODES[ALPHA_MODES["PREMULTIPLY_ON_UPLOAD"] = 1] = "PREMULTIPLY_ON_UPLOAD";
        ALPHA_MODES[ALPHA_MODES["PREMULTIPLY_ALPHA"] = 2] = "PREMULTIPLY_ALPHA";
        ALPHA_MODES[ALPHA_MODES["PREMULTIPLIED_ALPHA"] = 2] = "PREMULTIPLIED_ALPHA";
      })(_ALPHA_MODES || (_ALPHA_MODES = {}));
      /**
       * Configure whether filter textures are cleared after binding.
       *
       * Filter textures need not be cleared if the filter does not use pixel blending. {@link CLEAR_MODES.BLIT} will detect
       * this and skip clearing as an optimization.
       *
       * @name CLEAR_MODES
       * @memberof PIXI
       * @static
       * @enum {number}
       * @property {number} BLEND - Do not clear the filter texture. The filter's output will blend on top of the output texture.
       * @property {number} CLEAR - Always clear the filter texture.
       * @property {number} BLIT - Clear only if {@link FilterSystem.forceClear} is set or if the filter uses pixel blending.
       * @property {number} NO - Alias for BLEND, same as `false` in earlier versions
       * @property {number} YES - Alias for CLEAR, same as `true` in earlier versions
       * @property {number} AUTO - Alias for BLIT
       */


      var _CLEAR_MODES;

      (function (CLEAR_MODES) {
        CLEAR_MODES[CLEAR_MODES["NO"] = 0] = "NO";
        CLEAR_MODES[CLEAR_MODES["YES"] = 1] = "YES";
        CLEAR_MODES[CLEAR_MODES["AUTO"] = 2] = "AUTO";
        CLEAR_MODES[CLEAR_MODES["BLEND"] = 0] = "BLEND";
        CLEAR_MODES[CLEAR_MODES["CLEAR"] = 1] = "CLEAR";
        CLEAR_MODES[CLEAR_MODES["BLIT"] = 2] = "BLIT";
      })(_CLEAR_MODES || (_CLEAR_MODES = {}));
      /**
       * The gc modes that are supported by pixi.
       *
       * The {@link PIXI.settings.GC_MODE} Garbage Collection mode for PixiJS textures is AUTO
       * If set to GC_MODE, the renderer will occasionally check textures usage. If they are not
       * used for a specified period of time they will be removed from the GPU. They will of course
       * be uploaded again when they are required. This is a silent behind the scenes process that
       * should ensure that the GPU does not  get filled up.
       *
       * Handy for mobile devices!
       * This property only affects WebGL.
       *
       * @name GC_MODES
       * @enum {number}
       * @static
       * @memberof PIXI
       * @property {number} AUTO - Garbage collection will happen periodically automatically
       * @property {number} MANUAL - Garbage collection will need to be called manually
       */


      var _GC_MODES;

      (function (GC_MODES) {
        GC_MODES[GC_MODES["AUTO"] = 0] = "AUTO";
        GC_MODES[GC_MODES["MANUAL"] = 1] = "MANUAL";
      })(_GC_MODES || (_GC_MODES = {}));
      /**
       * Constants that specify float precision in shaders.
       *
       * @name PRECISION
       * @memberof PIXI
       * @constant
       * @static
       * @enum {string}
       * @property {string} LOW='lowp'
       * @property {string} MEDIUM='mediump'
       * @property {string} HIGH='highp'
       */


      var _PRECISION;

      (function (PRECISION) {
        PRECISION["LOW"] = "lowp";
        PRECISION["MEDIUM"] = "mediump";
        PRECISION["HIGH"] = "highp";
      })(_PRECISION || (_PRECISION = {}));
      /**
       * Constants for mask implementations.
       * We use `type` suffix because it leads to very different behaviours
       *
       * @name MASK_TYPES
       * @memberof PIXI
       * @static
       * @enum {number}
       * @property {number} NONE - Mask is ignored
       * @property {number} SCISSOR - Scissor mask, rectangle on screen, cheap
       * @property {number} STENCIL - Stencil mask, 1-bit, medium, works only if renderer supports stencil
       * @property {number} SPRITE - Mask that uses SpriteMaskFilter, uses temporary RenderTexture
       */


      var _MASK_TYPES;

      (function (MASK_TYPES) {
        MASK_TYPES[MASK_TYPES["NONE"] = 0] = "NONE";
        MASK_TYPES[MASK_TYPES["SCISSOR"] = 1] = "SCISSOR";
        MASK_TYPES[MASK_TYPES["STENCIL"] = 2] = "STENCIL";
        MASK_TYPES[MASK_TYPES["SPRITE"] = 3] = "SPRITE";
      })(_MASK_TYPES || (_MASK_TYPES = {}));
      /**
       * Constants for multi-sampling antialiasing.
       *
       * @see PIXI.Framebuffer#multisample
       *
       * @name MSAA_QUALITY
       * @memberof PIXI
       * @static
       * @enum {number}
       * @property {number} NONE - No multisampling for this renderTexture
       * @property {number} LOW - Try 2 samples
       * @property {number} MEDIUM - Try 4 samples
       * @property {number} HIGH - Try 8 samples
       */


      var _MSAA_QUALITY;

      (function (MSAA_QUALITY) {
        MSAA_QUALITY[MSAA_QUALITY["NONE"] = 0] = "NONE";
        MSAA_QUALITY[MSAA_QUALITY["LOW"] = 2] = "LOW";
        MSAA_QUALITY[MSAA_QUALITY["MEDIUM"] = 4] = "MEDIUM";
        MSAA_QUALITY[MSAA_QUALITY["HIGH"] = 8] = "HIGH";
      })(_MSAA_QUALITY || (_MSAA_QUALITY = {}));
      /**
       * Constants for various buffer types in Pixi
       *
       * @see PIXI.BUFFER_TYPE
       *
       * @name BUFFER_TYPE
       * @memberof PIXI
       * @static
       * @enum {number}
       * @property {number} ELEMENT_ARRAY_BUFFER - buffer type for using as an index buffer
       * @property {number} ARRAY_BUFFER - buffer type for using attribute data
       * @property {number} UNIFORM_BUFFER - the buffer type is for uniform buffer objects
       */


      var _BUFFER_TYPE;

      (function (BUFFER_TYPE) {
        BUFFER_TYPE[BUFFER_TYPE["ELEMENT_ARRAY_BUFFER"] = 34963] = "ELEMENT_ARRAY_BUFFER";
        BUFFER_TYPE[BUFFER_TYPE["ARRAY_BUFFER"] = 34962] = "ARRAY_BUFFER"; // NOT YET SUPPORTED

        BUFFER_TYPE[BUFFER_TYPE["UNIFORM_BUFFER"] = 35345] = "UNIFORM_BUFFER";
      })(_BUFFER_TYPE || (_BUFFER_TYPE = {}));
      /***/

    },

    /***/
    38373:
    /*!**************************************************!*\
      !*** ./node_modules/@pixi/core/dist/esm/core.js ***!
      \**************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "AbstractBatchRenderer": function AbstractBatchRenderer() {
          return (
            /* binding */
            _AbstractBatchRenderer
          );
        },

        /* harmony export */
        "AbstractMultiResource": function AbstractMultiResource() {
          return (
            /* binding */
            _AbstractMultiResource
          );
        },

        /* harmony export */
        "AbstractRenderer": function AbstractRenderer() {
          return (
            /* binding */
            _AbstractRenderer
          );
        },

        /* harmony export */
        "ArrayResource": function ArrayResource() {
          return (
            /* binding */
            _ArrayResource
          );
        },

        /* harmony export */
        "Attribute": function Attribute() {
          return (
            /* binding */
            _Attribute
          );
        },

        /* harmony export */
        "BaseImageResource": function BaseImageResource() {
          return (
            /* binding */
            _BaseImageResource
          );
        },

        /* harmony export */
        "BaseRenderTexture": function BaseRenderTexture() {
          return (
            /* binding */
            _BaseRenderTexture
          );
        },

        /* harmony export */
        "BaseTexture": function BaseTexture() {
          return (
            /* binding */
            _BaseTexture
          );
        },

        /* harmony export */
        "BatchDrawCall": function BatchDrawCall() {
          return (
            /* binding */
            _BatchDrawCall
          );
        },

        /* harmony export */
        "BatchGeometry": function BatchGeometry() {
          return (
            /* binding */
            _BatchGeometry
          );
        },

        /* harmony export */
        "BatchPluginFactory": function BatchPluginFactory() {
          return (
            /* binding */
            _BatchPluginFactory
          );
        },

        /* harmony export */
        "BatchRenderer": function BatchRenderer() {
          return (
            /* binding */
            _BatchRenderer
          );
        },

        /* harmony export */
        "BatchShaderGenerator": function BatchShaderGenerator() {
          return (
            /* binding */
            _BatchShaderGenerator
          );
        },

        /* harmony export */
        "BatchSystem": function BatchSystem() {
          return (
            /* binding */
            _BatchSystem
          );
        },

        /* harmony export */
        "BatchTextureArray": function BatchTextureArray() {
          return (
            /* binding */
            _BatchTextureArray
          );
        },

        /* harmony export */
        "Buffer": function Buffer() {
          return (
            /* binding */
            _Buffer
          );
        },

        /* harmony export */
        "BufferResource": function BufferResource() {
          return (
            /* binding */
            _BufferResource
          );
        },

        /* harmony export */
        "CanvasResource": function CanvasResource() {
          return (
            /* binding */
            _CanvasResource
          );
        },

        /* harmony export */
        "ContextSystem": function ContextSystem() {
          return (
            /* binding */
            _ContextSystem
          );
        },

        /* harmony export */
        "CubeResource": function CubeResource() {
          return (
            /* binding */
            _CubeResource
          );
        },

        /* harmony export */
        "Filter": function Filter() {
          return (
            /* binding */
            _Filter
          );
        },

        /* harmony export */
        "FilterState": function FilterState() {
          return (
            /* binding */
            _FilterState
          );
        },

        /* harmony export */
        "FilterSystem": function FilterSystem() {
          return (
            /* binding */
            _FilterSystem
          );
        },

        /* harmony export */
        "Framebuffer": function Framebuffer() {
          return (
            /* binding */
            _Framebuffer
          );
        },

        /* harmony export */
        "FramebufferSystem": function FramebufferSystem() {
          return (
            /* binding */
            _FramebufferSystem
          );
        },

        /* harmony export */
        "GLFramebuffer": function GLFramebuffer() {
          return (
            /* binding */
            _GLFramebuffer
          );
        },

        /* harmony export */
        "GLProgram": function GLProgram() {
          return (
            /* binding */
            _GLProgram
          );
        },

        /* harmony export */
        "GLTexture": function GLTexture() {
          return (
            /* binding */
            _GLTexture
          );
        },

        /* harmony export */
        "Geometry": function Geometry() {
          return (
            /* binding */
            _Geometry
          );
        },

        /* harmony export */
        "GeometrySystem": function GeometrySystem() {
          return (
            /* binding */
            _GeometrySystem
          );
        },

        /* harmony export */
        "IGLUniformData": function IGLUniformData() {
          return (
            /* binding */
            _IGLUniformData
          );
        },

        /* harmony export */
        "INSTALLED": function INSTALLED() {
          return (
            /* binding */
            _INSTALLED
          );
        },

        /* harmony export */
        "ImageBitmapResource": function ImageBitmapResource() {
          return (
            /* binding */
            _ImageBitmapResource
          );
        },

        /* harmony export */
        "ImageResource": function ImageResource() {
          return (
            /* binding */
            _ImageResource
          );
        },

        /* harmony export */
        "MaskData": function MaskData() {
          return (
            /* binding */
            _MaskData
          );
        },

        /* harmony export */
        "MaskSystem": function MaskSystem() {
          return (
            /* binding */
            _MaskSystem
          );
        },

        /* harmony export */
        "ObjectRenderer": function ObjectRenderer() {
          return (
            /* binding */
            _ObjectRenderer
          );
        },

        /* harmony export */
        "Program": function Program() {
          return (
            /* binding */
            _Program
          );
        },

        /* harmony export */
        "ProjectionSystem": function ProjectionSystem() {
          return (
            /* binding */
            _ProjectionSystem
          );
        },

        /* harmony export */
        "Quad": function Quad() {
          return (
            /* binding */
            _Quad
          );
        },

        /* harmony export */
        "QuadUv": function QuadUv() {
          return (
            /* binding */
            _QuadUv
          );
        },

        /* harmony export */
        "RenderTexture": function RenderTexture() {
          return (
            /* binding */
            _RenderTexture
          );
        },

        /* harmony export */
        "RenderTexturePool": function RenderTexturePool() {
          return (
            /* binding */
            _RenderTexturePool
          );
        },

        /* harmony export */
        "RenderTextureSystem": function RenderTextureSystem() {
          return (
            /* binding */
            _RenderTextureSystem
          );
        },

        /* harmony export */
        "Renderer": function Renderer() {
          return (
            /* binding */
            _Renderer
          );
        },

        /* harmony export */
        "Resource": function Resource() {
          return (
            /* binding */
            _Resource
          );
        },

        /* harmony export */
        "SVGResource": function SVGResource() {
          return (
            /* binding */
            _SVGResource
          );
        },

        /* harmony export */
        "ScissorSystem": function ScissorSystem() {
          return (
            /* binding */
            _ScissorSystem
          );
        },

        /* harmony export */
        "Shader": function Shader() {
          return (
            /* binding */
            _Shader
          );
        },

        /* harmony export */
        "ShaderSystem": function ShaderSystem() {
          return (
            /* binding */
            _ShaderSystem
          );
        },

        /* harmony export */
        "SpriteMaskFilter": function SpriteMaskFilter() {
          return (
            /* binding */
            _SpriteMaskFilter
          );
        },

        /* harmony export */
        "State": function State() {
          return (
            /* binding */
            _State
          );
        },

        /* harmony export */
        "StateSystem": function StateSystem() {
          return (
            /* binding */
            _StateSystem
          );
        },

        /* harmony export */
        "StencilSystem": function StencilSystem() {
          return (
            /* binding */
            _StencilSystem
          );
        },

        /* harmony export */
        "System": function System() {
          return (
            /* binding */
            _System
          );
        },

        /* harmony export */
        "Texture": function Texture() {
          return (
            /* binding */
            _Texture
          );
        },

        /* harmony export */
        "TextureGCSystem": function TextureGCSystem() {
          return (
            /* binding */
            _TextureGCSystem
          );
        },

        /* harmony export */
        "TextureMatrix": function TextureMatrix() {
          return (
            /* binding */
            _TextureMatrix
          );
        },

        /* harmony export */
        "TextureSystem": function TextureSystem() {
          return (
            /* binding */
            _TextureSystem
          );
        },

        /* harmony export */
        "TextureUvs": function TextureUvs() {
          return (
            /* binding */
            _TextureUvs
          );
        },

        /* harmony export */
        "UniformGroup": function UniformGroup() {
          return (
            /* binding */
            _UniformGroup
          );
        },

        /* harmony export */
        "VideoResource": function VideoResource() {
          return (
            /* binding */
            _VideoResource
          );
        },

        /* harmony export */
        "ViewableBuffer": function ViewableBuffer() {
          return (
            /* binding */
            _ViewableBuffer
          );
        },

        /* harmony export */
        "autoDetectRenderer": function autoDetectRenderer() {
          return (
            /* binding */
            _autoDetectRenderer
          );
        },

        /* harmony export */
        "autoDetectResource": function autoDetectResource() {
          return (
            /* binding */
            _autoDetectResource
          );
        },

        /* harmony export */
        "checkMaxIfStatementsInShader": function checkMaxIfStatementsInShader() {
          return (
            /* binding */
            _checkMaxIfStatementsInShader
          );
        },

        /* harmony export */
        "createUBOElements": function createUBOElements() {
          return (
            /* binding */
            _createUBOElements
          );
        },

        /* harmony export */
        "defaultFilterVertex": function defaultFilterVertex() {
          return (
            /* binding */
            _defaultFilterVertex
          );
        },

        /* harmony export */
        "defaultVertex": function defaultVertex() {
          return (
            /* binding */
            defaultVertex$2
          );
        },

        /* harmony export */
        "generateProgram": function generateProgram() {
          return (
            /* binding */
            _generateProgram
          );
        },

        /* harmony export */
        "generateUniformBufferSync": function generateUniformBufferSync() {
          return (
            /* binding */
            _generateUniformBufferSync
          );
        },

        /* harmony export */
        "getTestContext": function getTestContext() {
          return (
            /* binding */
            _getTestContext
          );
        },

        /* harmony export */
        "getUBOData": function getUBOData() {
          return (
            /* binding */
            _getUBOData
          );
        },

        /* harmony export */
        "resources": function resources() {
          return (
            /* binding */
            _resources2
          );
        },

        /* harmony export */
        "systems": function systems() {
          return (
            /* binding */
            _systems2
          );
        },

        /* harmony export */
        "uniformParsers": function uniformParsers() {
          return (
            /* binding */
            _uniformParsers
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _pixi_settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @pixi/settings */
      87703);
      /* harmony import */


      var _pixi_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @pixi/constants */
      29878);
      /* harmony import */


      var _pixi_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @pixi/utils */
      47300);
      /* harmony import */


      var _pixi_runner__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @pixi/runner */
      81579);
      /* harmony import */


      var _pixi_ticker__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @pixi/ticker */
      96385);
      /* harmony import */


      var _pixi_math__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @pixi/math */
      67947);
      /*!
       * @pixi/core - v6.2.0
       * Compiled Mon, 01 Nov 2021 16:52:10 UTC
       *
       * @pixi/core is licensed under the MIT License.
       * http://www.opensource.org/licenses/mit-license
       */

      /**
       * The maximum support for using WebGL. If a device does not
       * support WebGL version, for instance WebGL 2, it will still
       * attempt to fallback support to WebGL 1. If you want to
       * explicitly remove feature support to target a more stable
       * baseline, prefer a lower environment.
       *
       * Due to {@link https://bugs.chromium.org/p/chromium/issues/detail?id=934823|bug in chromium}
       * we disable webgl2 by default for all non-apple mobile devices.
       *
       * @static
       * @name PREFER_ENV
       * @memberof PIXI.settings
       * @type {number}
       * @default PIXI.ENV.WEBGL2
       */


      _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.PREFER_ENV = _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.isMobile.any ? _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.ENV.WEBGL : _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.ENV.WEBGL2;
      /**
       * If set to `true`, *only* Textures and BaseTexture objects stored
       * in the caches ({@link PIXI.utils.TextureCache TextureCache} and
       * {@link PIXI.utils.BaseTextureCache BaseTextureCache}) can be
       * used when calling {@link PIXI.Texture.from Texture.from} or
       * {@link PIXI.BaseTexture.from BaseTexture.from}.
       * Otherwise, these `from` calls throw an exception. Using this property
       * can be useful if you want to enforce preloading all assets with
       * {@link PIXI.Loader Loader}.
       *
       * @static
       * @name STRICT_TEXTURE_CACHE
       * @memberof PIXI.settings
       * @type {boolean}
       * @default false
       */

      _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.STRICT_TEXTURE_CACHE = false;
      /**
       * Collection of installed resource types, class must extend {@link PIXI.Resource}.
       * @example
       * class CustomResource extends PIXI.Resource {
       *   // MUST have source, options constructor signature
       *   // for auto-detected resources to be created.
       *   constructor(source, options) {
       *     super();
       *   }
       *   upload(renderer, baseTexture, glTexture) {
       *     // upload with GL
       *     return true;
       *   }
       *   // used to auto-detect resource
       *   static test(source, extension) {
       *     return extension === 'xyz'|| source instanceof SomeClass;
       *   }
       * }
       * // Install the new resource type
       * PIXI.INSTALLED.push(CustomResource);
       *
       * @memberof PIXI
       * @type {Array<PIXI.IResourcePlugin>}
       * @static
       * @readonly
       */

      var _INSTALLED = [];
      /**
       * Create a resource element from a single source element. This
       * auto-detects which type of resource to create. All resources that
       * are auto-detectable must have a static `test` method and a constructor
       * with the arguments `(source, options?)`. Currently, the supported
       * resources for auto-detection include:
       *  - {@link PIXI.ImageResource}
       *  - {@link PIXI.CanvasResource}
       *  - {@link PIXI.VideoResource}
       *  - {@link PIXI.SVGResource}
       *  - {@link PIXI.BufferResource}
       * @static
       * @memberof PIXI
       * @function autoDetectResource
       * @param {string|*} source - Resource source, this can be the URL to the resource,
       *        a typed-array (for BufferResource), HTMLVideoElement, SVG data-uri
       *        or any other resource that can be auto-detected. If not resource is
       *        detected, it's assumed to be an ImageResource.
       * @param {object} [options] - Pass-through options to use for Resource
       * @param {number} [options.width] - Width of BufferResource or SVG rasterization
       * @param {number} [options.height] - Height of BufferResource or SVG rasterization
       * @param {boolean} [options.autoLoad=true] - Image, SVG and Video flag to start loading
       * @param {number} [options.scale=1] - SVG source scale. Overridden by width, height
       * @param {boolean} [options.createBitmap=PIXI.settings.CREATE_IMAGE_BITMAP] - Image option to create Bitmap object
       * @param {boolean} [options.crossorigin=true] - Image and Video option to set crossOrigin
       * @param {boolean} [options.autoPlay=true] - Video option to start playing video immediately
       * @param {number} [options.updateFPS=0] - Video option to update how many times a second the
       *        texture should be updated from the video. Leave at 0 to update at every render
       * @return {PIXI.Resource} The created resource.
       */

      function _autoDetectResource(source, options) {
        if (!source) {
          return null;
        }

        var extension = '';

        if (typeof source === 'string') {
          // search for file extension: period, 3-4 chars, then ?, # or EOL
          var result = /\.(\w{3,4})(?:$|\?|#)/i.exec(source);

          if (result) {
            extension = result[1].toLowerCase();
          }
        }

        for (var i = _INSTALLED.length - 1; i >= 0; --i) {
          var ResourcePlugin = _INSTALLED[i];

          if (ResourcePlugin.test && ResourcePlugin.test(source, extension)) {
            return new ResourcePlugin(source, options);
          }
        }

        throw new Error('Unrecognized source type to auto-detect Resource');
      }
      /*! *****************************************************************************
      Copyright (c) Microsoft Corporation. All rights reserved.
      Licensed under the Apache License, Version 2.0 (the "License"); you may not use
      this file except in compliance with the License. You may obtain a copy of the
      License at http://www.apache.org/licenses/LICENSE-2.0
      
      THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
      KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
      WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
      MERCHANTABLITY OR NON-INFRINGEMENT.
      
      See the Apache Version 2.0 License for specific language governing permissions
      and limitations under the License.
      ***************************************************************************** */

      /* global Reflect, Promise */


      var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function (d, b) {
          d.__proto__ = b;
        } || function (d, b) {
          for (var p in b) {
            if (b.hasOwnProperty(p)) {
              d[p] = b[p];
            }
          }
        };

        return _extendStatics(d, b);
      };

      function __extends(d, b) {
        _extendStatics(d, b);

        function __() {
          this.constructor = d;
        }

        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      }

      var _assign = function __assign() {
        _assign = Object.assign || function __assign(t) {
          var arguments$1 = arguments;

          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments$1[i];

            for (var p in s) {
              if (Object.prototype.hasOwnProperty.call(s, p)) {
                t[p] = s[p];
              }
            }
          }

          return t;
        };

        return _assign.apply(this, arguments);
      };

      function __rest(s, e) {
        var t = {};

        for (var p in s) {
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) {
            t[p] = s[p];
          }
        }

        if (s != null && typeof Object.getOwnPropertySymbols === "function") {
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0) {
              t[p[i]] = s[p[i]];
            }
          }
        }

        return t;
      }
      /**
       * Base resource class for textures that manages validation and uploading, depending on its type.
       *
       * Uploading of a base texture to the GPU is required.
       *
       * @class
       * @memberof PIXI
       */


      var _Resource =
      /** @class */
      function () {
        /**
         * @param {number} [width=0] - Width of the resource
         * @param {number} [height=0] - Height of the resource
         */
        function Resource(width, height) {
          if (width === void 0) {
            width = 0;
          }

          if (height === void 0) {
            height = 0;
          }
          /**
           * Internal width of the resource
           * @member {number}
           * @protected
           */


          this._width = width;
          /**
           * Internal height of the resource
           * @member {number}
           * @protected
           */

          this._height = height;
          /**
           * If resource has been destroyed
           * @member {boolean}
           * @readonly
           * @default false
           */

          this.destroyed = false;
          /**
           * `true` if resource is created by BaseTexture
           * useful for doing cleanup with BaseTexture destroy
           * and not cleaning up resources that were created
           * externally.
           * @member {boolean}
           * @protected
           */

          this.internal = false;
          /**
           * Mini-runner for handling resize events
           * accepts 2 parameters: width, height
           *
           * @member {Runner}
           * @private
           */

          this.onResize = new _pixi_runner__WEBPACK_IMPORTED_MODULE_3__.Runner('setRealSize');
          /**
           * Mini-runner for handling update events
           *
           * @member {Runner}
           * @private
           */

          this.onUpdate = new _pixi_runner__WEBPACK_IMPORTED_MODULE_3__.Runner('update');
          /**
           * Handle internal errors, such as loading errors
           * accepts 1 param: error
           *
           * @member {Runner}
           * @private
           */

          this.onError = new _pixi_runner__WEBPACK_IMPORTED_MODULE_3__.Runner('onError');
        }
        /**
         * Bind to a parent BaseTexture
         *
         * @param {PIXI.BaseTexture} baseTexture - Parent texture
         */


        Resource.prototype.bind = function (baseTexture) {
          this.onResize.add(baseTexture);
          this.onUpdate.add(baseTexture);
          this.onError.add(baseTexture); // Call a resize immediate if we already
          // have the width and height of the resource

          if (this._width || this._height) {
            this.onResize.emit(this._width, this._height);
          }
        };
        /**
         * Unbind to a parent BaseTexture
         *
         * @param {PIXI.BaseTexture} baseTexture - Parent texture
         */


        Resource.prototype.unbind = function (baseTexture) {
          this.onResize.remove(baseTexture);
          this.onUpdate.remove(baseTexture);
          this.onError.remove(baseTexture);
        };
        /**
         * Trigger a resize event
         * @param {number} width - X dimension
         * @param {number} height - Y dimension
         */


        Resource.prototype.resize = function (width, height) {
          if (width !== this._width || height !== this._height) {
            this._width = width;
            this._height = height;
            this.onResize.emit(width, height);
          }
        };

        Object.defineProperty(Resource.prototype, "valid", {
          /**
           * Has been validated
           * @readonly
           * @member {boolean}
           */
          get: function get() {
            return !!this._width && !!this._height;
          },
          enumerable: false,
          configurable: true
        });
        /**
         * Has been updated trigger event
         */

        Resource.prototype.update = function () {
          if (!this.destroyed) {
            this.onUpdate.emit();
          }
        };
        /**
         * This can be overridden to start preloading a resource
         * or do any other prepare step.
         * @protected
         * @return {Promise<void>} Handle the validate event
         */


        Resource.prototype.load = function () {
          return Promise.resolve(this);
        };

        Object.defineProperty(Resource.prototype, "width", {
          /**
           * The width of the resource.
           *
           * @member {number}
           * @readonly
           */
          get: function get() {
            return this._width;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Resource.prototype, "height", {
          /**
           * The height of the resource.
           *
           * @member {number}
           * @readonly
           */
          get: function get() {
            return this._height;
          },
          enumerable: false,
          configurable: true
        });
        /**
         * Set the style, optional to override
         *
         * @param {PIXI.Renderer} renderer - yeah, renderer!
         * @param {PIXI.BaseTexture} baseTexture - the texture
         * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context
         * @returns {boolean} `true` is success
         */

        Resource.prototype.style = function (_renderer, _baseTexture, _glTexture) {
          return false;
        };
        /**
         * Clean up anything, this happens when destroying is ready.
         *
         * @protected
         */


        Resource.prototype.dispose = function () {// override
        };
        /**
         * Call when destroying resource, unbind any BaseTexture object
         * before calling this method, as reference counts are maintained
         * internally.
         */


        Resource.prototype.destroy = function () {
          if (!this.destroyed) {
            this.destroyed = true;
            this.dispose();
            this.onError.removeAll();
            this.onError = null;
            this.onResize.removeAll();
            this.onResize = null;
            this.onUpdate.removeAll();
            this.onUpdate = null;
          }
        };
        /**
         * Abstract, used to auto-detect resource type
         *
         * @static
         * @param {*} source - The source object
         * @param {string} extension - The extension of source, if set
         */


        Resource.test = function (_source, _extension) {
          return false;
        };

        return Resource;
      }();
      /**
       * @interface SharedArrayBuffer
       */

      /**
       * Buffer resource with data of typed array.
       * @class
       * @extends PIXI.Resource
       * @memberof PIXI
       */


      var _BufferResource =
      /** @class */
      function (_super) {
        __extends(BufferResource, _super);
        /**
         * @param {Float32Array|Uint8Array|Uint32Array} source - Source buffer
         * @param {object} options - Options
         * @param {number} options.width - Width of the texture
         * @param {number} options.height - Height of the texture
         */


        function BufferResource(source, options) {
          var _this = this;

          var _a = options || {},
              width = _a.width,
              height = _a.height;

          if (!width || !height) {
            throw new Error('BufferResource width or height invalid');
          }

          _this = _super.call(this, width, height) || this;
          /**
           * Source array
           * Cannot be ClampedUint8Array because it cant be uploaded to WebGL
           *
           * @member {Float32Array|Uint8Array|Uint32Array}
           */

          _this.data = source;
          return _this;
        }
        /**
         * Upload the texture to the GPU.
         * @param {PIXI.Renderer} renderer - Upload to the renderer
         * @param {PIXI.BaseTexture} baseTexture - Reference to parent texture
         * @param {PIXI.GLTexture} glTexture - glTexture
         * @returns {boolean} true is success
         */


        BufferResource.prototype.upload = function (renderer, baseTexture, glTexture) {
          var gl = renderer.gl;
          gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.ALPHA_MODES.UNPACK);
          var width = baseTexture.realWidth;
          var height = baseTexture.realHeight;

          if (glTexture.width === width && glTexture.height === height) {
            gl.texSubImage2D(baseTexture.target, 0, 0, 0, width, height, baseTexture.format, glTexture.type, this.data);
          } else {
            glTexture.width = width;
            glTexture.height = height;
            gl.texImage2D(baseTexture.target, 0, glTexture.internalFormat, width, height, 0, baseTexture.format, glTexture.type, this.data);
          }

          return true;
        };
        /**
         * Destroy and don't use after this
         * @override
         */


        BufferResource.prototype.dispose = function () {
          this.data = null;
        };
        /**
         * Used to auto-detect the type of resource.
         *
         * @static
         * @param {*} source - The source object
         * @return {boolean} `true` if <canvas>
         */


        BufferResource.test = function (source) {
          return source instanceof Float32Array || source instanceof Uint8Array || source instanceof Uint32Array;
        };

        return BufferResource;
      }(_Resource);

      var defaultBufferOptions = {
        scaleMode: _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.SCALE_MODES.NEAREST,
        format: _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGBA,
        alphaMode: _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.ALPHA_MODES.NPM
      };
      /**
       * A Texture stores the information that represents an image.
       * All textures have a base texture, which contains information about the source.
       * Therefore you can have many textures all using a single BaseTexture
       *
       * @class
       * @extends PIXI.utils.EventEmitter
       * @memberof PIXI
       * @typeParam R - The BaseTexture's Resource type.
       * @typeParam RO - The options for constructing resource.
       */

      var _BaseTexture =
      /** @class */
      function (_super) {
        __extends(BaseTexture, _super);
        /**
         * @param {PIXI.Resource|string|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} [resource=null] -
         *        The current resource to use, for things that aren't Resource objects, will be converted
         *        into a Resource.
         * @param {Object} [options] - Collection of options
         * @param {PIXI.MIPMAP_MODES} [options.mipmap=PIXI.settings.MIPMAP_TEXTURES] - If mipmapping is enabled for texture
         * @param {number} [options.anisotropicLevel=PIXI.settings.ANISOTROPIC_LEVEL] - Anisotropic filtering level of texture
         * @param {PIXI.WRAP_MODES} [options.wrapMode=PIXI.settings.WRAP_MODE] - Wrap mode for textures
         * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.settings.SCALE_MODE] - Default scale mode, linear, nearest
         * @param {PIXI.FORMATS} [options.format=PIXI.FORMATS.RGBA] - GL format type
         * @param {PIXI.TYPES} [options.type=PIXI.TYPES.UNSIGNED_BYTE] - GL data type
         * @param {PIXI.TARGETS} [options.target=PIXI.TARGETS.TEXTURE_2D] - GL texture target
         * @param {PIXI.ALPHA_MODES} [options.alphaMode=PIXI.ALPHA_MODES.UNPACK] - Pre multiply the image alpha
         * @param {number} [options.width=0] - Width of the texture
         * @param {number} [options.height=0] - Height of the texture
         * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - Resolution of the base texture
         * @param {object} [options.resourceOptions] - Optional resource options,
         *        see {@link PIXI.autoDetectResource autoDetectResource}
         */


        function BaseTexture(resource, options) {
          if (resource === void 0) {
            resource = null;
          }

          if (options === void 0) {
            options = null;
          }

          var _this = _super.call(this) || this;

          options = options || {};
          var alphaMode = options.alphaMode,
              mipmap = options.mipmap,
              anisotropicLevel = options.anisotropicLevel,
              scaleMode = options.scaleMode,
              width = options.width,
              height = options.height,
              wrapMode = options.wrapMode,
              format = options.format,
              type = options.type,
              target = options.target,
              resolution = options.resolution,
              resourceOptions = options.resourceOptions; // Convert the resource to a Resource object

          if (resource && !(resource instanceof _Resource)) {
            resource = _autoDetectResource(resource, resourceOptions);
            resource.internal = true;
          }

          _this.resolution = resolution || _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.RESOLUTION;
          _this.width = Math.round((width || 0) * _this.resolution) / _this.resolution;
          _this.height = Math.round((height || 0) * _this.resolution) / _this.resolution;
          _this._mipmap = mipmap !== undefined ? mipmap : _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.MIPMAP_TEXTURES;
          _this.anisotropicLevel = anisotropicLevel !== undefined ? anisotropicLevel : _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.ANISOTROPIC_LEVEL;
          _this._wrapMode = wrapMode || _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.WRAP_MODE;
          _this._scaleMode = scaleMode !== undefined ? scaleMode : _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.SCALE_MODE;
          _this.format = format || _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGBA;
          _this.type = type || _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.UNSIGNED_BYTE;
          _this.target = target || _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TARGETS.TEXTURE_2D;
          _this.alphaMode = alphaMode !== undefined ? alphaMode : _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.ALPHA_MODES.UNPACK;
          _this.uid = (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.uid)();
          _this.touched = 0;
          _this.isPowerOfTwo = false;

          _this._refreshPOT();

          _this._glTextures = {};
          _this.dirtyId = 0;
          _this.dirtyStyleId = 0;
          _this.cacheId = null;
          _this.valid = width > 0 && height > 0;
          _this.textureCacheIds = [];
          _this.destroyed = false;
          _this.resource = null;
          _this._batchEnabled = 0;
          _this._batchLocation = 0;
          _this.parentTextureArray = null;
          /**
           * Fired when a not-immediately-available source finishes loading.
           *
           * @protected
           * @event PIXI.BaseTexture#loaded
           * @param {PIXI.BaseTexture} baseTexture - Resource loaded.
           */

          /**
           * Fired when a not-immediately-available source fails to load.
           *
           * @protected
           * @event PIXI.BaseTexture#error
           * @param {PIXI.BaseTexture} baseTexture - Resource errored.
           * @param {ErrorEvent} event - Load error event.
           */

          /**
           * Fired when BaseTexture is updated.
           *
           * @protected
           * @event PIXI.BaseTexture#loaded
           * @param {PIXI.BaseTexture} baseTexture - Resource loaded.
           */

          /**
           * Fired when BaseTexture is updated.
           *
           * @protected
           * @event PIXI.BaseTexture#update
           * @param {PIXI.BaseTexture} baseTexture - Instance of texture being updated.
           */

          /**
           * Fired when BaseTexture is destroyed.
           *
           * @protected
           * @event PIXI.BaseTexture#dispose
           * @param {PIXI.BaseTexture} baseTexture - Instance of texture being destroyed.
           */
          // Set the resource

          _this.setResource(resource);

          return _this;
        }

        Object.defineProperty(BaseTexture.prototype, "realWidth", {
          /**
           * Pixel width of the source of this texture
           *
           * @readonly
           * @member {number}
           */
          get: function get() {
            return Math.round(this.width * this.resolution);
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BaseTexture.prototype, "realHeight", {
          /**
           * Pixel height of the source of this texture
           *
           * @readonly
           * @member {number}
           */
          get: function get() {
            return Math.round(this.height * this.resolution);
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BaseTexture.prototype, "mipmap", {
          /**
           * Mipmap mode of the texture, affects downscaled images
           *
           * @member {PIXI.MIPMAP_MODES}
           * @default PIXI.settings.MIPMAP_TEXTURES
           */
          get: function get() {
            return this._mipmap;
          },
          set: function set(value) {
            if (this._mipmap !== value) {
              this._mipmap = value;
              this.dirtyStyleId++;
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BaseTexture.prototype, "scaleMode", {
          /**
           * The scale mode to apply when scaling this texture
           *
           * @member {PIXI.SCALE_MODES}
           * @default PIXI.settings.SCALE_MODE
           */
          get: function get() {
            return this._scaleMode;
          },
          set: function set(value) {
            if (this._scaleMode !== value) {
              this._scaleMode = value;
              this.dirtyStyleId++;
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BaseTexture.prototype, "wrapMode", {
          /**
           * How the texture wraps
           * @member {PIXI.WRAP_MODES}
           * @default PIXI.settings.WRAP_MODE
           */
          get: function get() {
            return this._wrapMode;
          },
          set: function set(value) {
            if (this._wrapMode !== value) {
              this._wrapMode = value;
              this.dirtyStyleId++;
            }
          },
          enumerable: false,
          configurable: true
        });
        /**
         * Changes style options of BaseTexture
         *
         * @param {PIXI.SCALE_MODES} [scaleMode] - Pixi scalemode
         * @param {PIXI.MIPMAP_MODES} [mipmap] - enable mipmaps
         * @returns {PIXI.BaseTexture} this
         */

        BaseTexture.prototype.setStyle = function (scaleMode, mipmap) {
          var dirty;

          if (scaleMode !== undefined && scaleMode !== this.scaleMode) {
            this.scaleMode = scaleMode;
            dirty = true;
          }

          if (mipmap !== undefined && mipmap !== this.mipmap) {
            this.mipmap = mipmap;
            dirty = true;
          }

          if (dirty) {
            this.dirtyStyleId++;
          }

          return this;
        };
        /**
         * Changes w/h/resolution. Texture becomes valid if width and height are greater than zero.
         *
         * @param {number} desiredWidth - Desired visual width
         * @param {number} desiredHeight - Desired visual height
         * @param {number} [resolution] - Optionally set resolution
         * @returns {PIXI.BaseTexture} this
         */


        BaseTexture.prototype.setSize = function (desiredWidth, desiredHeight, resolution) {
          resolution = resolution || this.resolution;
          return this.setRealSize(desiredWidth * resolution, desiredHeight * resolution, resolution);
        };
        /**
         * Sets real size of baseTexture, preserves current resolution.
         *
         * @param {number} realWidth - Full rendered width
         * @param {number} realHeight - Full rendered height
         * @param {number} [resolution] - Optionally set resolution
         * @returns {PIXI.BaseTexture} this
         */


        BaseTexture.prototype.setRealSize = function (realWidth, realHeight, resolution) {
          this.resolution = resolution || this.resolution;
          this.width = Math.round(realWidth) / this.resolution;
          this.height = Math.round(realHeight) / this.resolution;

          this._refreshPOT();

          this.update();
          return this;
        };
        /**
         * Refresh check for isPowerOfTwo texture based on size
         *
         * @private
         */


        BaseTexture.prototype._refreshPOT = function () {
          this.isPowerOfTwo = (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.isPow2)(this.realWidth) && (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.isPow2)(this.realHeight);
        };
        /**
         * Changes resolution
         *
         * @param {number} resolution - res
         * @returns {PIXI.BaseTexture} this
         */


        BaseTexture.prototype.setResolution = function (resolution) {
          var oldResolution = this.resolution;

          if (oldResolution === resolution) {
            return this;
          }

          this.resolution = resolution;

          if (this.valid) {
            this.width = Math.round(this.width * oldResolution) / resolution;
            this.height = Math.round(this.height * oldResolution) / resolution;
            this.emit('update', this);
          }

          this._refreshPOT();

          return this;
        };
        /**
         * Sets the resource if it wasn't set. Throws error if resource already present
         *
         * @param {PIXI.Resource} resource - that is managing this BaseTexture
         * @returns {PIXI.BaseTexture} this
         */


        BaseTexture.prototype.setResource = function (resource) {
          if (this.resource === resource) {
            return this;
          }

          if (this.resource) {
            throw new Error('Resource can be set only once');
          }

          resource.bind(this);
          this.resource = resource;
          return this;
        };
        /**
         * Invalidates the object. Texture becomes valid if width and height are greater than zero.
         */


        BaseTexture.prototype.update = function () {
          if (!this.valid) {
            if (this.width > 0 && this.height > 0) {
              this.valid = true;
              this.emit('loaded', this);
              this.emit('update', this);
            }
          } else {
            this.dirtyId++;
            this.dirtyStyleId++;
            this.emit('update', this);
          }
        };
        /**
         * Handle errors with resources.
         * @private
         * @param {ErrorEvent} event - Error event emitted.
         */


        BaseTexture.prototype.onError = function (event) {
          this.emit('error', this, event);
        };
        /**
         * Destroys this base texture.
         * The method stops if resource doesn't want this texture to be destroyed.
         * Removes texture from all caches.
         */


        BaseTexture.prototype.destroy = function () {
          // remove and destroy the resource
          if (this.resource) {
            this.resource.unbind(this); // only destroy resourced created internally

            if (this.resource.internal) {
              this.resource.destroy();
            }

            this.resource = null;
          }

          if (this.cacheId) {
            delete _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.BaseTextureCache[this.cacheId];
            delete _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.TextureCache[this.cacheId];
            this.cacheId = null;
          } // finally let the WebGL renderer know..


          this.dispose();
          BaseTexture.removeFromCache(this);
          this.textureCacheIds = null;
          this.destroyed = true;
        };
        /**
         * Frees the texture from WebGL memory without destroying this texture object.
         * This means you can still use the texture later which will upload it to GPU
         * memory again.
         *
         * @fires PIXI.BaseTexture#dispose
         */


        BaseTexture.prototype.dispose = function () {
          this.emit('dispose', this);
        };
        /**
         * Utility function for BaseTexture|Texture cast
         */


        BaseTexture.prototype.castToBaseTexture = function () {
          return this;
        };
        /**
         * Helper function that creates a base texture based on the source you provide.
         * The source can be - image url, image element, canvas element. If the
         * source is an image url or an image element and not in the base texture
         * cache, it will be created and loaded.
         *
         * @static
         * @param {string|HTMLImageElement|HTMLCanvasElement|SVGElement|HTMLVideoElement} source - The
         *        source to create base texture from.
         * @param {object} [options] - See {@link PIXI.BaseTexture}'s constructor for options.
         * @param {string} [options.pixiIdPrefix=pixiid] - If a source has no id, this is the prefix of the generated id
         * @param {boolean} [strict] - Enforce strict-mode, see {@link PIXI.settings.STRICT_TEXTURE_CACHE}.
         * @returns {PIXI.BaseTexture} The new base texture.
         */


        BaseTexture.from = function (source, options, strict) {
          if (strict === void 0) {
            strict = _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.STRICT_TEXTURE_CACHE;
          }

          var isFrame = typeof source === 'string';
          var cacheId = null;

          if (isFrame) {
            cacheId = source;
          } else {
            if (!source._pixiId) {
              var prefix = options && options.pixiIdPrefix || 'pixiid';
              source._pixiId = prefix + "_" + (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.uid)();
            }

            cacheId = source._pixiId;
          }

          var baseTexture = _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.BaseTextureCache[cacheId]; // Strict-mode rejects invalid cacheIds

          if (isFrame && strict && !baseTexture) {
            throw new Error("The cacheId \"" + cacheId + "\" does not exist in BaseTextureCache.");
          }

          if (!baseTexture) {
            baseTexture = new BaseTexture(source, options);
            baseTexture.cacheId = cacheId;
            BaseTexture.addToCache(baseTexture, cacheId);
          }

          return baseTexture;
        };
        /**
         * Create a new BaseTexture with a BufferResource from a Float32Array.
         * RGBA values are floats from 0 to 1.
         * @static
         * @param {Float32Array|Uint8Array} buffer - The optional array to use, if no data
         *        is provided, a new Float32Array is created.
         * @param {number} width - Width of the resource
         * @param {number} height - Height of the resource
         * @param {object} [options] - See {@link PIXI.BaseTexture}'s constructor for options.
         * @return {PIXI.BaseTexture} The resulting new BaseTexture
         */


        BaseTexture.fromBuffer = function (buffer, width, height, options) {
          buffer = buffer || new Float32Array(width * height * 4);
          var resource = new _BufferResource(buffer, {
            width: width,
            height: height
          });
          var type = buffer instanceof Float32Array ? _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.FLOAT : _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.UNSIGNED_BYTE;
          return new BaseTexture(resource, Object.assign(defaultBufferOptions, options || {
            width: width,
            height: height,
            type: type
          }));
        };
        /**
         * Adds a BaseTexture to the global BaseTextureCache. This cache is shared across the whole PIXI object.
         *
         * @static
         * @param {PIXI.BaseTexture} baseTexture - The BaseTexture to add to the cache.
         * @param {string} id - The id that the BaseTexture will be stored against.
         */


        BaseTexture.addToCache = function (baseTexture, id) {
          if (id) {
            if (baseTexture.textureCacheIds.indexOf(id) === -1) {
              baseTexture.textureCacheIds.push(id);
            }

            if (_pixi_utils__WEBPACK_IMPORTED_MODULE_2__.BaseTextureCache[id]) {
              // eslint-disable-next-line no-console
              console.warn("BaseTexture added to the cache with an id [" + id + "] that already had an entry");
            }

            _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.BaseTextureCache[id] = baseTexture;
          }
        };
        /**
         * Remove a BaseTexture from the global BaseTextureCache.
         *
         * @static
         * @param {string|PIXI.BaseTexture} baseTexture - id of a BaseTexture to be removed, or a BaseTexture instance itself.
         * @return {PIXI.BaseTexture|null} The BaseTexture that was removed.
         */


        BaseTexture.removeFromCache = function (baseTexture) {
          if (typeof baseTexture === 'string') {
            var baseTextureFromCache = _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.BaseTextureCache[baseTexture];

            if (baseTextureFromCache) {
              var index = baseTextureFromCache.textureCacheIds.indexOf(baseTexture);

              if (index > -1) {
                baseTextureFromCache.textureCacheIds.splice(index, 1);
              }

              delete _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.BaseTextureCache[baseTexture];
              return baseTextureFromCache;
            }
          } else if (baseTexture && baseTexture.textureCacheIds) {
            for (var i = 0; i < baseTexture.textureCacheIds.length; ++i) {
              delete _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.BaseTextureCache[baseTexture.textureCacheIds[i]];
            }

            baseTexture.textureCacheIds.length = 0;
            return baseTexture;
          }

          return null;
        };
        /**
         * Global number of the texture batch, used by multi-texture renderers
         *
         * @static
         * @member {number}
         */


        BaseTexture._globalBatch = 0;
        return BaseTexture;
      }(_pixi_utils__WEBPACK_IMPORTED_MODULE_2__.EventEmitter);
      /**
       * Resource that can manage several resource (items) inside.
       * All resources need to have the same pixel size.
       * Parent class for CubeResource and ArrayResource
       *
       * @class
       * @extends PIXI.Resource
       * @memberof PIXI
       */


      var _AbstractMultiResource =
      /** @class */
      function (_super) {
        __extends(AbstractMultiResource, _super);
        /**
         * @param {number} length
         * @param {object} [options] - Options to for Resource constructor
         * @param {number} [options.width] - Width of the resource
         * @param {number} [options.height] - Height of the resource
         */


        function AbstractMultiResource(length, options) {
          var _this = this;

          var _a = options || {},
              width = _a.width,
              height = _a.height;

          _this = _super.call(this, width, height) || this;
          /**
           * Collection of partial baseTextures that correspond to resources
           * @member {Array<PIXI.BaseTexture>}
           * @readonly
           */

          _this.items = [];
          /**
           * Dirty IDs for each part
           * @member {Array<number>}
           * @readonly
           */

          _this.itemDirtyIds = [];

          for (var i = 0; i < length; i++) {
            var partTexture = new _BaseTexture();

            _this.items.push(partTexture); // -2 - first run of texture array upload
            // -1 - texture item was allocated
            // >=0 - texture item uploaded , in sync with items[i].dirtyId


            _this.itemDirtyIds.push(-2);
          }
          /**
           * Number of elements in array
           *
           * @member {number}
           * @readonly
           */


          _this.length = length;
          /**
           * Promise when loading
           * @member {Promise}
           * @private
           * @default null
           */

          _this._load = null;
          /**
           * Bound baseTexture, there can only be one
           * @member {PIXI.BaseTexture}
           */

          _this.baseTexture = null;
          return _this;
        }
        /**
         * used from ArrayResource and CubeResource constructors
         * @param {Array<*>} resources - Can be resources, image elements, canvas, etc. ,
         *  length should be same as constructor length
         * @param {object} [options] - detect options for resources
         * @protected
         */


        AbstractMultiResource.prototype.initFromArray = function (resources, options) {
          for (var i = 0; i < this.length; i++) {
            if (!resources[i]) {
              continue;
            }

            if (resources[i].castToBaseTexture) {
              this.addBaseTextureAt(resources[i].castToBaseTexture(), i);
            } else if (resources[i] instanceof _Resource) {
              this.addResourceAt(resources[i], i);
            } else {
              this.addResourceAt(_autoDetectResource(resources[i], options), i);
            }
          }
        };
        /**
         * Destroy this BaseImageResource
         * @override
         */


        AbstractMultiResource.prototype.dispose = function () {
          for (var i = 0, len = this.length; i < len; i++) {
            this.items[i].destroy();
          }

          this.items = null;
          this.itemDirtyIds = null;
          this._load = null;
        };
        /**
         * Set a resource by ID
         *
         * @param {PIXI.Resource} resource
         * @param {number} index - Zero-based index of resource to set
         * @return {PIXI.ArrayResource} Instance for chaining
         */


        AbstractMultiResource.prototype.addResourceAt = function (resource, index) {
          if (!this.items[index]) {
            throw new Error("Index " + index + " is out of bounds");
          } // Inherit the first resource dimensions


          if (resource.valid && !this.valid) {
            this.resize(resource.width, resource.height);
          }

          this.items[index].setResource(resource);
          return this;
        };
        /**
         * Set the parent base texture
         * @member {PIXI.BaseTexture}
         * @override
         */


        AbstractMultiResource.prototype.bind = function (baseTexture) {
          if (this.baseTexture !== null) {
            throw new Error('Only one base texture per TextureArray is allowed');
          }

          _super.prototype.bind.call(this, baseTexture);

          for (var i = 0; i < this.length; i++) {
            this.items[i].parentTextureArray = baseTexture;
            this.items[i].on('update', baseTexture.update, baseTexture);
          }
        };
        /**
         * Unset the parent base texture
         * @member {PIXI.BaseTexture}
         * @override
         */


        AbstractMultiResource.prototype.unbind = function (baseTexture) {
          _super.prototype.unbind.call(this, baseTexture);

          for (var i = 0; i < this.length; i++) {
            this.items[i].parentTextureArray = null;
            this.items[i].off('update', baseTexture.update, baseTexture);
          }
        };
        /**
         * Load all the resources simultaneously
         * @override
         * @return {Promise<void>} When load is resolved
         */


        AbstractMultiResource.prototype.load = function () {
          var _this = this;

          if (this._load) {
            return this._load;
          }

          var resources = this.items.map(function (item) {
            return item.resource;
          }).filter(function (item) {
            return item;
          }); // TODO: also implement load part-by-part strategy

          var promises = resources.map(function (item) {
            return item.load();
          });
          this._load = Promise.all(promises).then(function () {
            var _a = _this.items[0],
                realWidth = _a.realWidth,
                realHeight = _a.realHeight;

            _this.resize(realWidth, realHeight);

            return Promise.resolve(_this);
          });
          return this._load;
        };

        return AbstractMultiResource;
      }(_Resource);
      /**
       * A resource that contains a number of sources.
       *
       * @class
       * @extends PIXI.Resource
       * @memberof PIXI
       */


      var _ArrayResource =
      /** @class */
      function (_super) {
        __extends(ArrayResource, _super);
        /**
         * @param {number|Array<*>} source - Number of items in array or the collection
         *        of image URLs to use. Can also be resources, image elements, canvas, etc.
         * @param {object} [options] - Options to apply to {@link PIXI.autoDetectResource}
         * @param {number} [options.width] - Width of the resource
         * @param {number} [options.height] - Height of the resource
         */


        function ArrayResource(source, options) {
          var _this = this;

          var _a = options || {},
              width = _a.width,
              height = _a.height;

          var urls;
          var length;

          if (Array.isArray(source)) {
            urls = source;
            length = source.length;
          } else {
            length = source;
          }

          _this = _super.call(this, length, {
            width: width,
            height: height
          }) || this;

          if (urls) {
            _this.initFromArray(urls, options);
          }

          return _this;
        }
        /**
         * Set a baseTexture by ID,
         * ArrayResource just takes resource from it, nothing more
         *
         * @param {PIXI.BaseTexture} baseTexture
         * @param {number} index - Zero-based index of resource to set
         * @return {PIXI.ArrayResource} Instance for chaining
         */


        ArrayResource.prototype.addBaseTextureAt = function (baseTexture, index) {
          if (baseTexture.resource) {
            this.addResourceAt(baseTexture.resource, index);
          } else {
            throw new Error('ArrayResource does not support RenderTexture');
          }

          return this;
        };
        /**
         * Add binding
         * @member {PIXI.BaseTexture}
         * @override
         */


        ArrayResource.prototype.bind = function (baseTexture) {
          _super.prototype.bind.call(this, baseTexture);

          baseTexture.target = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TARGETS.TEXTURE_2D_ARRAY;
        };
        /**
         * Upload the resources to the GPU.
         * @param {PIXI.Renderer} renderer
         * @param {PIXI.BaseTexture} texture
         * @param {PIXI.GLTexture} glTexture
         * @returns {boolean} whether texture was uploaded
         */


        ArrayResource.prototype.upload = function (renderer, texture, glTexture) {
          var _a = this,
              length = _a.length,
              itemDirtyIds = _a.itemDirtyIds,
              items = _a.items;

          var gl = renderer.gl;

          if (glTexture.dirtyId < 0) {
            gl.texImage3D(gl.TEXTURE_2D_ARRAY, 0, glTexture.internalFormat, this._width, this._height, length, 0, texture.format, glTexture.type, null);
          }

          for (var i = 0; i < length; i++) {
            var item = items[i];

            if (itemDirtyIds[i] < item.dirtyId) {
              itemDirtyIds[i] = item.dirtyId;

              if (item.valid) {
                gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, // xoffset
                0, // yoffset
                i, // zoffset
                item.resource.width, item.resource.height, 1, texture.format, glTexture.type, item.resource.source);
              }
            }
          }

          return true;
        };

        return ArrayResource;
      }(_AbstractMultiResource);
      /**
       * Base for all the image/canvas resources
       * @class
       * @extends PIXI.Resource
       * @memberof PIXI
       */


      var _BaseImageResource =
      /** @class */
      function (_super) {
        __extends(BaseImageResource, _super);
        /**
         * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} source
         */


        function BaseImageResource(source) {
          var _this = this;

          var sourceAny = source;
          var width = sourceAny.naturalWidth || sourceAny.videoWidth || sourceAny.width;
          var height = sourceAny.naturalHeight || sourceAny.videoHeight || sourceAny.height;
          _this = _super.call(this, width, height) || this;
          /**
           * The source element
           * @member {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement}
           * @readonly
           */

          _this.source = source;
          /**
           * If set to `true`, will force `texImage2D` over `texSubImage2D` for uploading.
           * Certain types of media (e.g. video) using `texImage2D` is more performant.
           * @member {boolean}
           * @default false
           * @private
           */

          _this.noSubImage = false;
          return _this;
        }
        /**
         * Set cross origin based detecting the url and the crossorigin
         * @protected
         * @param {HTMLElement} element - Element to apply crossOrigin
         * @param {string} url - URL to check
         * @param {boolean|string} [crossorigin=true] - Cross origin value to use
         */


        BaseImageResource.crossOrigin = function (element, url, crossorigin) {
          if (crossorigin === undefined && url.indexOf('data:') !== 0) {
            element.crossOrigin = (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.determineCrossOrigin)(url);
          } else if (crossorigin !== false) {
            element.crossOrigin = typeof crossorigin === 'string' ? crossorigin : 'anonymous';
          }
        };
        /**
         * Upload the texture to the GPU.
         * @param {PIXI.Renderer} renderer - Upload to the renderer
         * @param {PIXI.BaseTexture} baseTexture - Reference to parent texture
         * @param {PIXI.GLTexture} glTexture
         * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} [source] - (optional)
         * @returns {boolean} true is success
         */


        BaseImageResource.prototype.upload = function (renderer, baseTexture, glTexture, source) {
          var gl = renderer.gl;
          var width = baseTexture.realWidth;
          var height = baseTexture.realHeight;
          source = source || this.source;
          gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.ALPHA_MODES.UNPACK);

          if (!this.noSubImage && baseTexture.target === gl.TEXTURE_2D && glTexture.width === width && glTexture.height === height) {
            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, baseTexture.format, glTexture.type, source);
          } else {
            glTexture.width = width;
            glTexture.height = height;
            gl.texImage2D(baseTexture.target, 0, glTexture.internalFormat, baseTexture.format, glTexture.type, source);
          }

          return true;
        };
        /**
         * Checks if source width/height was changed, resize can cause extra baseTexture update.
         * Triggers one update in any case.
         */


        BaseImageResource.prototype.update = function () {
          if (this.destroyed) {
            return;
          }

          var source = this.source;
          var width = source.naturalWidth || source.videoWidth || source.width;
          var height = source.naturalHeight || source.videoHeight || source.height;
          this.resize(width, height);

          _super.prototype.update.call(this);
        };
        /**
         * Destroy this BaseImageResource
         * @override
         */


        BaseImageResource.prototype.dispose = function () {
          this.source = null;
        };

        return BaseImageResource;
      }(_Resource);
      /**
       * @interface OffscreenCanvas
       */

      /**
       * Resource type for HTMLCanvasElement.
       * @class
       * @extends PIXI.BaseImageResource
       * @memberof PIXI
       */


      var _CanvasResource =
      /** @class */
      function (_super) {
        __extends(CanvasResource, _super);
        /**
         * @param {HTMLCanvasElement} source - Canvas element to use
         */
        // eslint-disable-next-line @typescript-eslint/no-useless-constructor


        function CanvasResource(source) {
          return _super.call(this, source) || this;
        }
        /**
         * Used to auto-detect the type of resource.
         *
         * @static
         * @param {HTMLCanvasElement|OffscreenCanvas} source - The source object
         * @return {boolean} `true` if source is HTMLCanvasElement or OffscreenCanvas
         */


        CanvasResource.test = function (source) {
          var OffscreenCanvas = self.OffscreenCanvas; // Check for browsers that don't yet support OffscreenCanvas

          if (OffscreenCanvas && source instanceof OffscreenCanvas) {
            return true;
          }

          return self.HTMLCanvasElement && source instanceof HTMLCanvasElement;
        };

        return CanvasResource;
      }(_BaseImageResource);
      /**
       * Resource for a CubeTexture which contains six resources.
       *
       * @class
       * @extends PIXI.ArrayResource
       * @memberof PIXI
       */


      var _CubeResource =
      /** @class */
      function (_super) {
        __extends(CubeResource, _super);
        /**
         * @param {Array<string|PIXI.Resource>} [source] - Collection of URLs or resources
         *        to use as the sides of the cube.
         * @param {object} [options] - ImageResource options
         * @param {number} [options.width] - Width of resource
         * @param {number} [options.height] - Height of resource
         * @param {number} [options.autoLoad=true] - Whether to auto-load resources
         * @param {number} [options.linkBaseTexture=true] - In case BaseTextures are supplied,
         *   whether to copy them or use
         */


        function CubeResource(source, options) {
          var _this = this;

          var _a = options || {},
              width = _a.width,
              height = _a.height,
              autoLoad = _a.autoLoad,
              linkBaseTexture = _a.linkBaseTexture;

          if (source && source.length !== CubeResource.SIDES) {
            throw new Error("Invalid length. Got " + source.length + ", expected 6");
          }

          _this = _super.call(this, 6, {
            width: width,
            height: height
          }) || this;

          for (var i = 0; i < CubeResource.SIDES; i++) {
            _this.items[i].target = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TARGETS.TEXTURE_CUBE_MAP_POSITIVE_X + i;
          }
          /**
           * In case BaseTextures are supplied, whether to use same resource or bind baseTexture itself
           * @member {boolean}
           * @protected
           */


          _this.linkBaseTexture = linkBaseTexture !== false;

          if (source) {
            _this.initFromArray(source, options);
          }

          if (autoLoad !== false) {
            _this.load();
          }

          return _this;
        }
        /**
         * Add binding
         *
         * @override
         * @param {PIXI.BaseTexture} baseTexture - parent base texture
         */


        CubeResource.prototype.bind = function (baseTexture) {
          _super.prototype.bind.call(this, baseTexture);

          baseTexture.target = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TARGETS.TEXTURE_CUBE_MAP;
        };

        CubeResource.prototype.addBaseTextureAt = function (baseTexture, index, linkBaseTexture) {
          if (linkBaseTexture === undefined) {
            linkBaseTexture = this.linkBaseTexture;
          }

          if (!this.items[index]) {
            throw new Error("Index " + index + " is out of bounds");
          }

          if (!this.linkBaseTexture || baseTexture.parentTextureArray || Object.keys(baseTexture._glTextures).length > 0) {
            // copy mode
            if (baseTexture.resource) {
              this.addResourceAt(baseTexture.resource, index);
            } else {
              throw new Error("CubeResource does not support copying of renderTexture.");
            }
          } else {
            // link mode, the difficult one!
            baseTexture.target = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TARGETS.TEXTURE_CUBE_MAP_POSITIVE_X + index;
            baseTexture.parentTextureArray = this.baseTexture;
            this.items[index] = baseTexture;
          }

          if (baseTexture.valid && !this.valid) {
            this.resize(baseTexture.realWidth, baseTexture.realHeight);
          }

          this.items[index] = baseTexture;
          return this;
        };
        /**
         * Upload the resource
         *
         * @returns {boolean} true is success
         */


        CubeResource.prototype.upload = function (renderer, _baseTexture, glTexture) {
          var dirty = this.itemDirtyIds;

          for (var i = 0; i < CubeResource.SIDES; i++) {
            var side = this.items[i];

            if (dirty[i] < side.dirtyId) {
              if (side.valid && side.resource) {
                side.resource.upload(renderer, side, glTexture);
                dirty[i] = side.dirtyId;
              } else if (dirty[i] < -1) {
                // either item is not valid yet, either its a renderTexture
                // allocate the memory
                renderer.gl.texImage2D(side.target, 0, glTexture.internalFormat, _baseTexture.realWidth, _baseTexture.realHeight, 0, _baseTexture.format, glTexture.type, null);
                dirty[i] = -1;
              }
            }
          }

          return true;
        };
        /**
         * Used to auto-detect the type of resource.
         *
         * @static
         * @param {object} source - The source object
         * @return {boolean} `true` if source is an array of 6 elements
         */


        CubeResource.test = function (source) {
          return Array.isArray(source) && source.length === CubeResource.SIDES;
        };
        /**
         * Number of texture sides to store for CubeResources
         *
         * @name PIXI.CubeResource.SIDES
         * @static
         * @member {number}
         * @default 6
         */


        CubeResource.SIDES = 6;
        return CubeResource;
      }(_AbstractMultiResource);
      /**
       * Resource type for HTMLImageElement.
       * @class
       * @extends PIXI.BaseImageResource
       * @memberof PIXI
       */


      var _ImageResource =
      /** @class */
      function (_super) {
        __extends(ImageResource, _super);
        /**
         * @param {HTMLImageElement|string} source - image source or URL
         * @param {object} [options]
         * @param {boolean} [options.autoLoad=true] - start loading process
         * @param {boolean} [options.createBitmap=PIXI.settings.CREATE_IMAGE_BITMAP] - whether its required to create
         *        a bitmap before upload
         * @param {boolean} [options.crossorigin=true] - Load image using cross origin
         * @param {PIXI.ALPHA_MODES} [options.alphaMode=PIXI.ALPHA_MODES.UNPACK] - Premultiply image alpha in bitmap
         */


        function ImageResource(source, options) {
          var _this = this;

          options = options || {};

          if (!(source instanceof HTMLImageElement)) {
            var imageElement = new Image();

            _BaseImageResource.crossOrigin(imageElement, source, options.crossorigin);

            imageElement.src = source;
            source = imageElement;
          }

          _this = _super.call(this, source) || this; // FireFox 68, and possibly other versions, seems like setting the HTMLImageElement#width and #height
          // to non-zero values before its loading completes if images are in a cache.
          // Because of this, need to set the `_width` and the `_height` to zero to avoid uploading incomplete images.
          // Please refer to the issue #5968 (https://github.com/pixijs/pixi.js/issues/5968).

          if (!source.complete && !!_this._width && !!_this._height) {
            _this._width = 0;
            _this._height = 0;
          }
          /**
           * URL of the image source
           * @member {string}
           */


          _this.url = source.src;
          /**
           * When process is completed
           * @member {Promise<void>}
           * @private
           */

          _this._process = null;
          /**
           * If the image should be disposed after upload
           * @member {boolean}
           * @default false
           */

          _this.preserveBitmap = false;
          /**
           * If capable, convert the image using createImageBitmap API
           * @member {boolean}
           * @default PIXI.settings.CREATE_IMAGE_BITMAP
           */

          _this.createBitmap = (options.createBitmap !== undefined ? options.createBitmap : _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.CREATE_IMAGE_BITMAP) && !!self.createImageBitmap;
          /**
           * Controls texture alphaMode field
           * Copies from options
           * Default is `null`, copies option from baseTexture
           *
           * @member {PIXI.ALPHA_MODES|null}
           * @readonly
           */

          _this.alphaMode = typeof options.alphaMode === 'number' ? options.alphaMode : null;
          /**
           * The ImageBitmap element created for HTMLImageElement
           * @member {ImageBitmap}
           * @default null
           */

          _this.bitmap = null;
          /**
           * Promise when loading
           * @member {Promise<void>}
           * @private
           * @default null
           */

          _this._load = null;

          if (options.autoLoad !== false) {
            _this.load();
          }

          return _this;
        }
        /**
         * returns a promise when image will be loaded and processed
         *
         * @param {boolean} [createBitmap] - whether process image into bitmap
         * @returns {Promise<void>}
         */


        ImageResource.prototype.load = function (createBitmap) {
          var _this = this;

          if (this._load) {
            return this._load;
          }

          if (createBitmap !== undefined) {
            this.createBitmap = createBitmap;
          }

          this._load = new Promise(function (resolve, reject) {
            var source = _this.source;
            _this.url = source.src;

            var completed = function completed() {
              if (_this.destroyed) {
                return;
              }

              source.onload = null;
              source.onerror = null;

              _this.resize(source.width, source.height);

              _this._load = null;

              if (_this.createBitmap) {
                resolve(_this.process());
              } else {
                resolve(_this);
              }
            };

            if (source.complete && source.src) {
              completed();
            } else {
              source.onload = completed;

              source.onerror = function (event) {
                // Avoids Promise freezing when resource broken
                reject(event);

                _this.onError.emit(event);
              };
            }
          });
          return this._load;
        };
        /**
         * Called when we need to convert image into BitmapImage.
         * Can be called multiple times, real promise is cached inside.
         *
         * @returns {Promise<void>} cached promise to fill that bitmap
         */


        ImageResource.prototype.process = function () {
          var _this = this;

          var source = this.source;

          if (this._process !== null) {
            return this._process;
          }

          if (this.bitmap !== null || !self.createImageBitmap) {
            return Promise.resolve(this);
          }

          var createImageBitmap = self.createImageBitmap;
          var cors = !source.crossOrigin || source.crossOrigin === 'anonymous';
          this._process = fetch(source.src, {
            mode: cors ? 'cors' : 'no-cors'
          }).then(function (r) {
            return r.blob();
          }).then(function (blob) {
            return createImageBitmap(blob, 0, 0, source.width, source.height, {
              premultiplyAlpha: _this.alphaMode === _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.ALPHA_MODES.UNPACK ? 'premultiply' : 'none'
            });
          }).then(function (bitmap) {
            if (_this.destroyed) {
              return Promise.reject();
            }

            _this.bitmap = bitmap;

            _this.update();

            _this._process = null;
            return Promise.resolve(_this);
          });
          return this._process;
        };
        /**
         * Upload the image resource to GPU.
         *
         * @param {PIXI.Renderer} renderer - Renderer to upload to
         * @param {PIXI.BaseTexture} baseTexture - BaseTexture for this resource
         * @param {PIXI.GLTexture} glTexture - GLTexture to use
         * @returns {boolean} true is success
         */


        ImageResource.prototype.upload = function (renderer, baseTexture, glTexture) {
          if (typeof this.alphaMode === 'number') {
            // bitmap stores unpack premultiply flag, we dont have to notify texImage2D about it
            baseTexture.alphaMode = this.alphaMode;
          }

          if (!this.createBitmap) {
            return _super.prototype.upload.call(this, renderer, baseTexture, glTexture);
          }

          if (!this.bitmap) {
            // yeah, ignore the output
            this.process();

            if (!this.bitmap) {
              return false;
            }
          }

          _super.prototype.upload.call(this, renderer, baseTexture, glTexture, this.bitmap);

          if (!this.preserveBitmap) {
            // checks if there are other renderers that possibly need this bitmap
            var flag = true;
            var glTextures = baseTexture._glTextures;

            for (var key in glTextures) {
              var otherTex = glTextures[key];

              if (otherTex !== glTexture && otherTex.dirtyId !== baseTexture.dirtyId) {
                flag = false;
                break;
              }
            }

            if (flag) {
              if (this.bitmap.close) {
                this.bitmap.close();
              }

              this.bitmap = null;
            }
          }

          return true;
        };
        /**
         * Destroys this texture
         * @override
         */


        ImageResource.prototype.dispose = function () {
          this.source.onload = null;
          this.source.onerror = null;

          _super.prototype.dispose.call(this);

          if (this.bitmap) {
            this.bitmap.close();
            this.bitmap = null;
          }

          this._process = null;
          this._load = null;
        };
        /**
         * Used to auto-detect the type of resource.
         *
         * @static
         * @param {string|HTMLImageElement} source - The source object
         * @return {boolean} `true` if source is string or HTMLImageElement
         */


        ImageResource.test = function (source) {
          return typeof source === 'string' || source instanceof HTMLImageElement;
        };

        return ImageResource;
      }(_BaseImageResource);
      /**
       * Resource type for SVG elements and graphics.
       * @class
       * @extends PIXI.BaseImageResource
       * @memberof PIXI
       */


      var _SVGResource =
      /** @class */
      function (_super) {
        __extends(SVGResource, _super);
        /**
         * @param {string} source - Base64 encoded SVG element or URL for SVG file.
         * @param {object} [options] - Options to use
         * @param {number} [options.scale=1] - Scale to apply to SVG. Overridden by...
         * @param {number} [options.width] - Rasterize SVG this wide. Aspect ratio preserved if height not specified.
         * @param {number} [options.height] - Rasterize SVG this high. Aspect ratio preserved if width not specified.
         * @param {boolean} [options.autoLoad=true] - Start loading right away.
         */


        function SVGResource(sourceBase64, options) {
          var _this = this;

          options = options || {};
          _this = _super.call(this, document.createElement('canvas')) || this;
          _this._width = 0;
          _this._height = 0;
          /**
           * Base64 encoded SVG element or URL for SVG file
           * @readonly
           * @member {string}
           */

          _this.svg = sourceBase64;
          /**
           * The source scale to apply when rasterizing on load
           * @readonly
           * @member {number}
           */

          _this.scale = options.scale || 1;
          /**
           * A width override for rasterization on load
           * @readonly
           * @member {number}
           */

          _this._overrideWidth = options.width;
          /**
           * A height override for rasterization on load
           * @readonly
           * @member {number}
           */

          _this._overrideHeight = options.height;
          /**
           * Call when completely loaded
           * @private
           * @member {function}
           */

          _this._resolve = null;
          /**
           * Cross origin value to use
           * @private
           * @member {boolean|string}
           */

          _this._crossorigin = options.crossorigin;
          /**
           * Promise when loading
           * @member {Promise<void>}
           * @private
           * @default null
           */

          _this._load = null;

          if (options.autoLoad !== false) {
            _this.load();
          }

          return _this;
        }

        SVGResource.prototype.load = function () {
          var _this = this;

          if (this._load) {
            return this._load;
          }

          this._load = new Promise(function (resolve) {
            // Save this until after load is finished
            _this._resolve = function () {
              _this.resize(_this.source.width, _this.source.height);

              resolve(_this);
            }; // Convert SVG inline string to data-uri


            if (SVGResource.SVG_XML.test(_this.svg.trim())) {
              if (!btoa) {
                throw new Error('Your browser doesn\'t support base64 conversions.');
              }

              _this.svg = "data:image/svg+xml;base64," + btoa(unescape(encodeURIComponent(_this.svg)));
            }

            _this._loadSvg();
          });
          return this._load;
        };
        /**
         * Loads an SVG image from `imageUrl` or `data URL`.
         *
         * @private
         */


        SVGResource.prototype._loadSvg = function () {
          var _this = this;

          var tempImage = new Image();

          _BaseImageResource.crossOrigin(tempImage, this.svg, this._crossorigin);

          tempImage.src = this.svg;

          tempImage.onerror = function (event) {
            if (!_this._resolve) {
              return;
            }

            tempImage.onerror = null;

            _this.onError.emit(event);
          };

          tempImage.onload = function () {
            if (!_this._resolve) {
              return;
            }

            var svgWidth = tempImage.width;
            var svgHeight = tempImage.height;

            if (!svgWidth || !svgHeight) {
              throw new Error('The SVG image must have width and height defined (in pixels), canvas API needs them.');
            } // Set render size


            var width = svgWidth * _this.scale;
            var height = svgHeight * _this.scale;

            if (_this._overrideWidth || _this._overrideHeight) {
              width = _this._overrideWidth || _this._overrideHeight / svgHeight * svgWidth;
              height = _this._overrideHeight || _this._overrideWidth / svgWidth * svgHeight;
            }

            width = Math.round(width);
            height = Math.round(height); // Create a canvas element

            var canvas = _this.source;
            canvas.width = width;
            canvas.height = height;
            canvas._pixiId = "canvas_" + (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.uid)(); // Draw the Svg to the canvas

            canvas.getContext('2d').drawImage(tempImage, 0, 0, svgWidth, svgHeight, 0, 0, width, height);

            _this._resolve();

            _this._resolve = null;
          };
        };
        /**
         * Get size from an svg string using regexp.
         *
         * @method
         * @param {string} svgString - a serialized svg element
         * @return {PIXI.ISize} image extension
         */


        SVGResource.getSize = function (svgString) {
          var sizeMatch = SVGResource.SVG_SIZE.exec(svgString);
          var size = {};

          if (sizeMatch) {
            size[sizeMatch[1]] = Math.round(parseFloat(sizeMatch[3]));
            size[sizeMatch[5]] = Math.round(parseFloat(sizeMatch[7]));
          }

          return size;
        };
        /**
         * Destroys this texture
         * @override
         */


        SVGResource.prototype.dispose = function () {
          _super.prototype.dispose.call(this);

          this._resolve = null;
          this._crossorigin = null;
        };
        /**
         * Used to auto-detect the type of resource.
         *
         * @static
         * @param {*} source - The source object
         * @param {string} extension - The extension of source, if set
         */


        SVGResource.test = function (source, extension) {
          // url file extension is SVG
          return extension === 'svg' // source is SVG data-uri
          || typeof source === 'string' && /^data:image\/svg\+xml(;(charset=utf8|utf8))?;base64/.test(source) // source is SVG inline
          || typeof source === 'string' && SVGResource.SVG_XML.test(source);
        };
        /**
         * RegExp for SVG XML document.
         *
         * @example &lt;?xml version="1.0" encoding="utf-8" ?&gt;&lt;!-- image/svg --&gt;&lt;svg
         */


        SVGResource.SVG_XML = /^(<\?xml[^?]+\?>)?\s*(<!--[^(-->)]*-->)?\s*\<svg/m;
        /**
         * RegExp for SVG size.
         *
         * @static
         * @constant {RegExp|string} SVG_SIZE
         * @memberof PIXI.SVGResource
         * @example &lt;svg width="100" height="100"&gt;&lt;/svg&gt;
         */

        SVGResource.SVG_SIZE = /<svg[^>]*(?:\s(width|height)=('|")(\d*(?:\.\d+)?)(?:px)?('|"))[^>]*(?:\s(width|height)=('|")(\d*(?:\.\d+)?)(?:px)?('|"))[^>]*>/i; // eslint-disable-line max-len

        return SVGResource;
      }(_BaseImageResource);
      /**
       * Resource type for HTMLVideoElement.
       * @class
       * @extends PIXI.BaseImageResource
       * @memberof PIXI
       */


      var _VideoResource =
      /** @class */
      function (_super) {
        __extends(VideoResource, _super);
        /**
         * @param {HTMLVideoElement|object|string|Array<string|object>} source - Video element to use.
         * @param {object} [options] - Options to use
         * @param {boolean} [options.autoLoad=true] - Start loading the video immediately
         * @param {boolean} [options.autoPlay=true] - Start playing video immediately
         * @param {number} [options.updateFPS=0] - How many times a second to update the texture from the video.
         * Leave at 0 to update at every render.
         * @param {boolean} [options.crossorigin=true] - Load image using cross origin
         */


        function VideoResource(source, options) {
          var _this = this;

          options = options || {};

          if (!(source instanceof HTMLVideoElement)) {
            var videoElement = document.createElement('video'); // workaround for https://github.com/pixijs/pixi.js/issues/5996

            videoElement.setAttribute('preload', 'auto');
            videoElement.setAttribute('webkit-playsinline', '');
            videoElement.setAttribute('playsinline', '');

            if (typeof source === 'string') {
              source = [source];
            }

            var firstSrc = source[0].src || source[0];

            _BaseImageResource.crossOrigin(videoElement, firstSrc, options.crossorigin); // array of objects or strings


            for (var i = 0; i < source.length; ++i) {
              var sourceElement = document.createElement('source');
              var _a = source[i],
                  src = _a.src,
                  mime = _a.mime;
              src = src || source[i];
              var baseSrc = src.split('?').shift().toLowerCase();
              var ext = baseSrc.substr(baseSrc.lastIndexOf('.') + 1);
              mime = mime || VideoResource.MIME_TYPES[ext] || "video/" + ext;
              sourceElement.src = src;
              sourceElement.type = mime;
              videoElement.appendChild(sourceElement);
            } // Override the source


            source = videoElement;
          }

          _this = _super.call(this, source) || this;
          _this.noSubImage = true;
          /**
           * `true` to use PIXI.Ticker.shared to auto update the base texture.
           *
           * @type {boolean}
           * @default true
           * @private
           */

          _this._autoUpdate = true;
          /**
           * `true` if the instance is currently connected to PIXI.Ticker.shared to auto update the base texture.
           *
           * @type {boolean}
           * @default false
           * @private
           */

          _this._isConnectedToTicker = false;
          _this._updateFPS = options.updateFPS || 0;
          _this._msToNextUpdate = 0;
          /**
           * When set to true will automatically play videos used by this texture once
           * they are loaded. If false, it will not modify the playing state.
           *
           * @member {boolean}
           * @default true
           */

          _this.autoPlay = options.autoPlay !== false;
          /**
           * Promise when loading
           * @member {Promise<void>}
           * @private
           * @default null
           */

          _this._load = null;
          /**
           * Callback when completed with load.
           * @member {function}
           * @private
           */

          _this._resolve = null; // Bind for listeners

          _this._onCanPlay = _this._onCanPlay.bind(_this);
          _this._onError = _this._onError.bind(_this);

          if (options.autoLoad !== false) {
            _this.load();
          }

          return _this;
        }
        /**
         * Trigger updating of the texture
         *
         * @param {number} [deltaTime=0] - time delta since last tick
         */


        VideoResource.prototype.update = function (_deltaTime) {
          if (!this.destroyed) {
            // account for if video has had its playbackRate changed
            var elapsedMS = _pixi_ticker__WEBPACK_IMPORTED_MODULE_4__.Ticker.shared.elapsedMS * this.source.playbackRate;
            this._msToNextUpdate = Math.floor(this._msToNextUpdate - elapsedMS);

            if (!this._updateFPS || this._msToNextUpdate <= 0) {
              _super.prototype.update.call(this);

              this._msToNextUpdate = this._updateFPS ? Math.floor(1000 / this._updateFPS) : 0;
            }
          }
        };
        /**
         * Start preloading the video resource.
         *
         * @protected
         * @return {Promise<void>} Handle the validate event
         */


        VideoResource.prototype.load = function () {
          var _this = this;

          if (this._load) {
            return this._load;
          }

          var source = this.source;

          if ((source.readyState === source.HAVE_ENOUGH_DATA || source.readyState === source.HAVE_FUTURE_DATA) && source.width && source.height) {
            source.complete = true;
          }

          source.addEventListener('play', this._onPlayStart.bind(this));
          source.addEventListener('pause', this._onPlayStop.bind(this));

          if (!this._isSourceReady()) {
            source.addEventListener('canplay', this._onCanPlay);
            source.addEventListener('canplaythrough', this._onCanPlay);
            source.addEventListener('error', this._onError, true);
          } else {
            this._onCanPlay();
          }

          this._load = new Promise(function (resolve) {
            if (_this.valid) {
              resolve(_this);
            } else {
              _this._resolve = resolve;
              source.load();
            }
          });
          return this._load;
        };
        /**
         * Handle video error events.
         *
         * @private
         */


        VideoResource.prototype._onError = function (event) {
          this.source.removeEventListener('error', this._onError, true);
          this.onError.emit(event);
        };
        /**
         * Returns true if the underlying source is playing.
         *
         * @private
         * @return {boolean} True if playing.
         */


        VideoResource.prototype._isSourcePlaying = function () {
          var source = this.source;
          return source.currentTime > 0 && source.paused === false && source.ended === false && source.readyState > 2;
        };
        /**
         * Returns true if the underlying source is ready for playing.
         *
         * @private
         * @return {boolean} True if ready.
         */


        VideoResource.prototype._isSourceReady = function () {
          var source = this.source;
          return source.readyState === 3 || source.readyState === 4;
        };
        /**
         * Runs the update loop when the video is ready to play
         *
         * @private
         */


        VideoResource.prototype._onPlayStart = function () {
          // Just in case the video has not received its can play even yet..
          if (!this.valid) {
            this._onCanPlay();
          }

          if (this.autoUpdate && !this._isConnectedToTicker) {
            _pixi_ticker__WEBPACK_IMPORTED_MODULE_4__.Ticker.shared.add(this.update, this);

            this._isConnectedToTicker = true;
          }
        };
        /**
         * Fired when a pause event is triggered, stops the update loop
         *
         * @private
         */


        VideoResource.prototype._onPlayStop = function () {
          if (this._isConnectedToTicker) {
            _pixi_ticker__WEBPACK_IMPORTED_MODULE_4__.Ticker.shared.remove(this.update, this);

            this._isConnectedToTicker = false;
          }
        };
        /**
         * Fired when the video is loaded and ready to play
         *
         * @private
         */


        VideoResource.prototype._onCanPlay = function () {
          var source = this.source;
          source.removeEventListener('canplay', this._onCanPlay);
          source.removeEventListener('canplaythrough', this._onCanPlay);
          var valid = this.valid;
          this.resize(source.videoWidth, source.videoHeight); // prevent multiple loaded dispatches..

          if (!valid && this._resolve) {
            this._resolve(this);

            this._resolve = null;
          }

          if (this._isSourcePlaying()) {
            this._onPlayStart();
          } else if (this.autoPlay) {
            source.play();
          }
        };
        /**
         * Destroys this texture
         * @override
         */


        VideoResource.prototype.dispose = function () {
          if (this._isConnectedToTicker) {
            _pixi_ticker__WEBPACK_IMPORTED_MODULE_4__.Ticker.shared.remove(this.update, this);

            this._isConnectedToTicker = false;
          }

          var source = this.source;

          if (source) {
            source.removeEventListener('error', this._onError, true);
            source.pause();
            source.src = '';
            source.load();
          }

          _super.prototype.dispose.call(this);
        };

        Object.defineProperty(VideoResource.prototype, "autoUpdate", {
          /**
           * Should the base texture automatically update itself, set to true by default
           *
           * @member {boolean}
           */
          get: function get() {
            return this._autoUpdate;
          },
          set: function set(value) {
            if (value !== this._autoUpdate) {
              this._autoUpdate = value;

              if (!this._autoUpdate && this._isConnectedToTicker) {
                _pixi_ticker__WEBPACK_IMPORTED_MODULE_4__.Ticker.shared.remove(this.update, this);

                this._isConnectedToTicker = false;
              } else if (this._autoUpdate && !this._isConnectedToTicker && this._isSourcePlaying()) {
                _pixi_ticker__WEBPACK_IMPORTED_MODULE_4__.Ticker.shared.add(this.update, this);

                this._isConnectedToTicker = true;
              }
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(VideoResource.prototype, "updateFPS", {
          /**
           * How many times a second to update the texture from the video. Leave at 0 to update at every render.
           * A lower fps can help performance, as updating the texture at 60fps on a 30ps video may not be efficient.
           *
           * @member {number}
           */
          get: function get() {
            return this._updateFPS;
          },
          set: function set(value) {
            if (value !== this._updateFPS) {
              this._updateFPS = value;
            }
          },
          enumerable: false,
          configurable: true
        });
        /**
         * Used to auto-detect the type of resource.
         *
         * @static
         * @param {*} source - The source object
         * @param {string} extension - The extension of source, if set
         * @return {boolean} `true` if video source
         */

        VideoResource.test = function (source, extension) {
          return self.HTMLVideoElement && source instanceof HTMLVideoElement || VideoResource.TYPES.indexOf(extension) > -1;
        };
        /**
         * List of common video file extensions supported by VideoResource.
         * @constant
         * @member {Array<string>}
         * @static
         * @readonly
         */


        VideoResource.TYPES = ['mp4', 'm4v', 'webm', 'ogg', 'ogv', 'h264', 'avi', 'mov'];
        /**
         * Map of video MIME types that can't be directly derived from file extensions.
         * @constant
         * @member {object}
         * @static
         * @readonly
         */

        VideoResource.MIME_TYPES = {
          ogv: 'video/ogg',
          mov: 'video/quicktime',
          m4v: 'video/mp4'
        };
        return VideoResource;
      }(_BaseImageResource);
      /**
       * Resource type for ImageBitmap.
       * @class
       * @extends PIXI.BaseImageResource
       * @memberof PIXI
       */


      var _ImageBitmapResource =
      /** @class */
      function (_super) {
        __extends(ImageBitmapResource, _super);
        /**
         * @param {ImageBitmap} source - Image element to use
         */
        // eslint-disable-next-line @typescript-eslint/no-useless-constructor


        function ImageBitmapResource(source) {
          return _super.call(this, source) || this;
        }
        /**
         * Used to auto-detect the type of resource.
         *
         * @static
         * @param {ImageBitmap} source - The source object
         * @return {boolean} `true` if source is an ImageBitmap
         */


        ImageBitmapResource.test = function (source) {
          return !!self.createImageBitmap && source instanceof ImageBitmap;
        };

        return ImageBitmapResource;
      }(_BaseImageResource);

      _INSTALLED.push(_ImageResource, _ImageBitmapResource, _CanvasResource, _VideoResource, _SVGResource, _BufferResource, _CubeResource, _ArrayResource);

      var _resources = {
        __proto__: null,
        Resource: _Resource,
        BaseImageResource: _BaseImageResource,
        INSTALLED: _INSTALLED,
        autoDetectResource: _autoDetectResource,
        AbstractMultiResource: _AbstractMultiResource,
        ArrayResource: _ArrayResource,
        BufferResource: _BufferResource,
        CanvasResource: _CanvasResource,
        CubeResource: _CubeResource,
        ImageResource: _ImageResource,
        SVGResource: _SVGResource,
        VideoResource: _VideoResource,
        ImageBitmapResource: _ImageBitmapResource
      };
      /**
       * Resource type for DepthTexture.
       * @class
       * @extends PIXI.BufferResource
       * @memberof PIXI
       */

      var DepthResource =
      /** @class */
      function (_super) {
        __extends(DepthResource, _super);

        function DepthResource() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Upload the texture to the GPU.
         * @param {PIXI.Renderer} renderer - Upload to the renderer
         * @param {PIXI.BaseTexture} baseTexture - Reference to parent texture
         * @param {PIXI.GLTexture} glTexture - glTexture
         * @returns {boolean} true is success
         */


        DepthResource.prototype.upload = function (renderer, baseTexture, glTexture) {
          var gl = renderer.gl;
          gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.ALPHA_MODES.UNPACK);
          var width = baseTexture.realWidth;
          var height = baseTexture.realHeight;

          if (glTexture.width === width && glTexture.height === height) {
            gl.texSubImage2D(baseTexture.target, 0, 0, 0, width, height, baseTexture.format, glTexture.type, this.data);
          } else {
            glTexture.width = width;
            glTexture.height = height;
            gl.texImage2D(baseTexture.target, 0, glTexture.internalFormat, width, height, 0, baseTexture.format, glTexture.type, this.data);
          }

          return true;
        };

        return DepthResource;
      }(_BufferResource);
      /**
       * A framebuffer can be used to render contents off of the screen. {@link PIXI.BaseRenderTexture} uses
       * one internally to render into itself. You can attach a depth or stencil buffer to a framebuffer.
       *
       * On WebGL 2 machines, shaders can output to multiple textures simultaneously with GLSL 300 ES.
       *
       * @class
       * @memberof PIXI
       */


      var _Framebuffer =
      /** @class */
      function () {
        /**
         * @param {number} width - Width of the frame buffer
         * @param {number} height - Height of the frame buffer
         */
        function Framebuffer(width, height) {
          /**
           * Width of framebuffer in pixels
           * @member {number}
           */
          this.width = Math.round(width || 100);
          /**
           * Height of framebuffer in pixels
           * @member {number}
           */

          this.height = Math.round(height || 100);
          this.stencil = false;
          this.depth = false;
          this.dirtyId = 0;
          this.dirtyFormat = 0;
          this.dirtySize = 0;
          this.depthTexture = null;
          this.colorTextures = [];
          this.glFramebuffers = {};
          this.disposeRunner = new _pixi_runner__WEBPACK_IMPORTED_MODULE_3__.Runner('disposeFramebuffer');
          /**
           * Desired number of samples for antialiasing. 0 means AA should not be used.
           *
           * Experimental WebGL2 feature, allows to use antialiasing in individual renderTextures.
           * Antialiasing is the same as for main buffer with renderer `antialias:true` options.
           * Seriously affects GPU memory consumption and GPU performance.
           *
           *```js
           * renderTexture.framebuffer.multisample = PIXI.MSAA_QUALITY.HIGH;
           * //...
           * renderer.render(myContainer, {renderTexture});
           * renderer.framebuffer.blit(); // copies data from MSAA framebuffer to texture
           *  ```
           *
           * @member {PIXI.MSAA_QUALITY}
           * @default PIXI.MSAA_QUALITY.NONE
           */

          this.multisample = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MSAA_QUALITY.NONE;
        }

        Object.defineProperty(Framebuffer.prototype, "colorTexture", {
          /**
           * Reference to the colorTexture.
           *
           * @member {PIXI.BaseTexture[]}
           * @readonly
           */
          get: function get() {
            return this.colorTextures[0];
          },
          enumerable: false,
          configurable: true
        });
        /**
         * Add texture to the colorTexture array
         *
         * @param {number} [index=0] - Index of the array to add the texture to
         * @param {PIXI.BaseTexture} [texture] - Texture to add to the array
         */

        Framebuffer.prototype.addColorTexture = function (index, texture) {
          if (index === void 0) {
            index = 0;
          } // TODO add some validation to the texture - same width / height etc?


          this.colorTextures[index] = texture || new _BaseTexture(null, {
            scaleMode: _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.SCALE_MODES.NEAREST,
            resolution: 1,
            mipmap: _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MIPMAP_MODES.OFF,
            width: this.width,
            height: this.height
          });
          this.dirtyId++;
          this.dirtyFormat++;
          return this;
        };
        /**
         * Add a depth texture to the frame buffer
         *
         * @param {PIXI.BaseTexture} [texture] - Texture to add
         */


        Framebuffer.prototype.addDepthTexture = function (texture) {
          /* eslint-disable max-len */
          this.depthTexture = texture || new _BaseTexture(new DepthResource(null, {
            width: this.width,
            height: this.height
          }), {
            scaleMode: _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.SCALE_MODES.NEAREST,
            resolution: 1,
            width: this.width,
            height: this.height,
            mipmap: _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MIPMAP_MODES.OFF,
            format: _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.DEPTH_COMPONENT,
            type: _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.UNSIGNED_SHORT
          });
          this.dirtyId++;
          this.dirtyFormat++;
          return this;
        };
        /**
         * Enable depth on the frame buffer
         */


        Framebuffer.prototype.enableDepth = function () {
          this.depth = true;
          this.dirtyId++;
          this.dirtyFormat++;
          return this;
        };
        /**
         * Enable stencil on the frame buffer
         */


        Framebuffer.prototype.enableStencil = function () {
          this.stencil = true;
          this.dirtyId++;
          this.dirtyFormat++;
          return this;
        };
        /**
         * Resize the frame buffer
         *
         * @param {number} width - Width of the frame buffer to resize to
         * @param {number} height - Height of the frame buffer to resize to
         */


        Framebuffer.prototype.resize = function (width, height) {
          width = Math.round(width);
          height = Math.round(height);

          if (width === this.width && height === this.height) {
            return;
          }

          this.width = width;
          this.height = height;
          this.dirtyId++;
          this.dirtySize++;

          for (var i = 0; i < this.colorTextures.length; i++) {
            var texture = this.colorTextures[i];
            var resolution = texture.resolution; // take into account the fact the texture may have a different resolution..

            texture.setSize(width / resolution, height / resolution);
          }

          if (this.depthTexture) {
            var resolution = this.depthTexture.resolution;
            this.depthTexture.setSize(width / resolution, height / resolution);
          }
        };
        /**
         * Disposes WebGL resources that are connected to this geometry
         */


        Framebuffer.prototype.dispose = function () {
          this.disposeRunner.emit(this, false);
        };
        /**
         * Destroys and removes the depth texture added to this framebuffer.
         */


        Framebuffer.prototype.destroyDepthTexture = function () {
          if (this.depthTexture) {
            this.depthTexture.destroy();
            this.depthTexture = null;
            ++this.dirtyId;
            ++this.dirtyFormat;
          }
        };

        return Framebuffer;
      }();
      /**
       * A BaseRenderTexture is a special texture that allows any PixiJS display object to be rendered to it.
       *
       * __Hint__: All DisplayObjects (i.e. Sprites) that render to a BaseRenderTexture should be preloaded
       * otherwise black rectangles will be drawn instead.
       *
       * A BaseRenderTexture takes a snapshot of any Display Object given to its render method. The position
       * and rotation of the given Display Objects is ignored. For example:
       *
       * ```js
       * let renderer = PIXI.autoDetectRenderer();
       * let baseRenderTexture = new PIXI.BaseRenderTexture({ width: 800, height: 600 });
       * let renderTexture = new PIXI.RenderTexture(baseRenderTexture);
       * let sprite = PIXI.Sprite.from("spinObj_01.png");
       *
       * sprite.position.x = 800/2;
       * sprite.position.y = 600/2;
       * sprite.anchor.x = 0.5;
       * sprite.anchor.y = 0.5;
       *
       * renderer.render(sprite, {renderTexture});
       * ```
       *
       * The Sprite in this case will be rendered using its local transform. To render this sprite at 0,0
       * you can clear the transform
       *
       * ```js
       *
       * sprite.setTransform()
       *
       * let baseRenderTexture = new PIXI.BaseRenderTexture({ width: 100, height: 100 });
       * let renderTexture = new PIXI.RenderTexture(baseRenderTexture);
       *
       * renderer.render(sprite, {renderTexture});  // Renders to center of RenderTexture
       * ```
       *
       * @class
       * @extends PIXI.BaseTexture
       * @memberof PIXI
       */


      var _BaseRenderTexture =
      /** @class */
      function (_super) {
        __extends(BaseRenderTexture, _super);
        /**
         * @param {object} [options]
         * @param {number} [options.width=100] - The width of the base render texture.
         * @param {number} [options.height=100] - The height of the base render texture.
         * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES}
         *   for possible values.
         * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio
         *   of the texture being generated.
         * @param {PIXI.MSAA_QUALITY} [options.multisample=PIXI.MSAA_QUALITY.NONE] - The number of samples of the frame buffer.
         */


        function BaseRenderTexture(options) {
          var _this = this;

          if (typeof options === 'number') {
            /* eslint-disable prefer-rest-params */
            // Backward compatibility of signature
            var width = arguments[0];
            var height = arguments[1];
            var scaleMode = arguments[2];
            var resolution = arguments[3];
            options = {
              width: width,
              height: height,
              scaleMode: scaleMode,
              resolution: resolution
            };
            /* eslint-enable prefer-rest-params */
          }

          options.width = options.width || 100;
          options.height = options.height || 100;
          options.multisample = options.multisample !== undefined ? options.multisample : _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MSAA_QUALITY.NONE;
          _this = _super.call(this, null, options) || this; // Set defaults

          _this.mipmap = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MIPMAP_MODES.OFF;
          _this.valid = true;
          _this.clearColor = [0, 0, 0, 0];
          _this.framebuffer = new _Framebuffer(_this.realWidth, _this.realHeight).addColorTexture(0, _this);
          _this.framebuffer.multisample = options.multisample; // TODO - could this be added the systems?

          /**
           * The data structure for the stencil masks.
           *
           * @member {PIXI.MaskData[]}
           */

          _this.maskStack = [];
          /**
           * The data structure for the filters.
           *
           * @member {Object[]}
           */

          _this.filterStack = [{}];
          return _this;
        }
        /**
         * Resizes the BaseRenderTexture.
         *
         * @param {number} desiredWidth - The desired width to resize to.
         * @param {number} desiredHeight - The desired height to resize to.
         */


        BaseRenderTexture.prototype.resize = function (desiredWidth, desiredHeight) {
          this.framebuffer.resize(desiredWidth * this.resolution, desiredHeight * this.resolution);
          this.setRealSize(this.framebuffer.width, this.framebuffer.height);
        };
        /**
         * Frees the texture and framebuffer from WebGL memory without destroying this texture object.
         * This means you can still use the texture later which will upload it to GPU
         * memory again.
         *
         * @fires PIXI.BaseTexture#dispose
         */


        BaseRenderTexture.prototype.dispose = function () {
          this.framebuffer.dispose();

          _super.prototype.dispose.call(this);
        };
        /**
         * Destroys this texture.
         */


        BaseRenderTexture.prototype.destroy = function () {
          _super.prototype.destroy.call(this);

          this.framebuffer.destroyDepthTexture();
          this.framebuffer = null;
        };

        return BaseRenderTexture;
      }(_BaseTexture);
      /**
       * Stores a texture's frame in UV coordinates, in
       * which everything lies in the rectangle `[(0,0), (1,0),
       * (1,1), (0,1)]`.
       *
       * | Corner       | Coordinates |
       * |--------------|-------------|
       * | Top-Left     | `(x0,y0)`   |
       * | Top-Right    | `(x1,y1)`   |
       * | Bottom-Right | `(x2,y2)`   |
       * | Bottom-Left  | `(x3,y3)`   |
       *
       * @class
       * @protected
       * @memberof PIXI
       */


      var _TextureUvs =
      /** @class */
      function () {
        function TextureUvs() {
          /**
           * X-component of top-left corner `(x0,y0)`.
           *
           * @member {number}
           */
          this.x0 = 0;
          /**
           * Y-component of top-left corner `(x0,y0)`.
           *
           * @member {number}
           */

          this.y0 = 0;
          /**
           * X-component of top-right corner `(x1,y1)`.
           *
           * @member {number}
           */

          this.x1 = 1;
          /**
           * Y-component of top-right corner `(x1,y1)`.
           *
           * @member {number}
           */

          this.y1 = 0;
          /**
           * X-component of bottom-right corner `(x2,y2)`.
           *
           * @member {number}
           */

          this.x2 = 1;
          /**
           * Y-component of bottom-right corner `(x2,y2)`.
           *
           * @member {number}
           */

          this.y2 = 1;
          /**
           * X-component of bottom-left corner `(x3,y3)`.
           *
           * @member {number}
           */

          this.x3 = 0;
          /**
           * Y-component of bottom-right corner `(x3,y3)`.
           *
           * @member {number}
           */

          this.y3 = 1;
          this.uvsFloat32 = new Float32Array(8);
        }
        /**
         * Sets the texture Uvs based on the given frame information.
         *
         * @protected
         * @param {PIXI.Rectangle} frame - The frame of the texture
         * @param {PIXI.Rectangle} baseFrame - The base frame of the texture
         * @param {number} rotate - Rotation of frame, see {@link PIXI.groupD8}
         */


        TextureUvs.prototype.set = function (frame, baseFrame, rotate) {
          var tw = baseFrame.width;
          var th = baseFrame.height;

          if (rotate) {
            // width and height div 2 div baseFrame size
            var w2 = frame.width / 2 / tw;
            var h2 = frame.height / 2 / th; // coordinates of center

            var cX = frame.x / tw + w2;
            var cY = frame.y / th + h2;
            rotate = _pixi_math__WEBPACK_IMPORTED_MODULE_5__.groupD8.add(rotate, _pixi_math__WEBPACK_IMPORTED_MODULE_5__.groupD8.NW); // NW is top-left corner

            this.x0 = cX + w2 * _pixi_math__WEBPACK_IMPORTED_MODULE_5__.groupD8.uX(rotate);
            this.y0 = cY + h2 * _pixi_math__WEBPACK_IMPORTED_MODULE_5__.groupD8.uY(rotate);
            rotate = _pixi_math__WEBPACK_IMPORTED_MODULE_5__.groupD8.add(rotate, 2); // rotate 90 degrees clockwise

            this.x1 = cX + w2 * _pixi_math__WEBPACK_IMPORTED_MODULE_5__.groupD8.uX(rotate);
            this.y1 = cY + h2 * _pixi_math__WEBPACK_IMPORTED_MODULE_5__.groupD8.uY(rotate);
            rotate = _pixi_math__WEBPACK_IMPORTED_MODULE_5__.groupD8.add(rotate, 2);
            this.x2 = cX + w2 * _pixi_math__WEBPACK_IMPORTED_MODULE_5__.groupD8.uX(rotate);
            this.y2 = cY + h2 * _pixi_math__WEBPACK_IMPORTED_MODULE_5__.groupD8.uY(rotate);
            rotate = _pixi_math__WEBPACK_IMPORTED_MODULE_5__.groupD8.add(rotate, 2);
            this.x3 = cX + w2 * _pixi_math__WEBPACK_IMPORTED_MODULE_5__.groupD8.uX(rotate);
            this.y3 = cY + h2 * _pixi_math__WEBPACK_IMPORTED_MODULE_5__.groupD8.uY(rotate);
          } else {
            this.x0 = frame.x / tw;
            this.y0 = frame.y / th;
            this.x1 = (frame.x + frame.width) / tw;
            this.y1 = frame.y / th;
            this.x2 = (frame.x + frame.width) / tw;
            this.y2 = (frame.y + frame.height) / th;
            this.x3 = frame.x / tw;
            this.y3 = (frame.y + frame.height) / th;
          }

          this.uvsFloat32[0] = this.x0;
          this.uvsFloat32[1] = this.y0;
          this.uvsFloat32[2] = this.x1;
          this.uvsFloat32[3] = this.y1;
          this.uvsFloat32[4] = this.x2;
          this.uvsFloat32[5] = this.y2;
          this.uvsFloat32[6] = this.x3;
          this.uvsFloat32[7] = this.y3;
        };

        TextureUvs.prototype.toString = function () {
          return "[@pixi/core:TextureUvs " + ("x0=" + this.x0 + " y0=" + this.y0 + " ") + ("x1=" + this.x1 + " y1=" + this.y1 + " x2=" + this.x2 + " ") + ("y2=" + this.y2 + " x3=" + this.x3 + " y3=" + this.y3) + "]";
        };

        return TextureUvs;
      }();

      var DEFAULT_UVS = new _TextureUvs();
      /**
       * A texture stores the information that represents an image or part of an image.
       *
       * It cannot be added to the display list directly; instead use it as the texture for a Sprite.
       * If no frame is provided for a texture, then the whole image is used.
       *
       * You can directly create a texture from an image and then reuse it multiple times like this :
       *
       * ```js
       * let texture = PIXI.Texture.from('assets/image.png');
       * let sprite1 = new PIXI.Sprite(texture);
       * let sprite2 = new PIXI.Sprite(texture);
       * ```
       *
       * If you didnt pass the texture frame to constructor, it enables `noFrame` mode:
       * it subscribes on baseTexture events, it automatically resizes at the same time as baseTexture.
       *
       * Textures made from SVGs, loaded or not, cannot be used before the file finishes processing.
       * You can check for this by checking the sprite's _textureID property.
       * ```js
       * var texture = PIXI.Texture.from('assets/image.svg');
       * var sprite1 = new PIXI.Sprite(texture);
       * //sprite1._textureID should not be undefined if the texture has finished processing the SVG file
       * ```
       * You can use a ticker or rAF to ensure your sprites load the finished textures after processing. See issue #3068.
       *
       * @class
       * @extends PIXI.utils.EventEmitter
       * @memberof PIXI
       * @typeParam R - The BaseTexture's Resource type.
       */

      var _Texture =
      /** @class */
      function (_super) {
        __extends(Texture, _super);
        /**
         * @param {PIXI.BaseTexture} baseTexture - The base texture source to create the texture from
         * @param {PIXI.Rectangle} [frame] - The rectangle frame of the texture to show
         * @param {PIXI.Rectangle} [orig] - The area of original texture
         * @param {PIXI.Rectangle} [trim] - Trimmed rectangle of original texture
         * @param {number} [rotate] - indicates how the texture was rotated by texture packer. See {@link PIXI.groupD8}
         * @param {PIXI.IPointData} [anchor] - Default anchor point used for sprite placement / rotation
         */


        function Texture(baseTexture, frame, orig, trim, rotate, anchor) {
          var _this = _super.call(this) || this;
          /**
           * Does this Texture have any frame data assigned to it?
           *
           * This mode is enabled automatically if no frame was passed inside constructor.
           *
           * In this mode texture is subscribed to baseTexture events, and fires `update` on any change.
           *
           * Beware, after loading or resize of baseTexture event can fired two times!
           * If you want more control, subscribe on baseTexture itself.
           *
           * ```js
           * texture.on('update', () => {});
           * ```
           *
           * Any assignment of `frame` switches off `noFrame` mode.
           *
           * @member {boolean}
           */


          _this.noFrame = false;

          if (!frame) {
            _this.noFrame = true;
            frame = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Rectangle(0, 0, 1, 1);
          }

          if (baseTexture instanceof Texture) {
            baseTexture = baseTexture.baseTexture;
          }
          /**
           * The base texture that this texture uses.
           *
           * @member {PIXI.BaseTexture}
           */


          _this.baseTexture = baseTexture;
          /**
           * This is the area of the BaseTexture image to actually copy to the Canvas / WebGL when rendering,
           * irrespective of the actual frame size or placement (which can be influenced by trimmed texture atlases)
           *
           * @member {PIXI.Rectangle}
           */

          _this._frame = frame;
          /**
           * This is the trimmed area of original texture, before it was put in atlas
           * Please call `updateUvs()` after you change coordinates of `trim` manually.
           *
           * @member {PIXI.Rectangle}
           */

          _this.trim = trim;
          /**
           * This will let the renderer know if the texture is valid. If it's not then it cannot be rendered.
           *
           * @member {boolean}
           */

          _this.valid = false;
          /**
           * The WebGL UV data cache. Can be used as quad UV
           *
           * @member {PIXI.TextureUvs}
           * @protected
           */

          _this._uvs = DEFAULT_UVS;
          /**
           * Default TextureMatrix instance for this texture
           * By default that object is not created because its heavy
           *
           * @member {PIXI.TextureMatrix}
           */

          _this.uvMatrix = null;
          /**
           * This is the area of original texture, before it was put in atlas
           *
           * @member {PIXI.Rectangle}
           */

          _this.orig = orig || frame; // new Rectangle(0, 0, 1, 1);

          _this._rotate = Number(rotate || 0);

          if (rotate === true) {
            // this is old texturepacker legacy, some games/libraries are passing "true" for rotated textures
            _this._rotate = 2;
          } else if (_this._rotate % 2 !== 0) {
            throw new Error('attempt to use diamond-shaped UVs. If you are sure, set rotation manually');
          }
          /**
           * Anchor point that is used as default if sprite is created with this texture.
           * Changing the `defaultAnchor` at a later point of time will not update Sprite's anchor point.
           * @member {PIXI.Point}
           * @default {0,0}
           */


          _this.defaultAnchor = anchor ? new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Point(anchor.x, anchor.y) : new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Point(0, 0);
          /**
           * Update ID is observed by sprites and TextureMatrix instances.
           * Call updateUvs() to increment it.
           *
           * @member {number}
           * @protected
           */

          _this._updateID = 0;
          /**
           * The ids under which this Texture has been added to the texture cache. This is
           * automatically set as long as Texture.addToCache is used, but may not be set if a
           * Texture is added directly to the TextureCache array.
           *
           * @member {string[]}
           */

          _this.textureCacheIds = [];

          if (!baseTexture.valid) {
            baseTexture.once('loaded', _this.onBaseTextureUpdated, _this);
          } else if (_this.noFrame) {
            // if there is no frame we should monitor for any base texture changes..
            if (baseTexture.valid) {
              _this.onBaseTextureUpdated(baseTexture);
            }
          } else {
            _this.frame = frame;
          }

          if (_this.noFrame) {
            baseTexture.on('update', _this.onBaseTextureUpdated, _this);
          }

          return _this;
        }
        /**
         * Updates this texture on the gpu.
         *
         * Calls the TextureResource update.
         *
         * If you adjusted `frame` manually, please call `updateUvs()` instead.
         *
         */


        Texture.prototype.update = function () {
          if (this.baseTexture.resource) {
            this.baseTexture.resource.update();
          }
        };
        /**
         * Called when the base texture is updated
         *
         * @protected
         * @param {PIXI.BaseTexture} baseTexture - The base texture.
         */


        Texture.prototype.onBaseTextureUpdated = function (baseTexture) {
          if (this.noFrame) {
            if (!this.baseTexture.valid) {
              return;
            }

            this._frame.width = baseTexture.width;
            this._frame.height = baseTexture.height;
            this.valid = true;
            this.updateUvs();
          } else {
            // TODO this code looks confusing.. boo to abusing getters and setters!
            // if user gave us frame that has bigger size than resized texture it can be a problem
            this.frame = this._frame;
          }

          this.emit('update', this);
        };
        /**
         * Destroys this texture
         *
         * @param {boolean} [destroyBase=false] - Whether to destroy the base texture as well
         */


        Texture.prototype.destroy = function (destroyBase) {
          if (this.baseTexture) {
            if (destroyBase) {
              var resource = this.baseTexture.resource; // delete the texture if it exists in the texture cache..
              // this only needs to be removed if the base texture is actually destroyed too..

              if (resource && resource.url && _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.TextureCache[resource.url]) {
                Texture.removeFromCache(resource.url);
              }

              this.baseTexture.destroy();
            }

            this.baseTexture.off('loaded', this.onBaseTextureUpdated, this);
            this.baseTexture.off('update', this.onBaseTextureUpdated, this);
            this.baseTexture = null;
          }

          this._frame = null;
          this._uvs = null;
          this.trim = null;
          this.orig = null;
          this.valid = false;
          Texture.removeFromCache(this);
          this.textureCacheIds = null;
        };
        /**
         * Creates a new texture object that acts the same as this one.
         *
         * @return {PIXI.Texture} The new texture
         */


        Texture.prototype.clone = function () {
          var clonedFrame = this._frame.clone();

          var clonedOrig = this._frame === this.orig ? clonedFrame : this.orig.clone();
          var clonedTexture = new Texture(this.baseTexture, !this.noFrame && clonedFrame, clonedOrig, this.trim && this.trim.clone(), this.rotate, this.defaultAnchor);

          if (this.noFrame) {
            clonedTexture._frame = clonedFrame;
          }

          return clonedTexture;
        };
        /**
         * Updates the internal WebGL UV cache. Use it after you change `frame` or `trim` of the texture.
         * Call it after changing the frame
         */


        Texture.prototype.updateUvs = function () {
          if (this._uvs === DEFAULT_UVS) {
            this._uvs = new _TextureUvs();
          }

          this._uvs.set(this._frame, this.baseTexture, this.rotate);

          this._updateID++;
        };
        /**
         * Helper function that creates a new Texture based on the source you provide.
         * The source can be - frame id, image url, video url, canvas element, video element, base texture
         *
         * @static
         * @param {string|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|PIXI.BaseTexture} source -
         *        Source to create texture from
         * @param {object} [options] - See {@link PIXI.BaseTexture}'s constructor for options.
         * @param {string} [options.pixiIdPrefix=pixiid] - If a source has no id, this is the prefix of the generated id
         * @param {boolean} [strict] - Enforce strict-mode, see {@link PIXI.settings.STRICT_TEXTURE_CACHE}.
         * @return {PIXI.Texture} The newly created texture
         */


        Texture.from = function (source, options, strict) {
          if (options === void 0) {
            options = {};
          }

          if (strict === void 0) {
            strict = _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.STRICT_TEXTURE_CACHE;
          }

          var isFrame = typeof source === 'string';
          var cacheId = null;

          if (isFrame) {
            cacheId = source;
          } else if (source instanceof _BaseTexture) {
            if (!source.cacheId) {
              var prefix = options && options.pixiIdPrefix || 'pixiid';
              source.cacheId = prefix + "-" + (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.uid)();

              _BaseTexture.addToCache(source, source.cacheId);
            }

            cacheId = source.cacheId;
          } else {
            if (!source._pixiId) {
              var prefix = options && options.pixiIdPrefix || 'pixiid';
              source._pixiId = prefix + "_" + (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.uid)();
            }

            cacheId = source._pixiId;
          }

          var texture = _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.TextureCache[cacheId]; // Strict-mode rejects invalid cacheIds

          if (isFrame && strict && !texture) {
            throw new Error("The cacheId \"" + cacheId + "\" does not exist in TextureCache.");
          }

          if (!texture && !(source instanceof _BaseTexture)) {
            if (!options.resolution) {
              options.resolution = (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.getResolutionOfUrl)(source);
            }

            texture = new Texture(new _BaseTexture(source, options));
            texture.baseTexture.cacheId = cacheId;

            _BaseTexture.addToCache(texture.baseTexture, cacheId);

            Texture.addToCache(texture, cacheId);
          } else if (!texture && source instanceof _BaseTexture) {
            texture = new Texture(source);
            Texture.addToCache(texture, cacheId);
          } // lets assume its a base texture!


          return texture;
        };
        /**
         * Useful for loading textures via URLs. Use instead of `Texture.from` because
         * it does a better job of handling failed URLs more effectively. This also ignores
         * `PIXI.settings.STRICT_TEXTURE_CACHE`. Works for Videos, SVGs, Images.
         * @param {string} url - The remote URL to load.
         * @param {object} [options] - Optional options to include
         * @return {Promise<PIXI.Texture>} A Promise that resolves to a Texture.
         */


        Texture.fromURL = function (url, options) {
          var resourceOptions = Object.assign({
            autoLoad: false
          }, options === null || options === void 0 ? void 0 : options.resourceOptions);
          var texture = Texture.from(url, Object.assign({
            resourceOptions: resourceOptions
          }, options), false);
          var resource = texture.baseTexture.resource; // The texture was already loaded

          if (texture.baseTexture.valid) {
            return Promise.resolve(texture);
          } // Manually load the texture, this should allow users to handle load errors


          return resource.load().then(function () {
            return Promise.resolve(texture);
          });
        };
        /**
         * Create a new Texture with a BufferResource from a Float32Array.
         * RGBA values are floats from 0 to 1.
         * @static
         * @param {Float32Array|Uint8Array} buffer - The optional array to use, if no data
         *        is provided, a new Float32Array is created.
         * @param {number} width - Width of the resource
         * @param {number} height - Height of the resource
         * @param {object} [options] - See {@link PIXI.BaseTexture}'s constructor for options.
         * @return {PIXI.Texture} The resulting new BaseTexture
         */


        Texture.fromBuffer = function (buffer, width, height, options) {
          return new Texture(_BaseTexture.fromBuffer(buffer, width, height, options));
        };
        /**
         * Create a texture from a source and add to the cache.
         *
         * @static
         * @param {HTMLImageElement|HTMLCanvasElement|string} source - The input source.
         * @param {String} imageUrl - File name of texture, for cache and resolving resolution.
         * @param {String} [name] - Human readable name for the texture cache. If no name is
         *        specified, only `imageUrl` will be used as the cache ID.
         * @return {PIXI.Texture} Output texture
         */


        Texture.fromLoader = function (source, imageUrl, name, options) {
          var baseTexture = new _BaseTexture(source, Object.assign({
            scaleMode: _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.SCALE_MODE,
            resolution: (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.getResolutionOfUrl)(imageUrl)
          }, options));
          var resource = baseTexture.resource;

          if (resource instanceof _ImageResource) {
            resource.url = imageUrl;
          }

          var texture = new Texture(baseTexture); // No name, use imageUrl instead

          if (!name) {
            name = imageUrl;
          } // lets also add the frame to pixi's global cache for 'fromLoader' function


          _BaseTexture.addToCache(texture.baseTexture, name);

          Texture.addToCache(texture, name); // also add references by url if they are different.

          if (name !== imageUrl) {
            _BaseTexture.addToCache(texture.baseTexture, imageUrl);

            Texture.addToCache(texture, imageUrl);
          } // Generally images are valid right away


          if (texture.baseTexture.valid) {
            return Promise.resolve(texture);
          } // SVG assets need to be parsed async, let's wait


          return new Promise(function (resolve) {
            texture.baseTexture.once('loaded', function () {
              return resolve(texture);
            });
          });
        };
        /**
         * Adds a Texture to the global TextureCache. This cache is shared across the whole PIXI object.
         *
         * @static
         * @param {PIXI.Texture} texture - The Texture to add to the cache.
         * @param {string} id - The id that the Texture will be stored against.
         */


        Texture.addToCache = function (texture, id) {
          if (id) {
            if (texture.textureCacheIds.indexOf(id) === -1) {
              texture.textureCacheIds.push(id);
            }

            if (_pixi_utils__WEBPACK_IMPORTED_MODULE_2__.TextureCache[id]) {
              // eslint-disable-next-line no-console
              console.warn("Texture added to the cache with an id [" + id + "] that already had an entry");
            }

            _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.TextureCache[id] = texture;
          }
        };
        /**
         * Remove a Texture from the global TextureCache.
         *
         * @static
         * @param {string|PIXI.Texture} texture - id of a Texture to be removed, or a Texture instance itself
         * @return {PIXI.Texture|null} The Texture that was removed
         */


        Texture.removeFromCache = function (texture) {
          if (typeof texture === 'string') {
            var textureFromCache = _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.TextureCache[texture];

            if (textureFromCache) {
              var index = textureFromCache.textureCacheIds.indexOf(texture);

              if (index > -1) {
                textureFromCache.textureCacheIds.splice(index, 1);
              }

              delete _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.TextureCache[texture];
              return textureFromCache;
            }
          } else if (texture && texture.textureCacheIds) {
            for (var i = 0; i < texture.textureCacheIds.length; ++i) {
              // Check that texture matches the one being passed in before deleting it from the cache.
              if (_pixi_utils__WEBPACK_IMPORTED_MODULE_2__.TextureCache[texture.textureCacheIds[i]] === texture) {
                delete _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.TextureCache[texture.textureCacheIds[i]];
              }
            }

            texture.textureCacheIds.length = 0;
            return texture;
          }

          return null;
        };

        Object.defineProperty(Texture.prototype, "resolution", {
          /**
           * Returns resolution of baseTexture
           *
           * @member {number}
           * @readonly
           */
          get: function get() {
            return this.baseTexture.resolution;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Texture.prototype, "frame", {
          /**
           * The frame specifies the region of the base texture that this texture uses.
           * Please call `updateUvs()` after you change coordinates of `frame` manually.
           *
           * @member {PIXI.Rectangle}
           */
          get: function get() {
            return this._frame;
          },
          set: function set(frame) {
            this._frame = frame;
            this.noFrame = false;
            var x = frame.x,
                y = frame.y,
                width = frame.width,
                height = frame.height;
            var xNotFit = x + width > this.baseTexture.width;
            var yNotFit = y + height > this.baseTexture.height;

            if (xNotFit || yNotFit) {
              var relationship = xNotFit && yNotFit ? 'and' : 'or';
              var errorX = "X: " + x + " + " + width + " = " + (x + width) + " > " + this.baseTexture.width;
              var errorY = "Y: " + y + " + " + height + " = " + (y + height) + " > " + this.baseTexture.height;
              throw new Error('Texture Error: frame does not fit inside the base Texture dimensions: ' + (errorX + " " + relationship + " " + errorY));
            }

            this.valid = width && height && this.baseTexture.valid;

            if (!this.trim && !this.rotate) {
              this.orig = frame;
            }

            if (this.valid) {
              this.updateUvs();
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Texture.prototype, "rotate", {
          /**
           * Indicates whether the texture is rotated inside the atlas
           * set to 2 to compensate for texture packer rotation
           * set to 6 to compensate for spine packer rotation
           * can be used to rotate or mirror sprites
           * See {@link PIXI.groupD8} for explanation
           *
           * @member {number}
           */
          get: function get() {
            return this._rotate;
          },
          set: function set(rotate) {
            this._rotate = rotate;

            if (this.valid) {
              this.updateUvs();
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Texture.prototype, "width", {
          /**
           * The width of the Texture in pixels.
           *
           * @member {number}
           */
          get: function get() {
            return this.orig.width;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Texture.prototype, "height", {
          /**
           * The height of the Texture in pixels.
           *
           * @member {number}
           */
          get: function get() {
            return this.orig.height;
          },
          enumerable: false,
          configurable: true
        });
        /**
         * Utility function for BaseTexture|Texture cast
         */

        Texture.prototype.castToBaseTexture = function () {
          return this.baseTexture;
        };

        return Texture;
      }(_pixi_utils__WEBPACK_IMPORTED_MODULE_2__.EventEmitter);

      function createWhiteTexture() {
        var canvas = document.createElement('canvas');
        canvas.width = 16;
        canvas.height = 16;
        var context = canvas.getContext('2d');
        context.fillStyle = 'white';
        context.fillRect(0, 0, 16, 16);
        return new _Texture(new _BaseTexture(new _CanvasResource(canvas)));
      }

      function removeAllHandlers(tex) {
        tex.destroy = function _emptyDestroy() {};

        tex.on = function _emptyOn() {};

        tex.once = function _emptyOnce() {};

        tex.emit = function _emptyEmit() {};
      }
      /**
       * An empty texture, used often to not have to create multiple empty textures.
       * Can not be destroyed.
       *
       * @static
       * @constant
       * @member {PIXI.Texture}
       */


      _Texture.EMPTY = new _Texture(new _BaseTexture());
      removeAllHandlers(_Texture.EMPTY);
      removeAllHandlers(_Texture.EMPTY.baseTexture);
      /**
       * A white texture of 16x16 size, used for graphics and other things
       * Can not be destroyed.
       *
       * @static
       * @constant
       * @member {PIXI.Texture}
       */

      _Texture.WHITE = createWhiteTexture();
      removeAllHandlers(_Texture.WHITE);
      removeAllHandlers(_Texture.WHITE.baseTexture);
      /**
       * A RenderTexture is a special texture that allows any PixiJS display object to be rendered to it.
       *
       * __Hint__: All DisplayObjects (i.e. Sprites) that render to a RenderTexture should be preloaded
       * otherwise black rectangles will be drawn instead.
       *
       * __Hint-2__: The actual memory allocation will happen on first render.
       * You shouldn't create renderTextures each frame just to delete them after, try to reuse them.
       *
       * A RenderTexture takes a snapshot of any Display Object given to its render method. For example:
       *
       * ```js
       * let renderer = PIXI.autoDetectRenderer();
       * let renderTexture = PIXI.RenderTexture.create({ width: 800, height: 600 });
       * let sprite = PIXI.Sprite.from("spinObj_01.png");
       *
       * sprite.position.x = 800/2;
       * sprite.position.y = 600/2;
       * sprite.anchor.x = 0.5;
       * sprite.anchor.y = 0.5;
       *
       * renderer.render(sprite, {renderTexture});
       * ```
       * Note that you should not create a new renderer, but reuse the same one as the rest of the application.
       *
       * The Sprite in this case will be rendered using its local transform. To render this sprite at 0,0
       * you can clear the transform
       *
       * ```js
       *
       * sprite.setTransform()
       *
       * let renderTexture = new PIXI.RenderTexture.create({ width: 100, height: 100 });
       *
       * renderer.render(sprite, {renderTexture});  // Renders to center of RenderTexture
       * ```
       *
       * @memberof PIXI
       */

      var _RenderTexture =
      /** @class */
      function (_super) {
        __extends(RenderTexture, _super);
        /**
         * @param baseRenderTexture - The base texture object that this texture uses.
         * @param frame - The rectangle frame of the texture to show.
         */


        function RenderTexture(baseRenderTexture, frame) {
          var _this = _super.call(this, baseRenderTexture, frame) || this;

          _this.valid = true;
          _this.filterFrame = null;
          _this.filterPoolKey = null;

          _this.updateUvs();

          return _this;
        }

        Object.defineProperty(RenderTexture.prototype, "framebuffer", {
          /**
           * Shortcut to `this.baseTexture.framebuffer`, saves baseTexture cast.
           *
           * @readonly
           */
          get: function get() {
            return this.baseTexture.framebuffer;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(RenderTexture.prototype, "multisample", {
          /**
           * Shortcut to `this.framebuffer.multisample`.
           *
           * @default PIXI.MSAA_QUALITY.NONE
           */
          get: function get() {
            return this.framebuffer.multisample;
          },
          set: function set(value) {
            this.framebuffer.multisample = value;
          },
          enumerable: false,
          configurable: true
        });
        /**
         * Resizes the RenderTexture.
         *
         * @param desiredWidth - The desired width to resize to.
         * @param desiredHeight - The desired height to resize to.
         * @param resizeBaseTexture - Should the baseTexture.width and height values be resized as well?
         */

        RenderTexture.prototype.resize = function (desiredWidth, desiredHeight, resizeBaseTexture) {
          if (resizeBaseTexture === void 0) {
            resizeBaseTexture = true;
          }

          var resolution = this.baseTexture.resolution;
          var width = Math.round(desiredWidth * resolution) / resolution;
          var height = Math.round(desiredHeight * resolution) / resolution; // TODO - could be not required..

          this.valid = width > 0 && height > 0;
          this._frame.width = this.orig.width = width;
          this._frame.height = this.orig.height = height;

          if (resizeBaseTexture) {
            this.baseTexture.resize(width, height);
          }

          this.updateUvs();
        };
        /**
         * Changes the resolution of baseTexture, but does not change framebuffer size.
         *
         * @param resolution - The new resolution to apply to RenderTexture
         */


        RenderTexture.prototype.setResolution = function (resolution) {
          var baseTexture = this.baseTexture;

          if (baseTexture.resolution === resolution) {
            return;
          }

          baseTexture.setResolution(resolution);
          this.resize(baseTexture.width, baseTexture.height, false);
        };

        RenderTexture.create = function (options) {
          var arguments$1 = arguments;
          var rest = [];

          for (var _i = 1; _i < arguments.length; _i++) {
            rest[_i - 1] = arguments$1[_i];
          } // @deprecated fallback, old-style: create(width, height, scaleMode, resolution)


          if (typeof options === 'number') {
            (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.deprecation)('6.0.0', 'Arguments (width, height, scaleMode, resolution) have been deprecated.');
            /* eslint-disable prefer-rest-params */

            options = {
              width: options,
              height: rest[0],
              scaleMode: rest[1],
              resolution: rest[2]
            };
            /* eslint-enable prefer-rest-params */
          }

          return new RenderTexture(new _BaseRenderTexture(options));
        };

        return RenderTexture;
      }(_Texture);
      /**
       * Texture pool, used by FilterSystem and plugins.
       *
       * Stores collection of temporary pow2 or screen-sized renderTextures
       *
       * If you use custom RenderTexturePool for your filters, you can use methods
       * `getFilterTexture` and `returnFilterTexture` same as in
       *
       * @memberof PIXI
       */


      var _RenderTexturePool =
      /** @class */
      function () {
        /**
         * @param textureOptions - options that will be passed to BaseRenderTexture constructor
         * @param {PIXI.SCALE_MODES} [textureOptions.scaleMode] - See {@link PIXI.SCALE_MODES} for possible values.
         */
        function RenderTexturePool(textureOptions) {
          this.texturePool = {};
          this.textureOptions = textureOptions || {};
          this.enableFullScreen = false;
          this._pixelsWidth = 0;
          this._pixelsHeight = 0;
        }
        /**
         * Creates texture with params that were specified in pool constructor.
         *
         * @param realWidth - Width of texture in pixels.
         * @param realHeight - Height of texture in pixels.
         * @param multisample - Number of samples of the framebuffer.
         */


        RenderTexturePool.prototype.createTexture = function (realWidth, realHeight, multisample) {
          if (multisample === void 0) {
            multisample = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MSAA_QUALITY.NONE;
          }

          var baseRenderTexture = new _BaseRenderTexture(Object.assign({
            width: realWidth,
            height: realHeight,
            resolution: 1,
            multisample: multisample
          }, this.textureOptions));
          return new _RenderTexture(baseRenderTexture);
        };
        /**
         * Gets a Power-of-Two render texture or fullScreen texture
         *
         * @param minWidth - The minimum width of the render texture.
         * @param minHeight - The minimum height of the render texture.
         * @param resolution - The resolution of the render texture.
         * @param multisample - Number of samples of the render texture.
         * @return The new render texture.
         */


        RenderTexturePool.prototype.getOptimalTexture = function (minWidth, minHeight, resolution, multisample) {
          if (resolution === void 0) {
            resolution = 1;
          }

          if (multisample === void 0) {
            multisample = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MSAA_QUALITY.NONE;
          }

          var key;
          minWidth = Math.ceil(minWidth * resolution);
          minHeight = Math.ceil(minHeight * resolution);

          if (!this.enableFullScreen || minWidth !== this._pixelsWidth || minHeight !== this._pixelsHeight) {
            minWidth = (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.nextPow2)(minWidth);
            minHeight = (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.nextPow2)(minHeight);
            key = ((minWidth & 0xFFFF) << 16 | minHeight & 0xFFFF) >>> 0;

            if (multisample > 1) {
              key += multisample * 0x100000000;
            }
          } else {
            key = multisample > 1 ? -multisample : -1;
          }

          if (!this.texturePool[key]) {
            this.texturePool[key] = [];
          }

          var renderTexture = this.texturePool[key].pop();

          if (!renderTexture) {
            renderTexture = this.createTexture(minWidth, minHeight, multisample);
          }

          renderTexture.filterPoolKey = key;
          renderTexture.setResolution(resolution);
          return renderTexture;
        };
        /**
         * Gets extra texture of the same size as input renderTexture
         *
         * `getFilterTexture(input, 0.5)` or `getFilterTexture(0.5, input)`
         *
         * @param input - renderTexture from which size and resolution will be copied
         * @param resolution - override resolution of the renderTexture
         *  It overrides, it does not multiply
         * @param multisample - number of samples of the renderTexture
         * @returns
         */


        RenderTexturePool.prototype.getFilterTexture = function (input, resolution, multisample) {
          var filterTexture = this.getOptimalTexture(input.width, input.height, resolution || input.resolution, multisample || _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MSAA_QUALITY.NONE);
          filterTexture.filterFrame = input.filterFrame;
          return filterTexture;
        };
        /**
         * Place a render texture back into the pool.
         *
         * @param renderTexture - The renderTexture to free
         */


        RenderTexturePool.prototype.returnTexture = function (renderTexture) {
          var key = renderTexture.filterPoolKey;
          renderTexture.filterFrame = null;
          this.texturePool[key].push(renderTexture);
        };
        /**
         * Alias for returnTexture, to be compliant with FilterSystem interface.
         *
         * @param renderTexture - The renderTexture to free
         */


        RenderTexturePool.prototype.returnFilterTexture = function (renderTexture) {
          this.returnTexture(renderTexture);
        };
        /**
         * Clears the pool.
         *
         * @param destroyTextures - Destroy all stored textures.
         */


        RenderTexturePool.prototype.clear = function (destroyTextures) {
          destroyTextures = destroyTextures !== false;

          if (destroyTextures) {
            for (var i in this.texturePool) {
              var textures = this.texturePool[i];

              if (textures) {
                for (var j = 0; j < textures.length; j++) {
                  textures[j].destroy(true);
                }
              }
            }
          }

          this.texturePool = {};
        };
        /**
         * If screen size was changed, drops all screen-sized textures,
         * sets new screen size, sets `enableFullScreen` to true
         *
         * Size is measured in pixels, `renderer.view` can be passed here, not `renderer.screen`
         *
         * @param size - Initial size of screen.
         */


        RenderTexturePool.prototype.setScreenSize = function (size) {
          if (size.width === this._pixelsWidth && size.height === this._pixelsHeight) {
            return;
          }

          this.enableFullScreen = size.width > 0 && size.height > 0;

          for (var i in this.texturePool) {
            if (!(Number(i) < 0)) {
              continue;
            }

            var textures = this.texturePool[i];

            if (textures) {
              for (var j = 0; j < textures.length; j++) {
                textures[j].destroy(true);
              }
            }

            this.texturePool[i] = [];
          }

          this._pixelsWidth = size.width;
          this._pixelsHeight = size.height;
        };
        /**
         * Key that is used to store fullscreen renderTextures in a pool
         *
         * @constant
         */


        RenderTexturePool.SCREEN_KEY = -1;
        return RenderTexturePool;
      }();
      /* eslint-disable max-len */

      /**
       * Holds the information for a single attribute structure required to render geometry.
       *
       * This does not contain the actual data, but instead has a buffer id that maps to a {@link PIXI.Buffer}
       * This can include anything from positions, uvs, normals, colors etc.
       *
       * @class
       * @memberof PIXI
       */


      var _Attribute =
      /** @class */
      function () {
        /**
         * @param {string} buffer - the id of the buffer that this attribute will look for
         * @param {Number} [size=0] - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2.
         * @param {Boolean} [normalized=false] - should the data be normalized.
         * @param {PIXI.TYPES} [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {@link PIXI.TYPES} to see the ones available
         * @param {Number} [stride=0] - How far apart, in bytes, the start of each value is. (used for interleaving data)
         * @param {Number} [start=0] - How far into the array to start reading values (used for interleaving data)
         */
        function Attribute(buffer, size, normalized, type, stride, start, instance) {
          if (size === void 0) {
            size = 0;
          }

          if (normalized === void 0) {
            normalized = false;
          }

          if (type === void 0) {
            type = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.FLOAT;
          }

          this.buffer = buffer;
          this.size = size;
          this.normalized = normalized;
          this.type = type;
          this.stride = stride;
          this.start = start;
          this.instance = instance;
        }
        /**
         * Destroys the Attribute.
         */


        Attribute.prototype.destroy = function () {
          this.buffer = null;
        };
        /**
         * Helper function that creates an Attribute based on the information provided
         *
         * @static
         * @param {string} buffer - the id of the buffer that this attribute will look for
         * @param {Number} [size=0] - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2
         * @param {Boolean} [normalized=false] - should the data be normalized.
         * @param {PIXI.TYPES} [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {@link PIXI.TYPES} to see the ones available
         * @param {Number} [stride=0] - How far apart, in bytes, the start of each value is. (used for interleaving data)
         *
         * @returns {PIXI.Attribute} A new {@link PIXI.Attribute} based on the information provided
         */


        Attribute.from = function (buffer, size, normalized, type, stride) {
          return new Attribute(buffer, size, normalized, type, stride);
        };

        return Attribute;
      }();

      var UID = 0;
      /**
       * A wrapper for data so that it can be used and uploaded by WebGL
       *
       * @class
       * @memberof PIXI
       */

      var _Buffer =
      /** @class */
      function () {
        /**
         * @param {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} data - the data to store in the buffer.
         * @param {boolean} [_static=true] - `true` for static buffer
         * @param {boolean} [index=false] - `true` for index buffer
         */
        function Buffer(data, _static, index) {
          if (_static === void 0) {
            _static = true;
          }

          if (index === void 0) {
            index = false;
          }
          /**
           * The data in the buffer, as a typed array
           *
           * @member {ArrayBuffer| SharedArrayBuffer | ArrayBufferView}
           */


          this.data = data || new Float32Array(1);
          /**
           * A map of renderer IDs to webgl buffer
           *
           * @private
           * @member {object<number, GLBuffer>}
           */

          this._glBuffers = {};
          this._updateID = 0;
          this.index = index;
          this["static"] = _static;
          this.id = UID++;
          this.disposeRunner = new _pixi_runner__WEBPACK_IMPORTED_MODULE_3__.Runner('disposeBuffer');
        } // TODO could explore flagging only a partial upload?

        /**
         * flags this buffer as requiring an upload to the GPU
         * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView|number[]} [data] - the data to update in the buffer.
         */


        Buffer.prototype.update = function (data) {
          if (data instanceof Array) {
            data = new Float32Array(data);
          }

          this.data = data || this.data;
          this._updateID++;
        };
        /**
         * disposes WebGL resources that are connected to this geometry
         */


        Buffer.prototype.dispose = function () {
          this.disposeRunner.emit(this, false);
        };
        /**
         * Destroys the buffer
         */


        Buffer.prototype.destroy = function () {
          this.dispose();
          this.data = null;
        };

        Object.defineProperty(Buffer.prototype, "index", {
          get: function get() {
            return this.type === _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;
          },

          /**
           * Flags whether this is an index buffer.
           *
           * Index buffers are of type `ELEMENT_ARRAY_BUFFER`. Note that setting this property to false will make
           * the buffer of type `ARRAY_BUFFER`.
           *
           * For backwards compatibility.
           */
          set: function set(value) {
            this.type = value ? _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BUFFER_TYPE.ELEMENT_ARRAY_BUFFER : _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BUFFER_TYPE.ARRAY_BUFFER;
          },
          enumerable: false,
          configurable: true
        });
        /**
         * Helper function that creates a buffer based on an array or TypedArray
         *
         * @static
         * @param {ArrayBufferView | number[]} data - the TypedArray that the buffer will store. If this is a regular Array it will be converted to a Float32Array.
         * @return {PIXI.Buffer} A new Buffer based on the data provided.
         */

        Buffer.from = function (data) {
          if (data instanceof Array) {
            data = new Float32Array(data);
          }

          return new Buffer(data);
        };

        return Buffer;
      }();
      /* eslint-disable object-shorthand */


      var map = {
        Float32Array: Float32Array,
        Uint32Array: Uint32Array,
        Int32Array: Int32Array,
        Uint8Array: Uint8Array
      };

      function interleaveTypedArrays(arrays, sizes) {
        var outSize = 0;
        var stride = 0;
        var views = {};

        for (var i = 0; i < arrays.length; i++) {
          stride += sizes[i];
          outSize += arrays[i].length;
        }

        var buffer = new ArrayBuffer(outSize * 4);
        var out = null;
        var littleOffset = 0;

        for (var i = 0; i < arrays.length; i++) {
          var size = sizes[i];
          var array = arrays[i];
          var type = (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.getBufferType)(array);

          if (!views[type]) {
            views[type] = new map[type](buffer);
          }

          out = views[type];

          for (var j = 0; j < array.length; j++) {
            var indexStart = (j / size | 0) * stride + littleOffset;
            var index = j % size;
            out[indexStart + index] = array[j];
          }

          littleOffset += size;
        }

        return new Float32Array(buffer);
      }

      var byteSizeMap = {
        5126: 4,
        5123: 2,
        5121: 1
      };
      var UID$1 = 0;
      /* eslint-disable object-shorthand */

      var map$1 = {
        Float32Array: Float32Array,
        Uint32Array: Uint32Array,
        Int32Array: Int32Array,
        Uint8Array: Uint8Array,
        Uint16Array: Uint16Array
      };
      /* eslint-disable max-len */

      /**
       * The Geometry represents a model. It consists of two components:
       * - GeometryStyle - The structure of the model such as the attributes layout
       * - GeometryData - the data of the model - this consists of buffers.
       * This can include anything from positions, uvs, normals, colors etc.
       *
       * Geometry can be defined without passing in a style or data if required (thats how I prefer!)
       *
       * ```js
       * let geometry = new PIXI.Geometry();
       *
       * geometry.addAttribute('positions', [0, 0, 100, 0, 100, 100, 0, 100], 2);
       * geometry.addAttribute('uvs', [0,0,1,0,1,1,0,1],2)
       * geometry.addIndex([0,1,2,1,3,2])
       *
       * ```
       * @class
       * @memberof PIXI
       */

      var _Geometry =
      /** @class */
      function () {
        /**
         * @param {PIXI.Buffer[]} [buffers] - an array of buffers. optional.
         * @param {object} [attributes] - of the geometry, optional structure of the attributes layout
         */
        function Geometry(buffers, attributes) {
          if (buffers === void 0) {
            buffers = [];
          }

          if (attributes === void 0) {
            attributes = {};
          }

          this.buffers = buffers;
          this.indexBuffer = null;
          this.attributes = attributes;
          /**
           * A map of renderer IDs to webgl VAOs
           *
           * @protected
           * @type {object}
           */

          this.glVertexArrayObjects = {};
          this.id = UID$1++;
          this.instanced = false;
          /**
           * Number of instances in this geometry, pass it to `GeometrySystem.draw()`
           * @member {number}
           * @default 1
           */

          this.instanceCount = 1;
          this.disposeRunner = new _pixi_runner__WEBPACK_IMPORTED_MODULE_3__.Runner('disposeGeometry');
          /**
           * Count of existing (not destroyed) meshes that reference this geometry
           * @member {number}
           */

          this.refCount = 0;
        }
        /**
        *
        * Adds an attribute to the geometry
        * Note: `stride` and `start` should be `undefined` if you dont know them, not 0!
        *
        * @param {String} id - the name of the attribute (matching up to a shader)
        * @param {PIXI.Buffer|number[]} buffer - the buffer that holds the data of the attribute . You can also provide an Array and a buffer will be created from it.
        * @param {Number} [size=0] - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2
        * @param {Boolean} [normalized=false] - should the data be normalized.
        * @param {PIXI.TYPES} [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {PIXI.TYPES} to see the ones available
        * @param {Number} [stride] - How far apart, in bytes, the start of each value is. (used for interleaving data)
        * @param {Number} [start] - How far into the array to start reading values (used for interleaving data)
        * @param {boolean} [instance=false] - Instancing flag
        *
        * @return {PIXI.Geometry} returns self, useful for chaining.
        */


        Geometry.prototype.addAttribute = function (id, buffer, size, normalized, type, stride, start, instance) {
          if (size === void 0) {
            size = 0;
          }

          if (normalized === void 0) {
            normalized = false;
          }

          if (instance === void 0) {
            instance = false;
          }

          if (!buffer) {
            throw new Error('You must pass a buffer when creating an attribute');
          } // check if this is a buffer!


          if (!(buffer instanceof _Buffer)) {
            // its an array!
            if (buffer instanceof Array) {
              buffer = new Float32Array(buffer);
            }

            buffer = new _Buffer(buffer);
          }

          var ids = id.split('|');

          if (ids.length > 1) {
            for (var i = 0; i < ids.length; i++) {
              this.addAttribute(ids[i], buffer, size, normalized, type);
            }

            return this;
          }

          var bufferIndex = this.buffers.indexOf(buffer);

          if (bufferIndex === -1) {
            this.buffers.push(buffer);
            bufferIndex = this.buffers.length - 1;
          }

          this.attributes[id] = new _Attribute(bufferIndex, size, normalized, type, stride, start, instance); // assuming that if there is instanced data then this will be drawn with instancing!

          this.instanced = this.instanced || instance;
          return this;
        };
        /**
         * returns the requested attribute
         *
         * @param {String} id - the name of the attribute required
         * @return {PIXI.Attribute} the attribute requested.
         */


        Geometry.prototype.getAttribute = function (id) {
          return this.attributes[id];
        };
        /**
         * returns the requested buffer
         *
         * @param {String} id - the name of the buffer required
         * @return {PIXI.Buffer} the buffer requested.
         */


        Geometry.prototype.getBuffer = function (id) {
          return this.buffers[this.getAttribute(id).buffer];
        };
        /**
        *
        * Adds an index buffer to the geometry
        * The index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.
        *
        * @param {PIXI.Buffer|number[]} [buffer] - the buffer that holds the data of the index buffer. You can also provide an Array and a buffer will be created from it.
        * @return {PIXI.Geometry} returns self, useful for chaining.
        */


        Geometry.prototype.addIndex = function (buffer) {
          if (!(buffer instanceof _Buffer)) {
            // its an array!
            if (buffer instanceof Array) {
              buffer = new Uint16Array(buffer);
            }

            buffer = new _Buffer(buffer);
          }

          buffer.type = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;
          this.indexBuffer = buffer;

          if (this.buffers.indexOf(buffer) === -1) {
            this.buffers.push(buffer);
          }

          return this;
        };
        /**
         * returns the index buffer
         *
         * @return {PIXI.Buffer} the index buffer.
         */


        Geometry.prototype.getIndex = function () {
          return this.indexBuffer;
        };
        /**
         * this function modifies the structure so that all current attributes become interleaved into a single buffer
         * This can be useful if your model remains static as it offers a little performance boost
         *
         * @return {PIXI.Geometry} returns self, useful for chaining.
         */


        Geometry.prototype.interleave = function () {
          // a simple check to see if buffers are already interleaved..
          if (this.buffers.length === 1 || this.buffers.length === 2 && this.indexBuffer) {
            return this;
          } // assume already that no buffers are interleaved


          var arrays = [];
          var sizes = [];
          var interleavedBuffer = new _Buffer();
          var i;

          for (i in this.attributes) {
            var attribute = this.attributes[i];
            var buffer = this.buffers[attribute.buffer];
            arrays.push(buffer.data);
            sizes.push(attribute.size * byteSizeMap[attribute.type] / 4);
            attribute.buffer = 0;
          }

          interleavedBuffer.data = interleaveTypedArrays(arrays, sizes);

          for (i = 0; i < this.buffers.length; i++) {
            if (this.buffers[i] !== this.indexBuffer) {
              this.buffers[i].destroy();
            }
          }

          this.buffers = [interleavedBuffer];

          if (this.indexBuffer) {
            this.buffers.push(this.indexBuffer);
          }

          return this;
        };

        Geometry.prototype.getSize = function () {
          for (var i in this.attributes) {
            var attribute = this.attributes[i];
            var buffer = this.buffers[attribute.buffer];
            return buffer.data.length / (attribute.stride / 4 || attribute.size);
          }

          return 0;
        };
        /**
         * disposes WebGL resources that are connected to this geometry
         */


        Geometry.prototype.dispose = function () {
          this.disposeRunner.emit(this, false);
        };
        /**
         * Destroys the geometry.
         */


        Geometry.prototype.destroy = function () {
          this.dispose();
          this.buffers = null;
          this.indexBuffer = null;
          this.attributes = null;
        };
        /**
         * returns a clone of the geometry
         *
         * @returns {PIXI.Geometry} a new clone of this geometry
         */


        Geometry.prototype.clone = function () {
          var geometry = new Geometry();

          for (var i = 0; i < this.buffers.length; i++) {
            geometry.buffers[i] = new _Buffer(this.buffers[i].data.slice(0));
          }

          for (var i in this.attributes) {
            var attrib = this.attributes[i];
            geometry.attributes[i] = new _Attribute(attrib.buffer, attrib.size, attrib.normalized, attrib.type, attrib.stride, attrib.start, attrib.instance);
          }

          if (this.indexBuffer) {
            geometry.indexBuffer = geometry.buffers[this.buffers.indexOf(this.indexBuffer)];
            geometry.indexBuffer.type = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;
          }

          return geometry;
        };
        /**
         * merges an array of geometries into a new single one
         * geometry attribute styles must match for this operation to work
         *
         * @param {PIXI.Geometry[]} geometries - array of geometries to merge
         * @returns {PIXI.Geometry} shiny new geometry!
         */


        Geometry.merge = function (geometries) {
          // todo add a geometry check!
          // also a size check.. cant be too big!]
          var geometryOut = new Geometry();
          var arrays = [];
          var sizes = [];
          var offsets = [];
          var geometry; // pass one.. get sizes..

          for (var i = 0; i < geometries.length; i++) {
            geometry = geometries[i];

            for (var j = 0; j < geometry.buffers.length; j++) {
              sizes[j] = sizes[j] || 0;
              sizes[j] += geometry.buffers[j].data.length;
              offsets[j] = 0;
            }
          } // build the correct size arrays..


          for (var i = 0; i < geometry.buffers.length; i++) {
            // TODO types!
            arrays[i] = new map$1[(0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.getBufferType)(geometry.buffers[i].data)](sizes[i]);
            geometryOut.buffers[i] = new _Buffer(arrays[i]);
          } // pass to set data..


          for (var i = 0; i < geometries.length; i++) {
            geometry = geometries[i];

            for (var j = 0; j < geometry.buffers.length; j++) {
              arrays[j].set(geometry.buffers[j].data, offsets[j]);
              offsets[j] += geometry.buffers[j].data.length;
            }
          }

          geometryOut.attributes = geometry.attributes;

          if (geometry.indexBuffer) {
            geometryOut.indexBuffer = geometryOut.buffers[geometry.buffers.indexOf(geometry.indexBuffer)];
            geometryOut.indexBuffer.type = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;
            var offset = 0;
            var stride = 0;
            var offset2 = 0;
            var bufferIndexToCount = 0; // get a buffer

            for (var i = 0; i < geometry.buffers.length; i++) {
              if (geometry.buffers[i] !== geometry.indexBuffer) {
                bufferIndexToCount = i;
                break;
              }
            } // figure out the stride of one buffer..


            for (var i in geometry.attributes) {
              var attribute = geometry.attributes[i];

              if ((attribute.buffer | 0) === bufferIndexToCount) {
                stride += attribute.size * byteSizeMap[attribute.type] / 4;
              }
            } // time to off set all indexes..


            for (var i = 0; i < geometries.length; i++) {
              var indexBufferData = geometries[i].indexBuffer.data;

              for (var j = 0; j < indexBufferData.length; j++) {
                geometryOut.indexBuffer.data[j + offset2] += offset;
              }

              offset += geometries[i].buffers[bufferIndexToCount].data.length / stride;
              offset2 += indexBufferData.length;
            }
          }

          return geometryOut;
        };

        return Geometry;
      }();
      /**
       * Helper class to create a quad
       *
       * @class
       * @memberof PIXI
       */


      var _Quad =
      /** @class */
      function (_super) {
        __extends(Quad, _super);

        function Quad() {
          var _this = _super.call(this) || this;

          _this.addAttribute('aVertexPosition', new Float32Array([0, 0, 1, 0, 1, 1, 0, 1])).addIndex([0, 1, 3, 2]);

          return _this;
        }

        return Quad;
      }(_Geometry);
      /**
       * Helper class to create a quad with uvs like in v4
       *
       * @class
       * @memberof PIXI
       * @extends PIXI.Geometry
       */


      var _QuadUv =
      /** @class */
      function (_super) {
        __extends(QuadUv, _super);

        function QuadUv() {
          var _this = _super.call(this) || this;
          /**
           * An array of vertices
           *
           * @member {Float32Array}
           */


          _this.vertices = new Float32Array([-1, -1, 1, -1, 1, 1, -1, 1]);
          /**
           * The Uvs of the quad
           *
           * @member {Float32Array}
           */

          _this.uvs = new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);
          _this.vertexBuffer = new _Buffer(_this.vertices);
          _this.uvBuffer = new _Buffer(_this.uvs);

          _this.addAttribute('aVertexPosition', _this.vertexBuffer).addAttribute('aTextureCoord', _this.uvBuffer).addIndex([0, 1, 2, 0, 2, 3]);

          return _this;
        }
        /**
         * Maps two Rectangle to the quad.
         *
         * @param {PIXI.Rectangle} targetTextureFrame - the first rectangle
         * @param {PIXI.Rectangle} destinationFrame - the second rectangle
         * @return {PIXI.Quad} Returns itself.
         */


        QuadUv.prototype.map = function (targetTextureFrame, destinationFrame) {
          var x = 0; // destinationFrame.x / targetTextureFrame.width;

          var y = 0; // destinationFrame.y / targetTextureFrame.height;

          this.uvs[0] = x;
          this.uvs[1] = y;
          this.uvs[2] = x + destinationFrame.width / targetTextureFrame.width;
          this.uvs[3] = y;
          this.uvs[4] = x + destinationFrame.width / targetTextureFrame.width;
          this.uvs[5] = y + destinationFrame.height / targetTextureFrame.height;
          this.uvs[6] = x;
          this.uvs[7] = y + destinationFrame.height / targetTextureFrame.height;
          x = destinationFrame.x;
          y = destinationFrame.y;
          this.vertices[0] = x;
          this.vertices[1] = y;
          this.vertices[2] = x + destinationFrame.width;
          this.vertices[3] = y;
          this.vertices[4] = x + destinationFrame.width;
          this.vertices[5] = y + destinationFrame.height;
          this.vertices[6] = x;
          this.vertices[7] = y + destinationFrame.height;
          this.invalidate();
          return this;
        };
        /**
         * legacy upload method, just marks buffers dirty
         * @returns {PIXI.QuadUv} Returns itself.
         */


        QuadUv.prototype.invalidate = function () {
          this.vertexBuffer._updateID++;
          this.uvBuffer._updateID++;
          return this;
        };

        return QuadUv;
      }(_Geometry);

      var UID$2 = 0;
      /**
       * Uniform group holds uniform map and some ID's for work
       *
       * `UniformGroup` has two modes:
       *
       * 1: Normal mode
       * Normal mode will upload the uniforms with individual function calls as required
       *
       * 2: Uniform buffer mode
       * This mode will treat the uniforms as a uniform buffer. You can pass in either a buffer that you manually handle, or
       * or a generic object that PixiJS will automatically map to a buffer for you.
       * For maximum benefits, make Ubo UniformGroups static, and only update them each frame.
       *
       * Rules of UBOs:
       * - UBOs only work with WebGL2, so make sure you have a fallback!
       * - Only floats are supported (including vec[2,3,4], mat[2,3,4])
       * - Samplers cannot be used in ubo's (a GPU limitation)
       * - You must ensure that the object you pass in exactly matches in the shader ubo structure.
       * Otherwise, weirdness will ensue!
       * - The name of the ubo object added to the group must match exactly the name of the ubo in the shader.
       *
       * ```
       * // ubo in shader:
       * uniform myCoolData { // declaring a ubo..
       * mat4 uCoolMatrix;
       * float uFloatyMcFloatFace
       *
       *
       * // a new uniform buffer object..
       * const myCoolData = new UniformBufferGroup({
       *   uCoolMatrix: new Matrix(),
       *   uFloatyMcFloatFace: 23,
       * }}
       *
       * // build a shader...
       * const shader = Shader.from(srcVert, srcFrag, {
       *   myCoolData // name matches the ubo name in the shader. will be processed accordingly.
       * })
       *
       *  ```
       *
       * @class
       * @memberof PIXI
       */

      var _UniformGroup =
      /** @class */
      function () {
        /**
         * @param {object | Buffer} [uniforms] - Custom uniforms to use to augment the built-in ones. Or a pixi buffer
         * @param {boolean} [isStatic] - Uniforms wont be changed after creation
         * @param {boolean} [isUbo] - if true, will treat this uniform group as a uniform buffer object
         */
        function UniformGroup(uniforms, isStatic, isUbo) {
          /**
           * Its a group and not a single uniforms
           * @member {boolean}
           * @readonly
           * @default true
           */
          this.group = true; // lets generate this when the shader ?

          this.syncUniforms = {};
          /**
           * dirty version
           * @protected
           * @member {number}
           */

          this.dirtyId = 0;
          /**
           * unique id
           * @protected
           * @member {number}
           */

          this.id = UID$2++;
          /**
           * Uniforms wont be changed after creation
           * @member {boolean}
           */

          this["static"] = !!isStatic;
          /**
           * Flags whether this group is treated like a uniform buffer object.
           * @member {boolean}
           */

          this.ubo = !!isUbo;

          if (uniforms instanceof _Buffer) {
            this.buffer = uniforms;
            this.buffer.type = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BUFFER_TYPE.UNIFORM_BUFFER;
            this.autoManage = false;
            this.ubo = true;
          } else {
            /**
             * uniform values
             * @member {object}
             * @readonly
             */
            this.uniforms = uniforms;

            if (this.ubo) {
              this.buffer = new _Buffer(new Float32Array(1));
              this.buffer.type = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BUFFER_TYPE.UNIFORM_BUFFER;
              this.autoManage = true;
            }
          }
        }

        UniformGroup.prototype.update = function () {
          this.dirtyId++;

          if (!this.autoManage && this.buffer) {
            this.buffer.update();
          }
        };

        UniformGroup.prototype.add = function (name, uniforms, _static) {
          if (!this.ubo) {
            this.uniforms[name] = new UniformGroup(uniforms, _static);
          } else {
            // eslint-disable-next-line max-len
            throw new Error('[UniformGroup] uniform groups in ubo mode cannot be modified, or have uniform groups nested in them');
          }
        };

        UniformGroup.from = function (uniforms, _static, _ubo) {
          return new UniformGroup(uniforms, _static, _ubo);
        };
        /**
         * A short hand function for creating a static UBO UniformGroup.
         *
         * @param uniforms - the ubo item
         * @param _static - should this be updated each time it is used? defaults to true here!
         */


        UniformGroup.uboFrom = function (uniforms, _static) {
          return new UniformGroup(uniforms, _static !== null && _static !== void 0 ? _static : true, true);
        };

        return UniformGroup;
      }();
      /**
       * System plugin to the renderer to manage filter states.
       *
       * @class
       * @private
       */


      var _FilterState =
      /** @class */
      function () {
        function FilterState() {
          this.renderTexture = null;
          /**
           * Target of the filters
           * We store for case when custom filter wants to know the element it was applied on
           * @member {PIXI.DisplayObject}
           * @private
           */

          this.target = null;
          /**
           * Compatibility with PixiJS v4 filters
           * @member {boolean}
           * @default false
           * @private
           */

          this.legacy = false;
          /**
           * Resolution of filters
           * @member {number}
           * @default 1
           * @private
           */

          this.resolution = 1;
          /**
           * Number of samples
           * @member {PIXI.MSAA_QUALITY}
           * @default MSAA_QUALITY.NONE
           * @private
           */

          this.multisample = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MSAA_QUALITY.NONE; // next three fields are created only for root
          // re-assigned for everything else

          /**
           * Source frame
           * @member {PIXI.Rectangle}
           * @private
           */

          this.sourceFrame = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Rectangle();
          /**
           * Destination frame
           * @member {PIXI.Rectangle}
           * @private
           */

          this.destinationFrame = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Rectangle();
          /**
           * Original render-target source frame
           * @private
           */

          this.bindingSourceFrame = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Rectangle();
          /**
           * Original render-target destination frame
           * @private
           */

          this.bindingDestinationFrame = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Rectangle();
          /**
           * Collection of filters
           * @member {PIXI.Filter[]}
           * @private
           */

          this.filters = [];
          /**
           * Projection system transform saved by link.
           * @member {PIXI.Matrix}
           * @private
           */

          this.transform = null;
        }
        /**
         * clears the state
         * @private
         */


        FilterState.prototype.clear = function () {
          this.target = null;
          this.filters = null;
          this.renderTexture = null;
        };

        return FilterState;
      }();

      var tempPoints = [new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Point(), new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Point(), new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Point(), new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Point()];
      var tempMatrix = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Matrix();
      /**
       * System plugin to the renderer to manage filters.
       *
       * ## Pipeline
       *
       * The FilterSystem executes the filtering pipeline by rendering the display-object into a texture, applying its
       * [filters]{@link PIXI.Filter} in series, and the last filter outputs into the final render-target.
       *
       * The filter-frame is the rectangle in world space being filtered, and those contents are mapped into
       * `(0, 0, filterFrame.width, filterFrame.height)` into the filter render-texture. The filter-frame is also called
       * the source-frame, as it is used to bind the filter render-textures. The last filter outputs to the `filterFrame`
       * in the final render-target.
       *
       * ## Usage
       *
       * {@link PIXI.Container#renderAdvanced} is an example of how to use the filter system. It is a 3 step process:
       *
       * * **push**: Use {@link PIXI.FilterSystem#push} to push the set of filters to be applied on a filter-target.
       * * **render**: Render the contents to be filtered using the renderer. The filter-system will only capture the contents
       *      inside the bounds of the filter-target. NOTE: Using {@link PIXI.Renderer#render} is
       *      illegal during an existing render cycle, and it may reset the filter system.
       * * **pop**: Use {@link PIXI.FilterSystem#pop} to pop & execute the filters you initially pushed. It will apply them
       *      serially and output to the bounds of the filter-target.
       *
       * @class
       * @memberof PIXI
       * @extends PIXI.System
       */

      var _FilterSystem =
      /** @class */
      function () {
        /**
         * @param {PIXI.Renderer} renderer - The renderer this System works for.
         */
        function FilterSystem(renderer) {
          this.renderer = renderer;
          /**
           * List of filters for the FilterSystem
           * @member {Object[]}
           * @readonly
           */

          this.defaultFilterStack = [{}];
          /**
           * stores a bunch of PO2 textures used for filtering
           * @member {Object}
           */

          this.texturePool = new _RenderTexturePool();
          this.texturePool.setScreenSize(renderer.view);
          /**
           * a pool for storing filter states, save us creating new ones each tick
           * @member {Object[]}
           */

          this.statePool = [];
          /**
           * A very simple geometry used when drawing a filter effect to the screen
           * @member {PIXI.Quad}
           */

          this.quad = new _Quad();
          /**
           * Quad UVs
           * @member {PIXI.QuadUv}
           */

          this.quadUv = new _QuadUv();
          /**
           * Temporary rect for maths
           * @type {PIXI.Rectangle}
           */

          this.tempRect = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Rectangle();
          /**
           * Active state
           * @member {object}
           */

          this.activeState = {};
          /**
           * This uniform group is attached to filter uniforms when used
           * @member {PIXI.UniformGroup}
           * @property {PIXI.Rectangle} outputFrame
           * @property {Float32Array} inputSize
           * @property {Float32Array} inputPixel
           * @property {Float32Array} inputClamp
           * @property {Number} resolution
           * @property {Float32Array} filterArea
           * @property {Float32Array} filterClamp
           */

          this.globalUniforms = new _UniformGroup({
            outputFrame: new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Rectangle(),
            inputSize: new Float32Array(4),
            inputPixel: new Float32Array(4),
            inputClamp: new Float32Array(4),
            resolution: 1,
            // legacy variables
            filterArea: new Float32Array(4),
            filterClamp: new Float32Array(4)
          }, true);
          /**
           * Whether to clear output renderTexture in AUTO/BLIT mode. See {@link PIXI.CLEAR_MODES}
           * @member {boolean}
           */

          this.forceClear = false;
          /**
           * Old padding behavior is to use the max amount instead of sum padding.
           * Use this flag if you need the old behavior.
           * @member {boolean}
           * @default false
           */

          this.useMaxPadding = false;
        }
        /**
         * Pushes a set of filters to be applied later to the system. This will redirect further rendering into an
         * input render-texture for the rest of the filtering pipeline.
         *
         * @param {PIXI.DisplayObject} target - The target of the filter to render.
         * @param {PIXI.Filter[]} filters - The filters to apply.
         */


        FilterSystem.prototype.push = function (target, filters) {
          var renderer = this.renderer;
          var filterStack = this.defaultFilterStack;
          var state = this.statePool.pop() || new _FilterState();
          var renderTextureSystem = this.renderer.renderTexture;
          var resolution = filters[0].resolution;
          var multisample = filters[0].multisample;
          var padding = filters[0].padding;
          var autoFit = filters[0].autoFit;
          var legacy = filters[0].legacy;

          for (var i = 1; i < filters.length; i++) {
            var filter = filters[i]; // let's use the lowest resolution

            resolution = Math.min(resolution, filter.resolution); // let's use the lowest number of samples

            multisample = Math.min(multisample, filter.multisample); // figure out the padding required for filters

            padding = this.useMaxPadding // old behavior: use largest amount of padding!
            ? Math.max(padding, filter.padding) // new behavior: sum the padding
            : padding + filter.padding; // only auto fit if all filters are autofit

            autoFit = autoFit && filter.autoFit;
            legacy = legacy || filter.legacy;
          }

          if (filterStack.length === 1) {
            this.defaultFilterStack[0].renderTexture = renderTextureSystem.current;
          }

          filterStack.push(state);
          state.resolution = resolution;
          state.multisample = multisample;
          state.legacy = legacy;
          state.target = target;
          state.sourceFrame.copyFrom(target.filterArea || target.getBounds(true));
          state.sourceFrame.pad(padding);

          if (autoFit) {
            var sourceFrameProjected = this.tempRect.copyFrom(renderTextureSystem.sourceFrame); // Project source frame into world space (if projection is applied)

            if (renderer.projection.transform) {
              this.transformAABB(tempMatrix.copyFrom(renderer.projection.transform).invert(), sourceFrameProjected);
            }

            state.sourceFrame.fit(sourceFrameProjected);
          } // Round sourceFrame in screen space based on render-texture.


          this.roundFrame(state.sourceFrame, renderTextureSystem.current ? renderTextureSystem.current.resolution : renderer.resolution, renderTextureSystem.sourceFrame, renderTextureSystem.destinationFrame, renderer.projection.transform);
          state.renderTexture = this.getOptimalFilterTexture(state.sourceFrame.width, state.sourceFrame.height, resolution, multisample);
          state.filters = filters;
          state.destinationFrame.width = state.renderTexture.width;
          state.destinationFrame.height = state.renderTexture.height;
          var destinationFrame = this.tempRect;
          destinationFrame.x = 0;
          destinationFrame.y = 0;
          destinationFrame.width = state.sourceFrame.width;
          destinationFrame.height = state.sourceFrame.height;
          state.renderTexture.filterFrame = state.sourceFrame;
          state.bindingSourceFrame.copyFrom(renderTextureSystem.sourceFrame);
          state.bindingDestinationFrame.copyFrom(renderTextureSystem.destinationFrame);
          state.transform = renderer.projection.transform;
          renderer.projection.transform = null;
          renderTextureSystem.bind(state.renderTexture, state.sourceFrame, destinationFrame);
          renderer.framebuffer.clear(0, 0, 0, 0);
        };
        /**
         * Pops off the filter and applies it.
         */


        FilterSystem.prototype.pop = function () {
          var filterStack = this.defaultFilterStack;
          var state = filterStack.pop();
          var filters = state.filters;
          this.activeState = state;
          var globalUniforms = this.globalUniforms.uniforms;
          globalUniforms.outputFrame = state.sourceFrame;
          globalUniforms.resolution = state.resolution;
          var inputSize = globalUniforms.inputSize;
          var inputPixel = globalUniforms.inputPixel;
          var inputClamp = globalUniforms.inputClamp;
          inputSize[0] = state.destinationFrame.width;
          inputSize[1] = state.destinationFrame.height;
          inputSize[2] = 1.0 / inputSize[0];
          inputSize[3] = 1.0 / inputSize[1];
          inputPixel[0] = Math.round(inputSize[0] * state.resolution);
          inputPixel[1] = Math.round(inputSize[1] * state.resolution);
          inputPixel[2] = 1.0 / inputPixel[0];
          inputPixel[3] = 1.0 / inputPixel[1];
          inputClamp[0] = 0.5 * inputPixel[2];
          inputClamp[1] = 0.5 * inputPixel[3];
          inputClamp[2] = state.sourceFrame.width * inputSize[2] - 0.5 * inputPixel[2];
          inputClamp[3] = state.sourceFrame.height * inputSize[3] - 0.5 * inputPixel[3]; // only update the rect if its legacy..

          if (state.legacy) {
            var filterArea = globalUniforms.filterArea;
            filterArea[0] = state.destinationFrame.width;
            filterArea[1] = state.destinationFrame.height;
            filterArea[2] = state.sourceFrame.x;
            filterArea[3] = state.sourceFrame.y;
            globalUniforms.filterClamp = globalUniforms.inputClamp;
          }

          this.globalUniforms.update();
          var lastState = filterStack[filterStack.length - 1];
          this.renderer.framebuffer.blit();

          if (filters.length === 1) {
            filters[0].apply(this, state.renderTexture, lastState.renderTexture, _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.CLEAR_MODES.BLEND, state);
            this.returnFilterTexture(state.renderTexture);
          } else {
            var flip = state.renderTexture;
            var flop = this.getOptimalFilterTexture(flip.width, flip.height, state.resolution);
            flop.filterFrame = flip.filterFrame;
            var i = 0;

            for (i = 0; i < filters.length - 1; ++i) {
              if (i === 1 && state.multisample > 1) {
                flop = this.getOptimalFilterTexture(flip.width, flip.height, state.resolution);
                flop.filterFrame = flip.filterFrame;
              }

              filters[i].apply(this, flip, flop, _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.CLEAR_MODES.CLEAR, state);
              var t = flip;
              flip = flop;
              flop = t;
            }

            filters[i].apply(this, flip, lastState.renderTexture, _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.CLEAR_MODES.BLEND, state);

            if (i > 1 && state.multisample > 1) {
              this.returnFilterTexture(state.renderTexture);
            }

            this.returnFilterTexture(flip);
            this.returnFilterTexture(flop);
          } // lastState.renderTexture is blitted when lastState is popped


          state.clear();
          this.statePool.push(state);
        };
        /**
         * Binds a renderTexture with corresponding `filterFrame`, clears it if mode corresponds.
         *
         * @param {PIXI.RenderTexture} filterTexture - renderTexture to bind, should belong to filter pool or filter stack
         * @param {PIXI.CLEAR_MODES} [clearMode] - clearMode, by default its CLEAR/YES. See {@link PIXI.CLEAR_MODES}
         */


        FilterSystem.prototype.bindAndClear = function (filterTexture, clearMode) {
          if (clearMode === void 0) {
            clearMode = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.CLEAR_MODES.CLEAR;
          }

          var _a = this.renderer,
              renderTextureSystem = _a.renderTexture,
              stateSystem = _a.state;

          if (filterTexture === this.defaultFilterStack[this.defaultFilterStack.length - 1].renderTexture) {
            // Restore projection transform if rendering into the output render-target.
            this.renderer.projection.transform = this.activeState.transform;
          } else {
            // Prevent projection within filtering pipeline.
            this.renderer.projection.transform = null;
          }

          if (filterTexture && filterTexture.filterFrame) {
            var destinationFrame = this.tempRect;
            destinationFrame.x = 0;
            destinationFrame.y = 0;
            destinationFrame.width = filterTexture.filterFrame.width;
            destinationFrame.height = filterTexture.filterFrame.height;
            renderTextureSystem.bind(filterTexture, filterTexture.filterFrame, destinationFrame);
          } else if (filterTexture !== this.defaultFilterStack[this.defaultFilterStack.length - 1].renderTexture) {
            renderTextureSystem.bind(filterTexture);
          } else {
            // Restore binding for output render-target.
            this.renderer.renderTexture.bind(filterTexture, this.activeState.bindingSourceFrame, this.activeState.bindingDestinationFrame);
          } // Clear the texture in BLIT mode if blending is disabled or the forceClear flag is set. The blending
          // is stored in the 0th bit of the state.


          var autoClear = stateSystem.stateId & 1 || this.forceClear;

          if (clearMode === _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.CLEAR_MODES.CLEAR || clearMode === _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.CLEAR_MODES.BLIT && autoClear) {
            // Use framebuffer.clear because we want to clear the whole filter texture, not just the filtering
            // area over which the shaders are run. This is because filters may sampling outside of it (e.g. blur)
            // instead of clamping their arithmetic.
            this.renderer.framebuffer.clear(0, 0, 0, 0);
          }
        };
        /**
         * Draws a filter.
         *
         * @param {PIXI.Filter} filter - The filter to draw.
         * @param {PIXI.RenderTexture} input - The input render target.
         * @param {PIXI.RenderTexture} output - The target to output to.
         * @param {PIXI.CLEAR_MODES} [clearMode] - Should the output be cleared before rendering to it
         */


        FilterSystem.prototype.applyFilter = function (filter, input, output, clearMode) {
          var renderer = this.renderer; // Set state before binding, so bindAndClear gets the blend mode.

          renderer.state.set(filter.state);
          this.bindAndClear(output, clearMode); // set the uniforms..

          filter.uniforms.uSampler = input;
          filter.uniforms.filterGlobals = this.globalUniforms; // TODO make it so that the order of this does not matter..
          // because it does at the moment cos of global uniforms.
          // they need to get resynced

          renderer.shader.bind(filter); // check to see if the filter is a legacy one..

          filter.legacy = !!filter.program.attributeData.aTextureCoord;

          if (filter.legacy) {
            this.quadUv.map(input._frame, input.filterFrame);
            renderer.geometry.bind(this.quadUv);
            renderer.geometry.draw(_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.DRAW_MODES.TRIANGLES);
          } else {
            renderer.geometry.bind(this.quad);
            renderer.geometry.draw(_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.DRAW_MODES.TRIANGLE_STRIP);
          }
        };
        /**
         * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.
         *
         * Use `outputMatrix * vTextureCoord` in the shader.
         *
         * @param {PIXI.Matrix} outputMatrix - The matrix to output to.
         * @param {PIXI.Sprite} sprite - The sprite to map to.
         * @return {PIXI.Matrix} The mapped matrix.
         */


        FilterSystem.prototype.calculateSpriteMatrix = function (outputMatrix, sprite) {
          var _a = this.activeState,
              sourceFrame = _a.sourceFrame,
              destinationFrame = _a.destinationFrame;
          var orig = sprite._texture.orig;
          var mappedMatrix = outputMatrix.set(destinationFrame.width, 0, 0, destinationFrame.height, sourceFrame.x, sourceFrame.y);
          var worldTransform = sprite.worldTransform.copyTo(_pixi_math__WEBPACK_IMPORTED_MODULE_5__.Matrix.TEMP_MATRIX);
          worldTransform.invert();
          mappedMatrix.prepend(worldTransform);
          mappedMatrix.scale(1.0 / orig.width, 1.0 / orig.height);
          mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);
          return mappedMatrix;
        };
        /**
         * Destroys this Filter System.
         */


        FilterSystem.prototype.destroy = function () {
          this.renderer = null; // Those textures has to be destroyed by RenderTextureSystem or FramebufferSystem

          this.texturePool.clear(false);
        };
        /**
         * Gets a Power-of-Two render texture or fullScreen texture
         *
         * @protected
         * @param {number} minWidth - The minimum width of the render texture in real pixels.
         * @param {number} minHeight - The minimum height of the render texture in real pixels.
         * @param {number} [resolution=1] - The resolution of the render texture.
         * @param {PIXI.MSAA_QUALITY} [multisample=PIXI.MSAA_QUALITY.NONE] - Number of samples of the render texture.
         * @return {PIXI.RenderTexture} The new render texture.
         */


        FilterSystem.prototype.getOptimalFilterTexture = function (minWidth, minHeight, resolution, multisample) {
          if (resolution === void 0) {
            resolution = 1;
          }

          if (multisample === void 0) {
            multisample = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MSAA_QUALITY.NONE;
          }

          return this.texturePool.getOptimalTexture(minWidth, minHeight, resolution, multisample);
        };
        /**
         * Gets extra render texture to use inside current filter
         * To be compliant with older filters, you can use params in any order
         *
         * @param {PIXI.RenderTexture} [input] - renderTexture from which size and resolution will be copied
         * @param {number} [resolution] - override resolution of the renderTexture
         * @param {PIXI.MSAA_QUALITY} [multisample=PIXI.MSAA_QUALITY.NONE] - number of samples of the renderTexture
         * @returns {PIXI.RenderTexture}
         */


        FilterSystem.prototype.getFilterTexture = function (input, resolution, multisample) {
          if (typeof input === 'number') {
            var swap = input;
            input = resolution;
            resolution = swap;
          }

          input = input || this.activeState.renderTexture;
          var filterTexture = this.texturePool.getOptimalTexture(input.width, input.height, resolution || input.resolution, multisample || _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MSAA_QUALITY.NONE);
          filterTexture.filterFrame = input.filterFrame;
          return filterTexture;
        };
        /**
         * Frees a render texture back into the pool.
         *
         * @param {PIXI.RenderTexture} renderTexture - The renderTarget to free
         */


        FilterSystem.prototype.returnFilterTexture = function (renderTexture) {
          this.texturePool.returnTexture(renderTexture);
        };
        /**
         * Empties the texture pool.
         */


        FilterSystem.prototype.emptyPool = function () {
          this.texturePool.clear(true);
        };
        /**
         * calls `texturePool.resize()`, affects fullScreen renderTextures
         */


        FilterSystem.prototype.resize = function () {
          this.texturePool.setScreenSize(this.renderer.view);
        };
        /**
         * @param {PIXI.Matrix} matrix - first param
         * @param {PIXI.Rectangle} rect - second param
         */


        FilterSystem.prototype.transformAABB = function (matrix, rect) {
          var lt = tempPoints[0];
          var lb = tempPoints[1];
          var rt = tempPoints[2];
          var rb = tempPoints[3];
          lt.set(rect.left, rect.top);
          lb.set(rect.left, rect.bottom);
          rt.set(rect.right, rect.top);
          rb.set(rect.right, rect.bottom);
          matrix.apply(lt, lt);
          matrix.apply(lb, lb);
          matrix.apply(rt, rt);
          matrix.apply(rb, rb);
          var x0 = Math.min(lt.x, lb.x, rt.x, rb.x);
          var y0 = Math.min(lt.y, lb.y, rt.y, rb.y);
          var x1 = Math.max(lt.x, lb.x, rt.x, rb.x);
          var y1 = Math.max(lt.y, lb.y, rt.y, rb.y);
          rect.x = x0;
          rect.y = y0;
          rect.width = x1 - x0;
          rect.height = y1 - y0;
        };

        FilterSystem.prototype.roundFrame = function (frame, resolution, bindingSourceFrame, bindingDestinationFrame, transform) {
          if (transform) {
            var a = transform.a,
                b = transform.b,
                c = transform.c,
                d = transform.d; // Skip if skew/rotation present in matrix, except for multiple of 90° rotation. If rotation
            // is a multiple of 90°, then either pair of (b,c) or (a,d) will be (0,0).

            if ((Math.abs(b) > 1e-4 || Math.abs(c) > 1e-4) && (Math.abs(a) > 1e-4 || Math.abs(d) > 1e-4)) {
              return;
            }
          }

          transform = transform ? tempMatrix.copyFrom(transform) : tempMatrix.identity(); // Get forward transform from world space to screen space

          transform.translate(-bindingSourceFrame.x, -bindingSourceFrame.y).scale(bindingDestinationFrame.width / bindingSourceFrame.width, bindingDestinationFrame.height / bindingSourceFrame.height).translate(bindingDestinationFrame.x, bindingDestinationFrame.y); // Convert frame to screen space

          this.transformAABB(transform, frame); // Round frame in screen space

          frame.ceil(resolution); // Project back into world space.

          this.transformAABB(transform.invert(), frame);
        };

        return FilterSystem;
      }();
      /**
       * Base for a common object renderer that can be used as a
       * system renderer plugin.
       *
       * @memberof PIXI
       */


      var _ObjectRenderer =
      /** @class */
      function () {
        /**
         * @param renderer - The renderer this manager works for.
         */
        function ObjectRenderer(renderer) {
          this.renderer = renderer;
        }
        /**
         * Stub method that should be used to empty the current
         * batch by rendering objects now.
         */


        ObjectRenderer.prototype.flush = function () {// flush!
        };
        /**
         * Generic destruction method that frees all resources. This
         * should be called by subclasses.
         */


        ObjectRenderer.prototype.destroy = function () {
          this.renderer = null;
        };
        /**
         * Stub method that initializes any state required before
         * rendering starts. It is different from the `prerender`
         * signal, which occurs every frame, in that it is called
         * whenever an object requests _this_ renderer specifically.
         */


        ObjectRenderer.prototype.start = function () {// set the shader..
        };
        /**
         * Stops the renderer. It should free up any state and
         * become dormant.
         */


        ObjectRenderer.prototype.stop = function () {
          this.flush();
        };
        /**
         * Keeps the object to render. It doesn't have to be
         * rendered immediately.
         *
         * @param {PIXI.DisplayObject} object - The object to render.
         */


        ObjectRenderer.prototype.render = function (_object) {// render the object
        };

        return ObjectRenderer;
      }();
      /**
       * System plugin to the renderer to manage batching.
       *
       * @memberof PIXI
       */


      var _BatchSystem =
      /** @class */
      function () {
        /**
         * @param renderer - The renderer this System works for.
         */
        function BatchSystem(renderer) {
          this.renderer = renderer;
          this.emptyRenderer = new _ObjectRenderer(renderer);
          this.currentRenderer = this.emptyRenderer;
        }
        /**
         * Changes the current renderer to the one given in parameter
         *
         * @param objectRenderer - The object renderer to use.
         */


        BatchSystem.prototype.setObjectRenderer = function (objectRenderer) {
          if (this.currentRenderer === objectRenderer) {
            return;
          }

          this.currentRenderer.stop();
          this.currentRenderer = objectRenderer;
          this.currentRenderer.start();
        };
        /**
         * This should be called if you wish to do some custom rendering
         * It will basically render anything that may be batched up such as sprites
         */


        BatchSystem.prototype.flush = function () {
          this.setObjectRenderer(this.emptyRenderer);
        };
        /**
         * Reset the system to an empty renderer
         */


        BatchSystem.prototype.reset = function () {
          this.setObjectRenderer(this.emptyRenderer);
        };
        /**
         * Handy function for batch renderers: copies bound textures in first maxTextures locations to array
         * sets actual _batchLocation for them
         *
         * @param arr - arr copy destination
         * @param maxTextures - number of copied elements
         */


        BatchSystem.prototype.copyBoundTextures = function (arr, maxTextures) {
          var boundTextures = this.renderer.texture.boundTextures;

          for (var i = maxTextures - 1; i >= 0; --i) {
            arr[i] = boundTextures[i] || null;

            if (arr[i]) {
              arr[i]._batchLocation = i;
            }
          }
        };
        /**
         * Assigns batch locations to textures in array based on boundTextures state.
         * All textures in texArray should have `_batchEnabled = _batchId`,
         * and their count should be less than `maxTextures`.
         *
         * @param texArray - textures to bound
         * @param boundTextures - current state of bound textures
         * @param batchId - marker for _batchEnabled param of textures in texArray
         * @param maxTextures - number of texture locations to manipulate
         */


        BatchSystem.prototype.boundArray = function (texArray, boundTextures, batchId, maxTextures) {
          var elements = texArray.elements,
              ids = texArray.ids,
              count = texArray.count;
          var j = 0;

          for (var i = 0; i < count; i++) {
            var tex = elements[i];
            var loc = tex._batchLocation;

            if (loc >= 0 && loc < maxTextures && boundTextures[loc] === tex) {
              ids[i] = loc;
              continue;
            }

            while (j < maxTextures) {
              var bound = boundTextures[j];

              if (bound && bound._batchEnabled === batchId && bound._batchLocation === j) {
                j++;
                continue;
              }

              ids[i] = j;
              tex._batchLocation = j;
              boundTextures[j] = tex;
              break;
            }
          }
        };
        /**
         * @ignore
         */


        BatchSystem.prototype.destroy = function () {
          this.renderer = null;
        };

        return BatchSystem;
      }();

      var CONTEXT_UID_COUNTER = 0;
      /**
       * System plugin to the renderer to manage the context.
       *
       * @memberof PIXI
       */

      var _ContextSystem =
      /** @class */
      function () {
        /** @param renderer - The renderer this System works for. */
        function ContextSystem(renderer) {
          this.renderer = renderer;
          this.webGLVersion = 1;
          this.extensions = {};
          this.supports = {
            uint32Indices: false
          }; // Bind functions

          this.handleContextLost = this.handleContextLost.bind(this);
          this.handleContextRestored = this.handleContextRestored.bind(this);
          renderer.view.addEventListener('webglcontextlost', this.handleContextLost, false);
          renderer.view.addEventListener('webglcontextrestored', this.handleContextRestored, false);
        }

        Object.defineProperty(ContextSystem.prototype, "isLost", {
          /**
           * `true` if the context is lost
           *
           * @readonly
           */
          get: function get() {
            return !this.gl || this.gl.isContextLost();
          },
          enumerable: false,
          configurable: true
        });
        /**
         * Handles the context change event.
         *
         * @param {WebGLRenderingContext} gl - New WebGL context.
         */

        ContextSystem.prototype.contextChange = function (gl) {
          this.gl = gl;
          this.renderer.gl = gl;
          this.renderer.CONTEXT_UID = CONTEXT_UID_COUNTER++; // restore a context if it was previously lost

          if (gl.isContextLost() && gl.getExtension('WEBGL_lose_context')) {
            gl.getExtension('WEBGL_lose_context').restoreContext();
          }
        };
        /**
         * Initializes the context.
         *
         * @protected
         * @param {WebGLRenderingContext} gl - WebGL context
         */


        ContextSystem.prototype.initFromContext = function (gl) {
          this.gl = gl;
          this.validateContext(gl);
          this.renderer.gl = gl;
          this.renderer.CONTEXT_UID = CONTEXT_UID_COUNTER++;
          this.renderer.runners.contextChange.emit(gl);
        };
        /**
         * Initialize from context options
         *
         * @protected
         * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext
         * @param {object} options - context attributes
         */


        ContextSystem.prototype.initFromOptions = function (options) {
          var gl = this.createContext(this.renderer.view, options);
          this.initFromContext(gl);
        };
        /**
         * Helper class to create a WebGL Context
         *
         * @param canvas - the canvas element that we will get the context from
         * @param options - An options object that gets passed in to the canvas element containing the
         *    context attributes
         * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/getContext
         * @return {WebGLRenderingContext} the WebGL context
         */


        ContextSystem.prototype.createContext = function (canvas, options) {
          var gl;

          if (_pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.PREFER_ENV >= _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.ENV.WEBGL2) {
            gl = canvas.getContext('webgl2', options);
          }

          if (gl) {
            this.webGLVersion = 2;
          } else {
            this.webGLVersion = 1;
            gl = canvas.getContext('webgl', options) || canvas.getContext('experimental-webgl', options);

            if (!gl) {
              // fail, not able to get a context
              throw new Error('This browser does not support WebGL. Try using the canvas renderer');
            }
          }

          this.gl = gl;
          this.getExtensions();
          return this.gl;
        };
        /** Auto-populate the {@link PIXI.ContextSystem.extensions extensions}. */


        ContextSystem.prototype.getExtensions = function () {
          // time to set up default extensions that Pixi uses.
          var gl = this.gl;
          var common = {
            anisotropicFiltering: gl.getExtension('EXT_texture_filter_anisotropic'),
            floatTextureLinear: gl.getExtension('OES_texture_float_linear'),
            s3tc: gl.getExtension('WEBGL_compressed_texture_s3tc'),
            s3tc_sRGB: gl.getExtension('WEBGL_compressed_texture_s3tc_srgb'),
            etc: gl.getExtension('WEBGL_compressed_texture_etc'),
            etc1: gl.getExtension('WEBGL_compressed_texture_etc1'),
            pvrtc: gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'),
            atc: gl.getExtension('WEBGL_compressed_texture_atc'),
            astc: gl.getExtension('WEBGL_compressed_texture_astc')
          };

          if (this.webGLVersion === 1) {
            Object.assign(this.extensions, common, {
              drawBuffers: gl.getExtension('WEBGL_draw_buffers'),
              depthTexture: gl.getExtension('WEBGL_depth_texture'),
              loseContext: gl.getExtension('WEBGL_lose_context'),
              vertexArrayObject: gl.getExtension('OES_vertex_array_object') || gl.getExtension('MOZ_OES_vertex_array_object') || gl.getExtension('WEBKIT_OES_vertex_array_object'),
              uint32ElementIndex: gl.getExtension('OES_element_index_uint'),
              // Floats and half-floats
              floatTexture: gl.getExtension('OES_texture_float'),
              floatTextureLinear: gl.getExtension('OES_texture_float_linear'),
              textureHalfFloat: gl.getExtension('OES_texture_half_float'),
              textureHalfFloatLinear: gl.getExtension('OES_texture_half_float_linear')
            });
          } else if (this.webGLVersion === 2) {
            Object.assign(this.extensions, common, {
              // Floats and half-floats
              colorBufferFloat: gl.getExtension('EXT_color_buffer_float')
            });
          }
        };
        /**
         * Handles a lost webgl context
         *
         * @param {WebGLContextEvent} event - The context lost event.
         */


        ContextSystem.prototype.handleContextLost = function (event) {
          event.preventDefault();
        };
        /** Handles a restored webgl context. */


        ContextSystem.prototype.handleContextRestored = function () {
          this.renderer.runners.contextChange.emit(this.gl);
        };

        ContextSystem.prototype.destroy = function () {
          var view = this.renderer.view;
          this.renderer = null; // remove listeners

          view.removeEventListener('webglcontextlost', this.handleContextLost);
          view.removeEventListener('webglcontextrestored', this.handleContextRestored);
          this.gl.useProgram(null);

          if (this.extensions.loseContext) {
            this.extensions.loseContext.loseContext();
          }
        };
        /** Handle the post-render runner event. */


        ContextSystem.prototype.postrender = function () {
          if (this.renderer.renderingToScreen) {
            this.gl.flush();
          }
        };
        /**
         * Validate context.
         *
         * @param {WebGLRenderingContext} gl - Render context.
         */


        ContextSystem.prototype.validateContext = function (gl) {
          var attributes = gl.getContextAttributes();
          var isWebGl2 = 'WebGL2RenderingContext' in self && gl instanceof self.WebGL2RenderingContext;

          if (isWebGl2) {
            this.webGLVersion = 2;
          } // this is going to be fairly simple for now.. but at least we have room to grow!


          if (!attributes.stencil) {
            /* eslint-disable max-len, no-console */
            console.warn('Provided WebGL context does not have a stencil buffer, masks may not render correctly');
            /* eslint-enable max-len, no-console */
          }

          var hasuint32 = isWebGl2 || !!gl.getExtension('OES_element_index_uint');
          this.supports.uint32Indices = hasuint32;

          if (!hasuint32) {
            /* eslint-disable max-len, no-console */
            console.warn('Provided WebGL context does not support 32 index buffer, complex graphics may not render correctly');
            /* eslint-enable max-len, no-console */
          }
        };

        return ContextSystem;
      }();
      /**
       * Internal framebuffer for WebGL context
       * @class
       * @memberof PIXI
       */


      var _GLFramebuffer =
      /** @class */
      function () {
        function GLFramebuffer(framebuffer) {
          /**
           * The WebGL framebuffer
           * @member {WebGLFramebuffer}
           */
          this.framebuffer = framebuffer;
          /**
           * stencil+depth , usually costs 32bits per pixel
           * @member {WebGLRenderbuffer}
           */

          this.stencil = null;
          /**
           * latest known version of framebuffer
           * @member {number}
           * @protected
           */

          this.dirtyId = -1;
          /**
           * latest known version of framebuffer format
           * @member {number}
           * @protected
           */

          this.dirtyFormat = -1;
          /**
           * latest known version of framebuffer size
           * @member {number}
           * @protected
           */

          this.dirtySize = -1;
          /**
           * Detected AA samples number
           * @member {PIXI.MSAA_QUALITY}
           */

          this.multisample = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MSAA_QUALITY.NONE;
          /**
           * In case MSAA, we use this Renderbuffer instead of colorTextures[0] when we write info
           * @member {WebGLRenderbuffer}
           */

          this.msaaBuffer = null;
          /**
           * In case we use MSAA, this is actual framebuffer that has colorTextures[0]
           * The contents of that framebuffer are read when we use that renderTexture in sprites
           * @member {PIXI.Framebuffer}
           */

          this.blitFramebuffer = null;
          /**
           * store the current mipmap of the textures the framebuffer will write too.
           */

          this.mipLevel = 0;
        }

        return GLFramebuffer;
      }();

      var tempRectangle = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Rectangle();
      /**
       * System plugin to the renderer to manage framebuffers.
       *
       * @class
       * @extends PIXI.System
       * @memberof PIXI
       */

      var _FramebufferSystem =
      /** @class */
      function () {
        /**
         * @param {PIXI.Renderer} renderer - The renderer this System works for.
         */
        function FramebufferSystem(renderer) {
          this.renderer = renderer;
          /**
           * A list of managed framebuffers
           * @member {PIXI.Framebuffer[]}
           * @readonly
           */

          this.managedFramebuffers = [];
          /**
           * Framebuffer value that shows that we don't know what is bound
           * @member {Framebuffer}
           * @readonly
           */

          this.unknownFramebuffer = new _Framebuffer(10, 10);
          this.msaaSamples = null;
        }
        /**
         * Sets up the renderer context and necessary buffers.
         */


        FramebufferSystem.prototype.contextChange = function () {
          var gl = this.gl = this.renderer.gl;
          this.CONTEXT_UID = this.renderer.CONTEXT_UID;
          this.current = this.unknownFramebuffer;
          this.viewport = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Rectangle();
          this.hasMRT = true;
          this.writeDepthTexture = true;
          this.disposeAll(true); // webgl2

          if (this.renderer.context.webGLVersion === 1) {
            // webgl 1!
            var nativeDrawBuffersExtension_1 = this.renderer.context.extensions.drawBuffers;
            var nativeDepthTextureExtension = this.renderer.context.extensions.depthTexture;

            if (_pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.PREFER_ENV === _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.ENV.WEBGL_LEGACY) {
              nativeDrawBuffersExtension_1 = null;
              nativeDepthTextureExtension = null;
            }

            if (nativeDrawBuffersExtension_1) {
              gl.drawBuffers = function (activeTextures) {
                return nativeDrawBuffersExtension_1.drawBuffersWEBGL(activeTextures);
              };
            } else {
              this.hasMRT = false;

              gl.drawBuffers = function () {// empty
              };
            }

            if (!nativeDepthTextureExtension) {
              this.writeDepthTexture = false;
            }
          } else {
            // WebGL2
            // cache possible MSAA samples
            this.msaaSamples = gl.getInternalformatParameter(gl.RENDERBUFFER, gl.RGBA8, gl.SAMPLES);
          }
        };
        /**
         * Bind a framebuffer
         *
         * @param {PIXI.Framebuffer} [framebuffer]
         * @param {PIXI.Rectangle} [frame] - frame, default is framebuffer size
         * @param {number} [mipLevel] - optional mip level to set on the framebuffer - defaults to 0
         */


        FramebufferSystem.prototype.bind = function (framebuffer, frame, mipLevel) {
          if (mipLevel === void 0) {
            mipLevel = 0;
          }

          var gl = this.gl;

          if (framebuffer) {
            // TODO caching layer!
            var fbo = framebuffer.glFramebuffers[this.CONTEXT_UID] || this.initFramebuffer(framebuffer);

            if (this.current !== framebuffer) {
              this.current = framebuffer;
              gl.bindFramebuffer(gl.FRAMEBUFFER, fbo.framebuffer);
            } // make sure all textures are unbound..


            if (fbo.mipLevel !== mipLevel) {
              framebuffer.dirtyId++;
              framebuffer.dirtyFormat++;
              fbo.mipLevel = mipLevel;
            } // now check for updates...


            if (fbo.dirtyId !== framebuffer.dirtyId) {
              fbo.dirtyId = framebuffer.dirtyId;

              if (fbo.dirtyFormat !== framebuffer.dirtyFormat) {
                fbo.dirtyFormat = framebuffer.dirtyFormat;
                fbo.dirtySize = framebuffer.dirtySize;
                this.updateFramebuffer(framebuffer, mipLevel);
              } else if (fbo.dirtySize !== framebuffer.dirtySize) {
                fbo.dirtySize = framebuffer.dirtySize;
                this.resizeFramebuffer(framebuffer);
              }
            }

            for (var i = 0; i < framebuffer.colorTextures.length; i++) {
              var tex = framebuffer.colorTextures[i];
              this.renderer.texture.unbind(tex.parentTextureArray || tex);
            }

            if (framebuffer.depthTexture) {
              this.renderer.texture.unbind(framebuffer.depthTexture);
            }

            if (frame) {
              var mipWidth = frame.width >> mipLevel;
              var mipHeight = frame.height >> mipLevel;
              var scale = mipWidth / frame.width;
              this.setViewport(frame.x * scale, frame.y * scale, mipWidth, mipHeight);
            } else {
              var mipWidth = framebuffer.width >> mipLevel;
              var mipHeight = framebuffer.height >> mipLevel;
              this.setViewport(0, 0, mipWidth, mipHeight);
            }
          } else {
            if (this.current) {
              this.current = null;
              gl.bindFramebuffer(gl.FRAMEBUFFER, null);
            }

            if (frame) {
              this.setViewport(frame.x, frame.y, frame.width, frame.height);
            } else {
              this.setViewport(0, 0, this.renderer.width, this.renderer.height);
            }
          }
        };
        /**
         * Set the WebGLRenderingContext's viewport.
         *
         * @param {Number} x - X position of viewport
         * @param {Number} y - Y position of viewport
         * @param {Number} width - Width of viewport
         * @param {Number} height - Height of viewport
         */


        FramebufferSystem.prototype.setViewport = function (x, y, width, height) {
          var v = this.viewport;
          x = Math.round(x);
          y = Math.round(y);
          width = Math.round(width);
          height = Math.round(height);

          if (v.width !== width || v.height !== height || v.x !== x || v.y !== y) {
            v.x = x;
            v.y = y;
            v.width = width;
            v.height = height;
            this.gl.viewport(x, y, width, height);
          }
        };

        Object.defineProperty(FramebufferSystem.prototype, "size", {
          /**
           * Get the size of the current width and height. Returns object with `width` and `height` values.
           *
           * @member {object}
           * @readonly
           */
          get: function get() {
            if (this.current) {
              // TODO store temp
              return {
                x: 0,
                y: 0,
                width: this.current.width,
                height: this.current.height
              };
            }

            return {
              x: 0,
              y: 0,
              width: this.renderer.width,
              height: this.renderer.height
            };
          },
          enumerable: false,
          configurable: true
        });
        /**
         * Clear the color of the context
         *
         * @param {Number} r - Red value from 0 to 1
         * @param {Number} g - Green value from 0 to 1
         * @param {Number} b - Blue value from 0 to 1
         * @param {Number} a - Alpha value from 0 to 1
         * @param {PIXI.BUFFER_BITS} [mask=BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH] - Bitwise OR of masks
         *  that indicate the buffers to be cleared, by default COLOR and DEPTH buffers.
         */

        FramebufferSystem.prototype.clear = function (r, g, b, a, mask) {
          if (mask === void 0) {
            mask = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BUFFER_BITS.COLOR | _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BUFFER_BITS.DEPTH;
          }

          var gl = this.gl; // TODO clear color can be set only one right?

          gl.clearColor(r, g, b, a);
          gl.clear(mask);
        };
        /**
         * Initialize framebuffer for this context
         *
         * @protected
         * @param {PIXI.Framebuffer} framebuffer
         * @returns {PIXI.GLFramebuffer} created GLFramebuffer
         */


        FramebufferSystem.prototype.initFramebuffer = function (framebuffer) {
          var gl = this.gl;
          var fbo = new _GLFramebuffer(gl.createFramebuffer());
          fbo.multisample = this.detectSamples(framebuffer.multisample);
          framebuffer.glFramebuffers[this.CONTEXT_UID] = fbo;
          this.managedFramebuffers.push(framebuffer);
          framebuffer.disposeRunner.add(this);
          return fbo;
        };
        /**
         * Resize the framebuffer
         *
         * @protected
         * @param {PIXI.Framebuffer} framebuffer
         */


        FramebufferSystem.prototype.resizeFramebuffer = function (framebuffer) {
          var gl = this.gl;
          var fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];

          if (fbo.msaaBuffer) {
            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.msaaBuffer);
            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, gl.RGBA8, framebuffer.width, framebuffer.height);
          }

          if (fbo.stencil) {
            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);

            if (fbo.msaaBuffer) {
              gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, gl.DEPTH24_STENCIL8, framebuffer.width, framebuffer.height);
            } else {
              gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, framebuffer.width, framebuffer.height);
            }
          }

          var colorTextures = framebuffer.colorTextures;
          var count = colorTextures.length;

          if (!gl.drawBuffers) {
            count = Math.min(count, 1);
          }

          for (var i = 0; i < count; i++) {
            var texture = colorTextures[i];
            var parentTexture = texture.parentTextureArray || texture;
            this.renderer.texture.bind(parentTexture, 0);
          }

          if (framebuffer.depthTexture && this.writeDepthTexture) {
            this.renderer.texture.bind(framebuffer.depthTexture, 0);
          }
        };
        /**
         * Update the framebuffer
         *
         * @protected
         * @param {PIXI.Framebuffer} framebuffer
         * @param {number} mipLevel
         */


        FramebufferSystem.prototype.updateFramebuffer = function (framebuffer, mipLevel) {
          var gl = this.gl;
          var fbo = framebuffer.glFramebuffers[this.CONTEXT_UID]; // bind the color texture

          var colorTextures = framebuffer.colorTextures;
          var count = colorTextures.length;

          if (!gl.drawBuffers) {
            count = Math.min(count, 1);
          }

          if (fbo.multisample > 1 && this.canMultisampleFramebuffer(framebuffer)) {
            fbo.msaaBuffer = fbo.msaaBuffer || gl.createRenderbuffer();
            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.msaaBuffer);
            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, gl.RGBA8, framebuffer.width, framebuffer.height);
            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, fbo.msaaBuffer);
          } else if (fbo.msaaBuffer) {
            gl.deleteRenderbuffer(fbo.msaaBuffer);
            fbo.msaaBuffer = null;

            if (fbo.blitFramebuffer) {
              fbo.blitFramebuffer.dispose();
              fbo.blitFramebuffer = null;
            }
          }

          var activeTextures = [];

          for (var i = 0; i < count; i++) {
            var texture = colorTextures[i];
            var parentTexture = texture.parentTextureArray || texture;
            this.renderer.texture.bind(parentTexture, 0);

            if (i === 0 && fbo.msaaBuffer) {
              continue;
            }

            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, texture.target, parentTexture._glTextures[this.CONTEXT_UID].texture, mipLevel);
            activeTextures.push(gl.COLOR_ATTACHMENT0 + i);
          }

          if (activeTextures.length > 1) {
            gl.drawBuffers(activeTextures);
          }

          if (framebuffer.depthTexture) {
            var writeDepthTexture = this.writeDepthTexture;

            if (writeDepthTexture) {
              var depthTexture = framebuffer.depthTexture;
              this.renderer.texture.bind(depthTexture, 0);
              gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depthTexture._glTextures[this.CONTEXT_UID].texture, mipLevel);
            }
          }

          if ((framebuffer.stencil || framebuffer.depth) && !(framebuffer.depthTexture && this.writeDepthTexture)) {
            fbo.stencil = fbo.stencil || gl.createRenderbuffer();
            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);

            if (fbo.msaaBuffer) {
              gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, gl.DEPTH24_STENCIL8, framebuffer.width, framebuffer.height);
            } else {
              gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, framebuffer.width, framebuffer.height);
            }

            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, fbo.stencil);
          } else if (fbo.stencil) {
            gl.deleteRenderbuffer(fbo.stencil);
            fbo.stencil = null;
          }
        };
        /**
         * Returns true if the frame buffer can be multisampled
         *
         * @protected
         * @param {PIXI.Framebuffer} framebuffer
         */


        FramebufferSystem.prototype.canMultisampleFramebuffer = function (framebuffer) {
          return this.renderer.context.webGLVersion !== 1 && framebuffer.colorTextures.length <= 1 && !framebuffer.depthTexture;
        };
        /**
         * Detects number of samples that is not more than a param but as close to it as possible
         *
         * @param {PIXI.MSAA_QUALITY} samples - number of samples
         * @returns {PIXI.MSAA_QUALITY} - recommended number of samples
         */


        FramebufferSystem.prototype.detectSamples = function (samples) {
          var msaaSamples = this.msaaSamples;
          var res = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MSAA_QUALITY.NONE;

          if (samples <= 1 || msaaSamples === null) {
            return res;
          }

          for (var i = 0; i < msaaSamples.length; i++) {
            if (msaaSamples[i] <= samples) {
              res = msaaSamples[i];
              break;
            }
          }

          if (res === 1) {
            res = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MSAA_QUALITY.NONE;
          }

          return res;
        };
        /**
         * Only works with WebGL2
         *
         * blits framebuffer to another of the same or bigger size
         * after that target framebuffer is bound
         *
         * Fails with WebGL warning if blits multisample framebuffer to different size
         *
         * @param {PIXI.Framebuffer} [framebuffer] - by default it blits "into itself", from renderBuffer to texture.
         * @param {PIXI.Rectangle} [sourcePixels] - source rectangle in pixels
         * @param {PIXI.Rectangle} [destPixels] - dest rectangle in pixels, assumed to be the same as sourcePixels
         */


        FramebufferSystem.prototype.blit = function (framebuffer, sourcePixels, destPixels) {
          var _a = this,
              current = _a.current,
              renderer = _a.renderer,
              gl = _a.gl,
              CONTEXT_UID = _a.CONTEXT_UID;

          if (renderer.context.webGLVersion !== 2) {
            return;
          }

          if (!current) {
            return;
          }

          var fbo = current.glFramebuffers[CONTEXT_UID];

          if (!fbo) {
            return;
          }

          if (!framebuffer) {
            if (!fbo.msaaBuffer) {
              return;
            }

            var colorTexture = current.colorTextures[0];

            if (!colorTexture) {
              return;
            }

            if (!fbo.blitFramebuffer) {
              fbo.blitFramebuffer = new _Framebuffer(current.width, current.height);
              fbo.blitFramebuffer.addColorTexture(0, colorTexture);
            }

            framebuffer = fbo.blitFramebuffer;

            if (framebuffer.colorTextures[0] !== colorTexture) {
              framebuffer.colorTextures[0] = colorTexture;
              framebuffer.dirtyId++;
              framebuffer.dirtyFormat++;
            }

            if (framebuffer.width !== current.width || framebuffer.height !== current.height) {
              framebuffer.width = current.width;
              framebuffer.height = current.height;
              framebuffer.dirtyId++;
              framebuffer.dirtySize++;
            }
          }

          if (!sourcePixels) {
            sourcePixels = tempRectangle;
            sourcePixels.width = current.width;
            sourcePixels.height = current.height;
          }

          if (!destPixels) {
            destPixels = sourcePixels;
          }

          var sameSize = sourcePixels.width === destPixels.width && sourcePixels.height === destPixels.height;
          this.bind(framebuffer);
          gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo.framebuffer);
          gl.blitFramebuffer(sourcePixels.x, sourcePixels.y, sourcePixels.width, sourcePixels.height, destPixels.x, destPixels.y, destPixels.width, destPixels.height, gl.COLOR_BUFFER_BIT, sameSize ? gl.NEAREST : gl.LINEAR);
        };
        /**
         * Disposes framebuffer
         * @param {PIXI.Framebuffer} framebuffer - framebuffer that has to be disposed of
         * @param {boolean} [contextLost=false] - If context was lost, we suppress all delete function calls
         */


        FramebufferSystem.prototype.disposeFramebuffer = function (framebuffer, contextLost) {
          var fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];
          var gl = this.gl;

          if (!fbo) {
            return;
          }

          delete framebuffer.glFramebuffers[this.CONTEXT_UID];
          var index = this.managedFramebuffers.indexOf(framebuffer);

          if (index >= 0) {
            this.managedFramebuffers.splice(index, 1);
          }

          framebuffer.disposeRunner.remove(this);

          if (!contextLost) {
            gl.deleteFramebuffer(fbo.framebuffer);

            if (fbo.msaaBuffer) {
              gl.deleteRenderbuffer(fbo.msaaBuffer);
            }

            if (fbo.stencil) {
              gl.deleteRenderbuffer(fbo.stencil);
            }
          }

          if (fbo.blitFramebuffer) {
            fbo.blitFramebuffer.dispose();
          }
        };
        /**
         * Disposes all framebuffers, but not textures bound to them
         * @param {boolean} [contextLost=false] - If context was lost, we suppress all delete function calls
         */


        FramebufferSystem.prototype.disposeAll = function (contextLost) {
          var list = this.managedFramebuffers;
          this.managedFramebuffers = [];

          for (var i = 0; i < list.length; i++) {
            this.disposeFramebuffer(list[i], contextLost);
          }
        };
        /**
         * Forcing creation of stencil buffer for current framebuffer, if it wasn't done before.
         * Used by MaskSystem, when its time to use stencil mask for Graphics element.
         *
         * Its an alternative for public lazy `framebuffer.enableStencil`, in case we need stencil without rebind.
         *
         * @private
         */


        FramebufferSystem.prototype.forceStencil = function () {
          var framebuffer = this.current;

          if (!framebuffer) {
            return;
          }

          var fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];

          if (!fbo || fbo.stencil) {
            return;
          }

          framebuffer.stencil = true;
          var w = framebuffer.width;
          var h = framebuffer.height;
          var gl = this.gl;
          var stencil = gl.createRenderbuffer();
          gl.bindRenderbuffer(gl.RENDERBUFFER, stencil);

          if (fbo.msaaBuffer) {
            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, gl.DEPTH24_STENCIL8, w, h);
          } else {
            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, w, h);
          }

          fbo.stencil = stencil;
          gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, stencil);
        };
        /**
         * resets framebuffer stored state, binds screen framebuffer
         *
         * should be called before renderTexture reset()
         */


        FramebufferSystem.prototype.reset = function () {
          this.current = this.unknownFramebuffer;
          this.viewport = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Rectangle();
        };
        /**
         * @ignore
         */


        FramebufferSystem.prototype.destroy = function () {
          this.renderer = null;
        };

        return FramebufferSystem;
      }();

      var byteSizeMap$1 = {
        5126: 4,
        5123: 2,
        5121: 1
      };
      /**
       * System plugin to the renderer to manage geometry.
       *
       * @class
       * @extends PIXI.System
       * @memberof PIXI
       */

      var _GeometrySystem =
      /** @class */
      function () {
        /**
         * @param {PIXI.Renderer} renderer - The renderer this System works for.
         */
        function GeometrySystem(renderer) {
          this.renderer = renderer;
          this._activeGeometry = null;
          this._activeVao = null;
          /**
           * `true` if we has `*_vertex_array_object` extension
           * @member {boolean}
           * @readonly
           */

          this.hasVao = true;
          /**
           * `true` if has `ANGLE_instanced_arrays` extension
           * @member {boolean}
           * @readonly
           */

          this.hasInstance = true;
          /**
           * `true` if support `gl.UNSIGNED_INT` in `gl.drawElements` or `gl.drawElementsInstanced`
           * @member {boolean}
           * @readonly
           */

          this.canUseUInt32ElementIndex = false;
          /**
           * Cache for all geometries by id, used in case renderer gets destroyed or for profiling
           * @member {object}
           * @readonly
           */

          this.managedGeometries = {};
        }
        /**
         * Sets up the renderer context and necessary buffers.
         */


        GeometrySystem.prototype.contextChange = function () {
          this.disposeAll(true);
          var gl = this.gl = this.renderer.gl;
          var context = this.renderer.context;
          this.CONTEXT_UID = this.renderer.CONTEXT_UID; // webgl2

          if (context.webGLVersion !== 2) {
            // webgl 1!
            var nativeVaoExtension_1 = this.renderer.context.extensions.vertexArrayObject;

            if (_pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.PREFER_ENV === _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.ENV.WEBGL_LEGACY) {
              nativeVaoExtension_1 = null;
            }

            if (nativeVaoExtension_1) {
              gl.createVertexArray = function () {
                return nativeVaoExtension_1.createVertexArrayOES();
              };

              gl.bindVertexArray = function (vao) {
                return nativeVaoExtension_1.bindVertexArrayOES(vao);
              };

              gl.deleteVertexArray = function (vao) {
                return nativeVaoExtension_1.deleteVertexArrayOES(vao);
              };
            } else {
              this.hasVao = false;

              gl.createVertexArray = function () {
                return null;
              };

              gl.bindVertexArray = function () {
                return null;
              };

              gl.deleteVertexArray = function () {
                return null;
              };
            }
          }

          if (context.webGLVersion !== 2) {
            var instanceExt_1 = gl.getExtension('ANGLE_instanced_arrays');

            if (instanceExt_1) {
              gl.vertexAttribDivisor = function (a, b) {
                return instanceExt_1.vertexAttribDivisorANGLE(a, b);
              };

              gl.drawElementsInstanced = function (a, b, c, d, e) {
                return instanceExt_1.drawElementsInstancedANGLE(a, b, c, d, e);
              };

              gl.drawArraysInstanced = function (a, b, c, d) {
                return instanceExt_1.drawArraysInstancedANGLE(a, b, c, d);
              };
            } else {
              this.hasInstance = false;
            }
          }

          this.canUseUInt32ElementIndex = context.webGLVersion === 2 || !!context.extensions.uint32ElementIndex;
        };
        /**
         * Binds geometry so that is can be drawn. Creating a Vao if required
         *
         * @param {PIXI.Geometry} geometry - instance of geometry to bind
         * @param {PIXI.Shader} [shader] - instance of shader to use vao for
         */


        GeometrySystem.prototype.bind = function (geometry, shader) {
          shader = shader || this.renderer.shader.shader;
          var gl = this.gl; // not sure the best way to address this..
          // currently different shaders require different VAOs for the same geometry
          // Still mulling over the best way to solve this one..
          // will likely need to modify the shader attribute locations at run time!

          var vaos = geometry.glVertexArrayObjects[this.CONTEXT_UID];
          var incRefCount = false;

          if (!vaos) {
            this.managedGeometries[geometry.id] = geometry;
            geometry.disposeRunner.add(this);
            geometry.glVertexArrayObjects[this.CONTEXT_UID] = vaos = {};
            incRefCount = true;
          }

          var vao = vaos[shader.program.id] || this.initGeometryVao(geometry, shader, incRefCount);
          this._activeGeometry = geometry;

          if (this._activeVao !== vao) {
            this._activeVao = vao;

            if (this.hasVao) {
              gl.bindVertexArray(vao);
            } else {
              this.activateVao(geometry, shader.program);
            }
          } // TODO - optimise later!
          // don't need to loop through if nothing changed!
          // maybe look to add an 'autoupdate' to geometry?


          this.updateBuffers();
        };
        /**
         * Reset and unbind any active VAO and geometry
         */


        GeometrySystem.prototype.reset = function () {
          this.unbind();
        };
        /**
         * Update buffers
         * @protected
         */


        GeometrySystem.prototype.updateBuffers = function () {
          var geometry = this._activeGeometry;
          var bufferSystem = this.renderer.buffer;

          for (var i = 0; i < geometry.buffers.length; i++) {
            var buffer = geometry.buffers[i];
            bufferSystem.update(buffer);
          }
        };
        /**
         * Check compatibility between a geometry and a program
         * @protected
         * @param {PIXI.Geometry} geometry - Geometry instance
         * @param {PIXI.Program} program - Program instance
         */


        GeometrySystem.prototype.checkCompatibility = function (geometry, program) {
          // geometry must have at least all the attributes that the shader requires.
          var geometryAttributes = geometry.attributes;
          var shaderAttributes = program.attributeData;

          for (var j in shaderAttributes) {
            if (!geometryAttributes[j]) {
              throw new Error("shader and geometry incompatible, geometry missing the \"" + j + "\" attribute");
            }
          }
        };
        /**
         * Takes a geometry and program and generates a unique signature for them.
         *
         * @param {PIXI.Geometry} geometry - to get signature from
         * @param {PIXI.Program} program - to test geometry against
         * @returns {String} Unique signature of the geometry and program
         * @protected
         */


        GeometrySystem.prototype.getSignature = function (geometry, program) {
          var attribs = geometry.attributes;
          var shaderAttributes = program.attributeData;
          var strings = ['g', geometry.id];

          for (var i in attribs) {
            if (shaderAttributes[i]) {
              strings.push(i);
            }
          }

          return strings.join('-');
        };
        /**
         * Creates or gets Vao with the same structure as the geometry and stores it on the geometry.
         * If vao is created, it is bound automatically. We use a shader to infer what and how to set up the
         * attribute locations.
         *
         * @protected
         * @param {PIXI.Geometry} geometry - Instance of geometry to to generate Vao for
         * @param {PIXI.Shader} shader - Instance of the shader
         * @param {boolean} [incRefCount=false] - Increment refCount of all geometry buffers
         */


        GeometrySystem.prototype.initGeometryVao = function (geometry, shader, incRefCount) {
          if (incRefCount === void 0) {
            incRefCount = true;
          }

          var gl = this.gl;
          var CONTEXT_UID = this.CONTEXT_UID;
          var bufferSystem = this.renderer.buffer;
          var program = shader.program;

          if (!program.glPrograms[CONTEXT_UID]) {
            this.renderer.shader.generateProgram(shader);
          }

          this.checkCompatibility(geometry, program);
          var signature = this.getSignature(geometry, program);
          var vaoObjectHash = geometry.glVertexArrayObjects[this.CONTEXT_UID];
          var vao = vaoObjectHash[signature];

          if (vao) {
            // this will give us easy access to the vao
            vaoObjectHash[program.id] = vao;
            return vao;
          }

          var buffers = geometry.buffers;
          var attributes = geometry.attributes;
          var tempStride = {};
          var tempStart = {};

          for (var j in buffers) {
            tempStride[j] = 0;
            tempStart[j] = 0;
          }

          for (var j in attributes) {
            if (!attributes[j].size && program.attributeData[j]) {
              attributes[j].size = program.attributeData[j].size;
            } else if (!attributes[j].size) {
              console.warn("PIXI Geometry attribute '" + j + "' size cannot be determined (likely the bound shader does not have the attribute)"); // eslint-disable-line
            }

            tempStride[attributes[j].buffer] += attributes[j].size * byteSizeMap$1[attributes[j].type];
          }

          for (var j in attributes) {
            var attribute = attributes[j];
            var attribSize = attribute.size;

            if (attribute.stride === undefined) {
              if (tempStride[attribute.buffer] === attribSize * byteSizeMap$1[attribute.type]) {
                attribute.stride = 0;
              } else {
                attribute.stride = tempStride[attribute.buffer];
              }
            }

            if (attribute.start === undefined) {
              attribute.start = tempStart[attribute.buffer];
              tempStart[attribute.buffer] += attribSize * byteSizeMap$1[attribute.type];
            }
          }

          vao = gl.createVertexArray();
          gl.bindVertexArray(vao); // first update - and create the buffers!
          // only create a gl buffer if it actually gets

          for (var i = 0; i < buffers.length; i++) {
            var buffer = buffers[i];
            bufferSystem.bind(buffer);

            if (incRefCount) {
              buffer._glBuffers[CONTEXT_UID].refCount++;
            }
          } // TODO - maybe make this a data object?
          // lets wait to see if we need to first!


          this.activateVao(geometry, program);
          this._activeVao = vao; // add it to the cache!

          vaoObjectHash[program.id] = vao;
          vaoObjectHash[signature] = vao;
          return vao;
        };
        /**
         * Disposes geometry
         * @param {PIXI.Geometry} geometry - Geometry with buffers. Only VAO will be disposed
         * @param {boolean} [contextLost=false] - If context was lost, we suppress deleteVertexArray
         */


        GeometrySystem.prototype.disposeGeometry = function (geometry, contextLost) {
          var _a;

          if (!this.managedGeometries[geometry.id]) {
            return;
          }

          delete this.managedGeometries[geometry.id];
          var vaos = geometry.glVertexArrayObjects[this.CONTEXT_UID];
          var gl = this.gl;
          var buffers = geometry.buffers;
          var bufferSystem = (_a = this.renderer) === null || _a === void 0 ? void 0 : _a.buffer;
          geometry.disposeRunner.remove(this);

          if (!vaos) {
            return;
          } // bufferSystem may have already been destroyed..
          // if this is the case, there is no need to destroy the geometry buffers...
          // they already have been!


          if (bufferSystem) {
            for (var i = 0; i < buffers.length; i++) {
              var buf = buffers[i]._glBuffers[this.CONTEXT_UID]; // my be null as context may have changed right before the dispose is called

              if (buf) {
                buf.refCount--;

                if (buf.refCount === 0 && !contextLost) {
                  bufferSystem.dispose(buffers[i], contextLost);
                }
              }
            }
          }

          if (!contextLost) {
            for (var vaoId in vaos) {
              // delete only signatures, everything else are copies
              if (vaoId[0] === 'g') {
                var vao = vaos[vaoId];

                if (this._activeVao === vao) {
                  this.unbind();
                }

                gl.deleteVertexArray(vao);
              }
            }
          }

          delete geometry.glVertexArrayObjects[this.CONTEXT_UID];
        };
        /**
         * dispose all WebGL resources of all managed geometries
         * @param {boolean} [contextLost=false] - If context was lost, we suppress `gl.delete` calls
         */


        GeometrySystem.prototype.disposeAll = function (contextLost) {
          var all = Object.keys(this.managedGeometries);

          for (var i = 0; i < all.length; i++) {
            this.disposeGeometry(this.managedGeometries[all[i]], contextLost);
          }
        };
        /**
         * Activate vertex array object
         *
         * @protected
         * @param {PIXI.Geometry} geometry - Geometry instance
         * @param {PIXI.Program} program - Shader program instance
         */


        GeometrySystem.prototype.activateVao = function (geometry, program) {
          var gl = this.gl;
          var CONTEXT_UID = this.CONTEXT_UID;
          var bufferSystem = this.renderer.buffer;
          var buffers = geometry.buffers;
          var attributes = geometry.attributes;

          if (geometry.indexBuffer) {
            // first update the index buffer if we have one..
            bufferSystem.bind(geometry.indexBuffer);
          }

          var lastBuffer = null; // add a new one!

          for (var j in attributes) {
            var attribute = attributes[j];
            var buffer = buffers[attribute.buffer];
            var glBuffer = buffer._glBuffers[CONTEXT_UID];

            if (program.attributeData[j]) {
              if (lastBuffer !== glBuffer) {
                bufferSystem.bind(buffer);
                lastBuffer = glBuffer;
              }

              var location = program.attributeData[j].location; // TODO introduce state again
              // we can optimise this for older devices that have no VAOs

              gl.enableVertexAttribArray(location);
              gl.vertexAttribPointer(location, attribute.size, attribute.type || gl.FLOAT, attribute.normalized, attribute.stride, attribute.start);

              if (attribute.instance) {
                // TODO calculate instance count based of this...
                if (this.hasInstance) {
                  gl.vertexAttribDivisor(location, 1);
                } else {
                  throw new Error('geometry error, GPU Instancing is not supported on this device');
                }
              }
            }
          }
        };
        /**
         * Draw the geometry
         *
         * @param {Number} type - the type primitive to render
         * @param {Number} [size] - the number of elements to be rendered
         * @param {Number} [start] - Starting index
         * @param {Number} [instanceCount] - the number of instances of the set of elements to execute
         */


        GeometrySystem.prototype.draw = function (type, size, start, instanceCount) {
          var gl = this.gl;
          var geometry = this._activeGeometry; // TODO.. this should not change so maybe cache the function?

          if (geometry.indexBuffer) {
            var byteSize = geometry.indexBuffer.data.BYTES_PER_ELEMENT;
            var glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;

            if (byteSize === 2 || byteSize === 4 && this.canUseUInt32ElementIndex) {
              if (geometry.instanced) {
                /* eslint-disable max-len */
                gl.drawElementsInstanced(type, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize, instanceCount || 1);
                /* eslint-enable max-len */
              } else {
                /* eslint-disable max-len */
                gl.drawElements(type, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize);
                /* eslint-enable max-len */
              }
            } else {
              console.warn('unsupported index buffer type: uint32');
            }
          } else if (geometry.instanced) {
            // TODO need a better way to calculate size..
            gl.drawArraysInstanced(type, start, size || geometry.getSize(), instanceCount || 1);
          } else {
            gl.drawArrays(type, start, size || geometry.getSize());
          }

          return this;
        };
        /**
         * Unbind/reset everything
         * @protected
         */


        GeometrySystem.prototype.unbind = function () {
          this.gl.bindVertexArray(null);
          this._activeVao = null;
          this._activeGeometry = null;
        };
        /**
         * @ignore
         */


        GeometrySystem.prototype.destroy = function () {
          this.renderer = null;
        };

        return GeometrySystem;
      }();
      /**
       * Component for masked elements.
       *
       * Holds mask mode and temporary data about current mask.
       *
       * @memberof PIXI
       */


      var _MaskData =
      /** @class */
      function () {
        /**
         * Create MaskData
         *
         * @param {PIXI.DisplayObject} [maskObject=null] - object that describes the mask
         */
        function MaskData(maskObject) {
          if (maskObject === void 0) {
            maskObject = null;
          }

          this.type = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MASK_TYPES.NONE;
          this.autoDetect = true;
          this.maskObject = maskObject || null;
          this.pooled = false;
          this.isMaskData = true;
          this.resolution = null;
          this.multisample = _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.FILTER_MULTISAMPLE;
          this.enabled = true;
          this._filters = null;
          this._stencilCounter = 0;
          this._scissorCounter = 0;
          this._scissorRect = null;
          this._scissorRectLocal = null;
          this._target = null;
        }

        Object.defineProperty(MaskData.prototype, "filter", {
          /**
           * The sprite mask filter.
           * If set to `null`, the default sprite mask filter is used.
           * @default null
           */
          get: function get() {
            return this._filters ? this._filters[0] : null;
          },
          set: function set(value) {
            if (value) {
              if (this._filters) {
                this._filters[0] = value;
              } else {
                this._filters = [value];
              }
            } else {
              this._filters = null;
            }
          },
          enumerable: false,
          configurable: true
        });
        /** Resets the mask data after popMask(). */

        MaskData.prototype.reset = function () {
          if (this.pooled) {
            this.maskObject = null;
            this.type = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MASK_TYPES.NONE;
            this.autoDetect = true;
          }

          this._target = null;
          this._scissorRectLocal = null;
        };
        /** Copies counters from maskData above, called from pushMask(). */


        MaskData.prototype.copyCountersOrReset = function (maskAbove) {
          if (maskAbove) {
            this._stencilCounter = maskAbove._stencilCounter;
            this._scissorCounter = maskAbove._scissorCounter;
            this._scissorRect = maskAbove._scissorRect;
          } else {
            this._stencilCounter = 0;
            this._scissorCounter = 0;
            this._scissorRect = null;
          }
        };

        return MaskData;
      }();
      /**
       * @private
       * @param {WebGLRenderingContext} gl - The current WebGL context {WebGLProgram}
       * @param {Number} type - the type, can be either VERTEX_SHADER or FRAGMENT_SHADER
       * @param {string} src - The vertex shader source as an array of strings.
       * @return {WebGLShader} the shader
       */


      function compileShader(gl, type, src) {
        var shader = gl.createShader(type);
        gl.shaderSource(shader, src);
        gl.compileShader(shader);
        return shader;
      }
      /**
       * will log a shader error highlighting the lines with the error
       * also will add numbers along the side.
       *
       * @param gl - the WebGLContext
       * @param shader - the shader to log errors for
       */


      function logPrettyShaderError(gl, shader) {
        var shaderSrc = gl.getShaderSource(shader).split('\n').map(function (line, index) {
          return index + ": " + line;
        });
        var shaderLog = gl.getShaderInfoLog(shader);
        var splitShader = shaderLog.split('\n');
        var dedupe = {};
        var lineNumbers = splitShader.map(function (line) {
          return parseFloat(line.replace(/^ERROR\: 0\:([\d]+)\:.*$/, '$1'));
        }).filter(function (n) {
          if (n && !dedupe[n]) {
            dedupe[n] = true;
            return true;
          }

          return false;
        });
        var logArgs = [''];
        lineNumbers.forEach(function (number) {
          shaderSrc[number - 1] = "%c" + shaderSrc[number - 1] + "%c";
          logArgs.push('background: #FF0000; color:#FFFFFF; font-size: 10px', 'font-size: 10px');
        });
        var fragmentSourceToLog = shaderSrc.join('\n');
        logArgs[0] = fragmentSourceToLog;
        console.error(shaderLog); // eslint-disable-next-line no-console

        console.groupCollapsed('click to view full shader code');
        console.warn.apply(console, logArgs); // eslint-disable-next-line no-console

        console.groupEnd();
      }
      /**
       *
       * logs out any program errors
       *
       * @param gl - The current WebGL context
       * @param program - the WebGL program to display errors for
       * @param vertexShader  - the fragment WebGL shader program
       * @param fragmentShader - the vertex WebGL shader program
       */


      function logProgramError(gl, program, vertexShader, fragmentShader) {
        // if linking fails, then log and cleanup
        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
          if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
            logPrettyShaderError(gl, vertexShader);
          }

          if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
            logPrettyShaderError(gl, fragmentShader);
          }

          console.error('PixiJS Error: Could not initialize shader.'); // if there is a program info log, log it

          if (gl.getProgramInfoLog(program) !== '') {
            console.warn('PixiJS Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(program));
          }
        }
      }

      function booleanArray(size) {
        var array = new Array(size);

        for (var i = 0; i < array.length; i++) {
          array[i] = false;
        }

        return array;
      }
      /**
       * @method defaultValue
       * @memberof PIXI.glCore.shader
       * @param {string} type - Type of value
       * @param {number} size
       * @private
       */


      function defaultValue(type, size) {
        switch (type) {
          case 'float':
            return 0;

          case 'vec2':
            return new Float32Array(2 * size);

          case 'vec3':
            return new Float32Array(3 * size);

          case 'vec4':
            return new Float32Array(4 * size);

          case 'int':
          case 'uint':
          case 'sampler2D':
          case 'sampler2DArray':
            return 0;

          case 'ivec2':
            return new Int32Array(2 * size);

          case 'ivec3':
            return new Int32Array(3 * size);

          case 'ivec4':
            return new Int32Array(4 * size);

          case 'uvec2':
            return new Uint32Array(2 * size);

          case 'uvec3':
            return new Uint32Array(3 * size);

          case 'uvec4':
            return new Uint32Array(4 * size);

          case 'bool':
            return false;

          case 'bvec2':
            return booleanArray(2 * size);

          case 'bvec3':
            return booleanArray(3 * size);

          case 'bvec4':
            return booleanArray(4 * size);

          case 'mat2':
            return new Float32Array([1, 0, 0, 1]);

          case 'mat3':
            return new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);

          case 'mat4':
            return new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);
        }

        return null;
      }

      var unknownContext = {};
      var context = unknownContext;
      /**
       * returns a little WebGL context to use for program inspection.
       *
       * @static
       * @private
       * @returns {WebGLRenderingContext} a gl context to test with
       */

      function _getTestContext() {
        if (context === unknownContext || context && context.isContextLost()) {
          var canvas = document.createElement('canvas');
          var gl = void 0;

          if (_pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.PREFER_ENV >= _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.ENV.WEBGL2) {
            gl = canvas.getContext('webgl2', {});
          }

          if (!gl) {
            gl = canvas.getContext('webgl', {}) || canvas.getContext('experimental-webgl', {});

            if (!gl) {
              // fail, not able to get a context
              gl = null;
            } else {
              // for shader testing..
              gl.getExtension('WEBGL_draw_buffers');
            }
          }

          context = gl;
        }

        return context;
      }

      var maxFragmentPrecision;

      function getMaxFragmentPrecision() {
        if (!maxFragmentPrecision) {
          maxFragmentPrecision = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.PRECISION.MEDIUM;

          var gl = _getTestContext();

          if (gl) {
            if (gl.getShaderPrecisionFormat) {
              var shaderFragment = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);
              maxFragmentPrecision = shaderFragment.precision ? _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.PRECISION.HIGH : _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.PRECISION.MEDIUM;
            }
          }
        }

        return maxFragmentPrecision;
      }
      /**
       * Sets the float precision on the shader, ensuring the device supports the request precision.
       * If the precision is already present, it just ensures that the device is able to handle it.
       *
       * @private
       * @param {string} src - The shader source
       * @param {PIXI.PRECISION} requestedPrecision - The request float precision of the shader.
       * @param {PIXI.PRECISION} maxSupportedPrecision - The maximum precision the shader supports.
       *
       * @return {string} modified shader source
       */


      function setPrecision(src, requestedPrecision, maxSupportedPrecision) {
        if (src.substring(0, 9) !== 'precision') {
          // no precision supplied, so PixiJS will add the requested level.
          var precision = requestedPrecision; // If highp is requested but not supported, downgrade precision to a level all devices support.

          if (requestedPrecision === _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.PRECISION.HIGH && maxSupportedPrecision !== _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.PRECISION.HIGH) {
            precision = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.PRECISION.MEDIUM;
          }

          return "precision " + precision + " float;\n" + src;
        } else if (maxSupportedPrecision !== _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.PRECISION.HIGH && src.substring(0, 15) === 'precision highp') {
          // precision was supplied, but at a level this device does not support, so downgrading to mediump.
          return src.replace('precision highp', 'precision mediump');
        }

        return src;
      }

      var GLSL_TO_SIZE = {
        "float": 1,
        vec2: 2,
        vec3: 3,
        vec4: 4,
        "int": 1,
        ivec2: 2,
        ivec3: 3,
        ivec4: 4,
        uint: 1,
        uvec2: 2,
        uvec3: 3,
        uvec4: 4,
        bool: 1,
        bvec2: 2,
        bvec3: 3,
        bvec4: 4,
        mat2: 4,
        mat3: 9,
        mat4: 16,
        sampler2D: 1
      };
      /**
       * @private
       * @method mapSize
       * @memberof PIXI.glCore.shader
       * @param {String} type
       * @return {Number}
       */

      function mapSize(type) {
        return GLSL_TO_SIZE[type];
      }

      var GL_TABLE = null;
      var GL_TO_GLSL_TYPES = {
        FLOAT: 'float',
        FLOAT_VEC2: 'vec2',
        FLOAT_VEC3: 'vec3',
        FLOAT_VEC4: 'vec4',
        INT: 'int',
        INT_VEC2: 'ivec2',
        INT_VEC3: 'ivec3',
        INT_VEC4: 'ivec4',
        UNSIGNED_INT: 'uint',
        UNSIGNED_INT_VEC2: 'uvec2',
        UNSIGNED_INT_VEC3: 'uvec3',
        UNSIGNED_INT_VEC4: 'uvec4',
        BOOL: 'bool',
        BOOL_VEC2: 'bvec2',
        BOOL_VEC3: 'bvec3',
        BOOL_VEC4: 'bvec4',
        FLOAT_MAT2: 'mat2',
        FLOAT_MAT3: 'mat3',
        FLOAT_MAT4: 'mat4',
        SAMPLER_2D: 'sampler2D',
        INT_SAMPLER_2D: 'sampler2D',
        UNSIGNED_INT_SAMPLER_2D: 'sampler2D',
        SAMPLER_CUBE: 'samplerCube',
        INT_SAMPLER_CUBE: 'samplerCube',
        UNSIGNED_INT_SAMPLER_CUBE: 'samplerCube',
        SAMPLER_2D_ARRAY: 'sampler2DArray',
        INT_SAMPLER_2D_ARRAY: 'sampler2DArray',
        UNSIGNED_INT_SAMPLER_2D_ARRAY: 'sampler2DArray'
      }; // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types

      function mapType(gl, type) {
        if (!GL_TABLE) {
          var typeNames = Object.keys(GL_TO_GLSL_TYPES);
          GL_TABLE = {};

          for (var i = 0; i < typeNames.length; ++i) {
            var tn = typeNames[i];
            GL_TABLE[gl[tn]] = GL_TO_GLSL_TYPES[tn];
          }
        }

        return GL_TABLE[type];
      }
      /* eslint-disable @typescript-eslint/explicit-module-boundary-types */
      // Parsers, each one of these will take a look at the type of shader property and uniform.
      // if they pass the test function then the code function is called that returns a the shader upload code for that uniform.
      // Shader upload code is automagically generated with these parsers.
      // If no parser is valid then the default upload functions are used.
      // exposing Parsers means that custom upload logic can be added to pixi's shaders.
      // A good example would be a pixi rectangle can be directly set on a uniform.
      // If the shader sees it it knows how to upload the rectangle structure as a vec4
      // format is as follows:
      //
      // {
      //     test: (data, uniform) => {} <--- test is this code should be used for this uniform
      //     code: (name, uniform) => {} <--- returns the string of the piece of code that uploads the uniform
      //     codeUbo: (name, uniform) => {} <--- returns the string of the piece of code that uploads the
      //                                         uniform to a uniform buffer
      // }


      var _uniformParsers = [// a float cache layer
      {
        test: function test(data) {
          return data.type === 'float' && data.size === 1;
        },
        code: function code(name) {
          return "\n            if(uv[\"" + name + "\"] !== ud[\"" + name + "\"].value)\n            {\n                ud[\"" + name + "\"].value = uv[\"" + name + "\"]\n                gl.uniform1f(ud[\"" + name + "\"].location, uv[\"" + name + "\"])\n            }\n            ";
        }
      }, // handling samplers
      {
        test: function test(data) {
          // eslint-disable-next-line max-len
          return (data.type === 'sampler2D' || data.type === 'samplerCube' || data.type === 'sampler2DArray') && data.size === 1 && !data.isArray;
        },
        code: function code(name) {
          return "t = syncData.textureCount++;\n\n            renderer.texture.bind(uv[\"" + name + "\"], t);\n\n            if(ud[\"" + name + "\"].value !== t)\n            {\n                ud[\"" + name + "\"].value = t;\n                gl.uniform1i(ud[\"" + name + "\"].location, t);\n; // eslint-disable-line max-len\n            }";
        }
      }, // uploading pixi matrix object to mat3
      {
        test: function test(data, uniform) {
          return data.type === 'mat3' && data.size === 1 && uniform.a !== undefined;
        },
        code: function code(name) {
          // TODO and some smart caching dirty ids here!
          return "\n            gl.uniformMatrix3fv(ud[\"" + name + "\"].location, false, uv[\"" + name + "\"].toArray(true));\n            ";
        },
        codeUbo: function codeUbo(name) {
          return "\n                var " + name + "_matrix = uv." + name + ".toArray(true);\n\n                data[offset] = " + name + "_matrix[0];\n                data[offset+1] = " + name + "_matrix[1];\n                data[offset+2] = " + name + "_matrix[2];\n        \n                data[offset + 4] = " + name + "_matrix[3];\n                data[offset + 5] = " + name + "_matrix[4];\n                data[offset + 6] = " + name + "_matrix[5];\n        \n                data[offset + 8] = " + name + "_matrix[6];\n                data[offset + 9] = " + name + "_matrix[7];\n                data[offset + 10] = " + name + "_matrix[8];\n            ";
        }
      }, // uploading a pixi point as a vec2 with caching layer
      {
        test: function test(data, uniform) {
          return data.type === 'vec2' && data.size === 1 && uniform.x !== undefined;
        },
        code: function code(name) {
          return "\n                cv = ud[\"" + name + "\"].value;\n                v = uv[\"" + name + "\"];\n\n                if(cv[0] !== v.x || cv[1] !== v.y)\n                {\n                    cv[0] = v.x;\n                    cv[1] = v.y;\n                    gl.uniform2f(ud[\"" + name + "\"].location, v.x, v.y);\n                }";
        },
        codeUbo: function codeUbo(name) {
          return "\n                v = uv." + name + ";\n\n                data[offset] = v.x;\n                data[offset+1] = v.y;\n            ";
        }
      }, // caching layer for a vec2
      {
        test: function test(data) {
          return data.type === 'vec2' && data.size === 1;
        },
        code: function code(name) {
          return "\n                cv = ud[\"" + name + "\"].value;\n                v = uv[\"" + name + "\"];\n\n                if(cv[0] !== v[0] || cv[1] !== v[1])\n                {\n                    cv[0] = v[0];\n                    cv[1] = v[1];\n                    gl.uniform2f(ud[\"" + name + "\"].location, v[0], v[1]);\n                }\n            ";
        }
      }, // upload a pixi rectangle as a vec4 with caching layer
      {
        test: function test(data, uniform) {
          return data.type === 'vec4' && data.size === 1 && uniform.width !== undefined;
        },
        code: function code(name) {
          return "\n                cv = ud[\"" + name + "\"].value;\n                v = uv[\"" + name + "\"];\n\n                if(cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height)\n                {\n                    cv[0] = v.x;\n                    cv[1] = v.y;\n                    cv[2] = v.width;\n                    cv[3] = v.height;\n                    gl.uniform4f(ud[\"" + name + "\"].location, v.x, v.y, v.width, v.height)\n                }";
        },
        codeUbo: function codeUbo(name) {
          return "\n                    v = uv." + name + ";\n\n                    data[offset] = v.x;\n                    data[offset+1] = v.y;\n                    data[offset+2] = v.width;\n                    data[offset+3] = v.height;\n                ";
        }
      }, // a caching layer for vec4 uploading
      {
        test: function test(data) {
          return data.type === 'vec4' && data.size === 1;
        },
        code: function code(name) {
          return "\n                cv = ud[\"" + name + "\"].value;\n                v = uv[\"" + name + "\"];\n\n                if(cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n                {\n                    cv[0] = v[0];\n                    cv[1] = v[1];\n                    cv[2] = v[2];\n                    cv[3] = v[3];\n\n                    gl.uniform4f(ud[\"" + name + "\"].location, v[0], v[1], v[2], v[3])\n                }";
        }
      }]; // cu = Cached value's uniform data field
      // cv = Cached value
      // v = value to upload
      // ud = uniformData
      // uv = uniformValue
      // l = location

      var GLSL_TO_SINGLE_SETTERS_CACHED = {
        "float": "\n    if (cv !== v)\n    {\n        cu.value = v;\n        gl.uniform1f(location, v);\n    }",
        vec2: "\n    if (cv[0] !== v[0] || cv[1] !== v[1])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n\n        gl.uniform2f(location, v[0], v[1])\n    }",
        vec3: "\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n\n        gl.uniform3f(location, v[0], v[1], v[2])\n    }",
        vec4: "\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n        cv[3] = v[3];\n\n        gl.uniform4f(location, v[0], v[1], v[2], v[3]);\n    }",
        "int": "\n    if (cv !== v)\n    {\n        cu.value = v;\n\n        gl.uniform1i(location, v);\n    }",
        ivec2: "\n    if (cv[0] !== v[0] || cv[1] !== v[1])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n\n        gl.uniform2i(location, v[0], v[1]);\n    }",
        ivec3: "\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n\n        gl.uniform3i(location, v[0], v[1], v[2]);\n    }",
        ivec4: "\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n        cv[3] = v[3];\n\n        gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n    }",
        uint: "\n    if (cv !== v)\n    {\n        cu.value = v;\n\n        gl.uniform1ui(location, v);\n    }",
        uvec2: "\n    if (cv[0] !== v[0] || cv[1] !== v[1])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n\n        gl.uniform2ui(location, v[0], v[1]);\n    }",
        uvec3: "\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n\n        gl.uniform3ui(location, v[0], v[1], v[2]);\n    }",
        uvec4: "\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n        cv[3] = v[3];\n\n        gl.uniform4ui(location, v[0], v[1], v[2], v[3]);\n    }",
        bool: "\n    if (cv !== v)\n    {\n        cu.value = v;\n        gl.uniform1i(location, v);\n    }",
        bvec2: "\n    if (cv[0] != v[0] || cv[1] != v[1])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n\n        gl.uniform2i(location, v[0], v[1]);\n    }",
        bvec3: "\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n\n        gl.uniform3i(location, v[0], v[1], v[2]);\n    }",
        bvec4: "\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n        cv[3] = v[3];\n\n        gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n    }",
        mat2: 'gl.uniformMatrix2fv(location, false, v)',
        mat3: 'gl.uniformMatrix3fv(location, false, v)',
        mat4: 'gl.uniformMatrix4fv(location, false, v)',
        sampler2D: 'gl.uniform1i(location, v)',
        samplerCube: 'gl.uniform1i(location, v)',
        sampler2DArray: 'gl.uniform1i(location, v)'
      };
      var GLSL_TO_ARRAY_SETTERS = {
        "float": "gl.uniform1fv(location, v)",
        vec2: "gl.uniform2fv(location, v)",
        vec3: "gl.uniform3fv(location, v)",
        vec4: 'gl.uniform4fv(location, v)',
        mat4: 'gl.uniformMatrix4fv(location, false, v)',
        mat3: 'gl.uniformMatrix3fv(location, false, v)',
        mat2: 'gl.uniformMatrix2fv(location, false, v)',
        "int": 'gl.uniform1iv(location, v)',
        ivec2: 'gl.uniform2iv(location, v)',
        ivec3: 'gl.uniform3iv(location, v)',
        ivec4: 'gl.uniform4iv(location, v)',
        uint: 'gl.uniform1uiv(location, v)',
        uvec2: 'gl.uniform2uiv(location, v)',
        uvec3: 'gl.uniform3uiv(location, v)',
        uvec4: 'gl.uniform4uiv(location, v)',
        bool: 'gl.uniform1iv(location, v)',
        bvec2: 'gl.uniform2iv(location, v)',
        bvec3: 'gl.uniform3iv(location, v)',
        bvec4: 'gl.uniform4iv(location, v)',
        sampler2D: 'gl.uniform1iv(location, v)',
        samplerCube: 'gl.uniform1iv(location, v)',
        sampler2DArray: 'gl.uniform1iv(location, v)'
      };

      function generateUniformsSync(group, uniformData) {
        var _a;

        var funcFragments = ["\n        var v = null;\n        var cv = null;\n        var cu = null;\n        var t = 0;\n        var gl = renderer.gl;\n    "];

        for (var i in group.uniforms) {
          var data = uniformData[i];

          if (!data) {
            if ((_a = group.uniforms[i]) === null || _a === void 0 ? void 0 : _a.group) {
              if (group.uniforms[i].ubo) {
                funcFragments.push("\n                        renderer.shader.syncUniformBufferGroup(uv." + i + ", '" + i + "');\n                    ");
              } else {
                funcFragments.push("\n                        renderer.shader.syncUniformGroup(uv." + i + ", syncData);\n                    ");
              }
            }

            continue;
          }

          var uniform = group.uniforms[i];
          var parsed = false;

          for (var j = 0; j < _uniformParsers.length; j++) {
            if (_uniformParsers[j].test(data, uniform)) {
              funcFragments.push(_uniformParsers[j].code(i, uniform));
              parsed = true;
              break;
            }
          }

          if (!parsed) {
            var templateType = data.size === 1 ? GLSL_TO_SINGLE_SETTERS_CACHED : GLSL_TO_ARRAY_SETTERS;
            var template = templateType[data.type].replace('location', "ud[\"" + i + "\"].location");
            funcFragments.push("\n            cu = ud[\"" + i + "\"];\n            cv = cu.value;\n            v = uv[\"" + i + "\"];\n            " + template + ";");
          }
        }
        /*
         * the introduction of syncData is to solve an issue where textures in uniform groups are not set correctly
         * the texture count was always starting from 0 in each group. This needs to increment each time a texture is used
         * no matter which group is being used
         *
         */
        // eslint-disable-next-line no-new-func


        return new Function('ud', 'uv', 'renderer', 'syncData', funcFragments.join('\n'));
      }

      var fragTemplate = ['precision mediump float;', 'void main(void){', 'float test = 0.1;', '%forloop%', 'gl_FragColor = vec4(0.0);', '}'].join('\n');

      function generateIfTestSrc(maxIfs) {
        var src = '';

        for (var i = 0; i < maxIfs; ++i) {
          if (i > 0) {
            src += '\nelse ';
          }

          if (i < maxIfs - 1) {
            src += "if(test == " + i + ".0){}";
          }
        }

        return src;
      }

      function _checkMaxIfStatementsInShader(maxIfs, gl) {
        if (maxIfs === 0) {
          throw new Error('Invalid value of `0` passed to `checkMaxIfStatementsInShader`');
        }

        var shader = gl.createShader(gl.FRAGMENT_SHADER);

        while (true) // eslint-disable-line no-constant-condition
        {
          var fragmentSrc = fragTemplate.replace(/%forloop%/gi, generateIfTestSrc(maxIfs));
          gl.shaderSource(shader, fragmentSrc);
          gl.compileShader(shader);

          if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            maxIfs = maxIfs / 2 | 0;
          } else {
            // valid!
            break;
          }
        }

        return maxIfs;
      } // Cache the result to prevent running this over and over


      var unsafeEval;
      /**
       * Not all platforms allow to generate function code (e.g., `new Function`).
       * this provides the platform-level detection.
       *
       * @private
       * @returns {boolean}
       */

      function unsafeEvalSupported() {
        if (typeof unsafeEval === 'boolean') {
          return unsafeEval;
        }

        try {
          /* eslint-disable no-new-func */
          var func = new Function('param1', 'param2', 'param3', 'return param1[param2] === param3;');
          /* eslint-enable no-new-func */

          unsafeEval = func({
            a: 'b'
          }, 'a', 'b') === true;
        } catch (e) {
          unsafeEval = false;
        }

        return unsafeEval;
      }

      var defaultFragment = "varying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\n\nvoid main(void){\n   gl_FragColor *= texture2D(uSampler, vTextureCoord);\n}";
      var defaultVertex = "attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void){\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n   vTextureCoord = aTextureCoord;\n}\n";
      var UID$3 = 0;
      var nameCache = {};
      /**
       * Helper class to create a shader program.
       *
       * @memberof PIXI
       */

      var _Program =
      /** @class */
      function () {
        /**
         * @param vertexSrc - The source of the vertex shader.
         * @param fragmentSrc - The source of the fragment shader.
         * @param name - Name for shader
         */
        function Program(vertexSrc, fragmentSrc, name) {
          if (name === void 0) {
            name = 'pixi-shader';
          }

          this.id = UID$3++;
          this.vertexSrc = vertexSrc || Program.defaultVertexSrc;
          this.fragmentSrc = fragmentSrc || Program.defaultFragmentSrc;
          this.vertexSrc = this.vertexSrc.trim();
          this.fragmentSrc = this.fragmentSrc.trim();

          if (this.vertexSrc.substring(0, 8) !== '#version') {
            name = name.replace(/\s+/g, '-');

            if (nameCache[name]) {
              nameCache[name]++;
              name += "-" + nameCache[name];
            } else {
              nameCache[name] = 1;
            }

            this.vertexSrc = "#define SHADER_NAME " + name + "\n" + this.vertexSrc;
            this.fragmentSrc = "#define SHADER_NAME " + name + "\n" + this.fragmentSrc;
            this.vertexSrc = setPrecision(this.vertexSrc, _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.PRECISION_VERTEX, _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.PRECISION.HIGH);
            this.fragmentSrc = setPrecision(this.fragmentSrc, _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.PRECISION_FRAGMENT, getMaxFragmentPrecision());
          } // currently this does not extract structs only default types
          // this is where we store shader references..


          this.glPrograms = {};
          this.syncUniforms = null;
        }

        Object.defineProperty(Program, "defaultVertexSrc", {
          /**
           * The default vertex shader source.
           *
           * @constant
           */
          get: function get() {
            return defaultVertex;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Program, "defaultFragmentSrc", {
          /**
           * The default fragment shader source.
           *
           * @constant
           */
          get: function get() {
            return defaultFragment;
          },
          enumerable: false,
          configurable: true
        });
        /**
         * A short hand function to create a program based of a vertex and fragment shader.
         *
         * This method will also check to see if there is a cached program.
         *
         * @param vertexSrc - The source of the vertex shader.
         * @param fragmentSrc - The source of the fragment shader.
         * @param name - Name for shader
         * @returns A shiny new PixiJS shader program!
         */

        Program.from = function (vertexSrc, fragmentSrc, name) {
          var key = vertexSrc + fragmentSrc;
          var program = _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.ProgramCache[key];

          if (!program) {
            _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.ProgramCache[key] = program = new Program(vertexSrc, fragmentSrc, name);
          }

          return program;
        };

        return Program;
      }();
      /**
       * A helper class for shaders.
       *
       * @memberof PIXI
       */


      var _Shader =
      /** @class */
      function () {
        /**
         * @param program - The program the shader will use.
         * @param uniforms - Custom uniforms to use to augment the built-in ones.
         */
        function Shader(program, uniforms) {
          /**
           * Used internally to bind uniform buffer objects.
           * @ignore
           */
          this.uniformBindCount = 0;
          this.program = program; // lets see whats been passed in
          // uniforms should be converted to a uniform group

          if (uniforms) {
            if (uniforms instanceof _UniformGroup) {
              this.uniformGroup = uniforms;
            } else {
              this.uniformGroup = new _UniformGroup(uniforms);
            }
          } else {
            this.uniformGroup = new _UniformGroup({});
          }
        } // TODO move to shader system..


        Shader.prototype.checkUniformExists = function (name, group) {
          if (group.uniforms[name]) {
            return true;
          }

          for (var i in group.uniforms) {
            var uniform = group.uniforms[i];

            if (uniform.group) {
              if (this.checkUniformExists(name, uniform)) {
                return true;
              }
            }
          }

          return false;
        };

        Shader.prototype.destroy = function () {
          // usage count on programs?
          // remove if not used!
          this.uniformGroup = null;
        };

        Object.defineProperty(Shader.prototype, "uniforms", {
          /**
           * Shader uniform values, shortcut for `uniformGroup.uniforms`.
           *
           * @readonly
           */
          get: function get() {
            return this.uniformGroup.uniforms;
          },
          enumerable: false,
          configurable: true
        });
        /**
         * A short hand function to create a shader based of a vertex and fragment shader.
         *
         * @param vertexSrc - The source of the vertex shader.
         * @param fragmentSrc - The source of the fragment shader.
         * @param uniforms - Custom uniforms to use to augment the built-in ones.
         * @returns A shiny new PixiJS shader!
         */

        Shader.from = function (vertexSrc, fragmentSrc, uniforms) {
          var program = _Program.from(vertexSrc, fragmentSrc);

          return new Shader(program, uniforms);
        };

        return Shader;
      }();
      /* eslint-disable max-len */


      var BLEND = 0;
      var OFFSET = 1;
      var CULLING = 2;
      var DEPTH_TEST = 3;
      var WINDING = 4;
      var DEPTH_MASK = 5;
      /**
       * This is a WebGL state, and is is passed to {@link PIXI.StateSystem}.
       *
       * Each mesh rendered may require WebGL to be in a different state.
       * For example you may want different blend mode or to enable polygon offsets
       *
       * @memberof PIXI
       */

      var _State =
      /** @class */
      function () {
        function State() {
          this.data = 0;
          this.blendMode = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.NORMAL;
          this.polygonOffset = 0;
          this.blend = true;
          this.depthMask = true; //  this.depthTest = true;
        }

        Object.defineProperty(State.prototype, "blend", {
          /**
           * Activates blending of the computed fragment color values.
           *
           * @default true
           */
          get: function get() {
            return !!(this.data & 1 << BLEND);
          },
          set: function set(value) {
            if (!!(this.data & 1 << BLEND) !== value) {
              this.data ^= 1 << BLEND;
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(State.prototype, "offsets", {
          /**
           * Activates adding an offset to depth values of polygon's fragments
           *
           * @default false
           */
          get: function get() {
            return !!(this.data & 1 << OFFSET);
          },
          set: function set(value) {
            if (!!(this.data & 1 << OFFSET) !== value) {
              this.data ^= 1 << OFFSET;
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(State.prototype, "culling", {
          /**
           * Activates culling of polygons.
           *
           * @default false
           */
          get: function get() {
            return !!(this.data & 1 << CULLING);
          },
          set: function set(value) {
            if (!!(this.data & 1 << CULLING) !== value) {
              this.data ^= 1 << CULLING;
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(State.prototype, "depthTest", {
          /**
           * Activates depth comparisons and updates to the depth buffer.
           *
           * @default false
           */
          get: function get() {
            return !!(this.data & 1 << DEPTH_TEST);
          },
          set: function set(value) {
            if (!!(this.data & 1 << DEPTH_TEST) !== value) {
              this.data ^= 1 << DEPTH_TEST;
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(State.prototype, "depthMask", {
          /**
           * Enables or disables writing to the depth buffer.
           *
           * @default true
           */
          get: function get() {
            return !!(this.data & 1 << DEPTH_MASK);
          },
          set: function set(value) {
            if (!!(this.data & 1 << DEPTH_MASK) !== value) {
              this.data ^= 1 << DEPTH_MASK;
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(State.prototype, "clockwiseFrontFace", {
          /**
           * Specifies whether or not front or back-facing polygons can be culled.
           *
           * @default false
           */
          get: function get() {
            return !!(this.data & 1 << WINDING);
          },
          set: function set(value) {
            if (!!(this.data & 1 << WINDING) !== value) {
              this.data ^= 1 << WINDING;
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(State.prototype, "blendMode", {
          /**
           * The blend mode to be applied when this state is set. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.
           * Setting this mode to anything other than NO_BLEND will automatically switch blending on.
           *
           * @default PIXI.BLEND_MODES.NORMAL
           */
          get: function get() {
            return this._blendMode;
          },
          set: function set(value) {
            this.blend = value !== _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.NONE;
            this._blendMode = value;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(State.prototype, "polygonOffset", {
          /**
           * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.
           *
           * @default 0
           */
          get: function get() {
            return this._polygonOffset;
          },
          set: function set(value) {
            this.offsets = !!value;
            this._polygonOffset = value;
          },
          enumerable: false,
          configurable: true
        });

        State.prototype.toString = function () {
          return "[@pixi/core:State " + ("blendMode=" + this.blendMode + " ") + ("clockwiseFrontFace=" + this.clockwiseFrontFace + " ") + ("culling=" + this.culling + " ") + ("depthMask=" + this.depthMask + " ") + ("polygonOffset=" + this.polygonOffset) + "]";
        };

        State.for2d = function () {
          var state = new State();
          state.depthTest = false;
          state.blend = true;
          return state;
        };

        return State;
      }();

      var defaultVertex$1 = "attribute vec2 aVertexPosition;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nuniform vec4 inputSize;\nuniform vec4 outputFrame;\n\nvec4 filterVertexPosition( void )\n{\n    vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n\n    return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n}\n\nvec2 filterTextureCoord( void )\n{\n    return aVertexPosition * (outputFrame.zw * inputSize.zw);\n}\n\nvoid main(void)\n{\n    gl_Position = filterVertexPosition();\n    vTextureCoord = filterTextureCoord();\n}\n";
      var defaultFragment$1 = "varying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\n\nvoid main(void){\n   gl_FragColor = texture2D(uSampler, vTextureCoord);\n}\n";
      /**
       * A filter is a special shader that applies post-processing effects to an input texture and writes into an output
       * render-target.
       *
       * {@link http://pixijs.io/examples/#/filters/blur-filter.js Example} of the
       * {@link PIXI.filters.BlurFilter BlurFilter}.
       *
       * ### Usage
       * Filters can be applied to any DisplayObject or Container.
       * PixiJS' `FilterSystem` renders the container into temporary Framebuffer,
       * then filter renders it to the screen.
       * Multiple filters can be added to the `filters` array property and stacked on each other.
       *
       * ```
       * const filter = new PIXI.Filter(myShaderVert, myShaderFrag, { myUniform: 0.5 });
       * const container = new PIXI.Container();
       * container.filters = [filter];
       * ```
       *
       * ### Previous Version Differences
       *
       * In PixiJS **v3**, a filter was always applied to _whole screen_.
       *
       * In PixiJS **v4**, a filter can be applied _only part of the screen_.
       * Developers had to create a set of uniforms to deal with coordinates.
       *
       * In PixiJS **v5** combines _both approaches_.
       * Developers can use normal coordinates of v3 and then allow filter to use partial Framebuffers,
       * bringing those extra uniforms into account.
       *
       * Also be aware that we have changed default vertex shader, please consult
       * {@link https://github.com/pixijs/pixi.js/wiki/v5-Creating-filters Wiki}.
       *
       * ### Frames
       *
       * The following table summarizes the coordinate spaces used in the filtering pipeline:
       *
       * <table>
       * <thead>
       *   <tr>
       *     <th>Coordinate Space</th>
       *     <th>Description</th>
       *   </tr>
       * </thead>
       * <tbody>
       *   <tr>
       *     <td>Texture Coordinates</td>
       *     <td>
       *         The texture (or UV) coordinates in the input base-texture's space. These are normalized into the (0,1) range along
       *         both axes.
       *     </td>
       *   </tr>
       *   <tr>
       *     <td>World Space</td>
       *     <td>
       *         A point in the same space as the world bounds of any display-object (i.e. in the scene graph's space).
       *     </td>
       *   </tr>
       *   <tr>
       *     <td>Physical Pixels</td>
       *     <td>
       *         This is base-texture's space with the origin on the top-left. You can calculate these by multiplying the texture
       *         coordinates by the dimensions of the texture.
       *     </td>
       *   </tr>
       * </tbody>
       * </table>
       *
       * ### Built-in Uniforms
       *
       * PixiJS viewport uses screen (CSS) coordinates, `(0, 0, renderer.screen.width, renderer.screen.height)`,
       * and `projectionMatrix` uniform maps it to the gl viewport.
       *
       * **uSampler**
       *
       * The most important uniform is the input texture that container was rendered into.
       * _Important note: as with all Framebuffers in PixiJS, both input and output are
       * premultiplied by alpha._
       *
       * By default, input normalized coordinates are passed to fragment shader with `vTextureCoord`.
       * Use it to sample the input.
       *
       * ```
       * const fragment = `
       * varying vec2 vTextureCoord;
       * uniform sampler2D uSampler;
       * void main(void)
       * {
       *    gl_FragColor = texture2D(uSampler, vTextureCoord);
       * }
       * `;
       *
       * const myFilter = new PIXI.Filter(null, fragment);
       * ```
       *
       * This filter is just one uniform less than {@link PIXI.filters.AlphaFilter AlphaFilter}.
       *
       * **outputFrame**
       *
       * The `outputFrame` holds the rectangle where filter is applied in screen (CSS) coordinates.
       * It's the same as `renderer.screen` for a fullscreen filter.
       * Only a part of  `outputFrame.zw` size of temporary Framebuffer is used,
       * `(0, 0, outputFrame.width, outputFrame.height)`,
       *
       * Filters uses this quad to normalized (0-1) space, its passed into `aVertexPosition` attribute.
       * To calculate vertex position in screen space using normalized (0-1) space:
       *
       * ```
       * vec4 filterVertexPosition( void )
       * {
       *     vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;
       *     return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);
       * }
       * ```
       *
       * **inputSize**
       *
       * Temporary framebuffer is different, it can be either the size of screen, either power-of-two.
       * The `inputSize.xy` are size of temporary framebuffer that holds input.
       * The `inputSize.zw` is inverted, it's a shortcut to evade division inside the shader.
       *
       * Set `inputSize.xy = outputFrame.zw` for a fullscreen filter.
       *
       * To calculate input normalized coordinate, you have to map it to filter normalized space.
       * Multiply by `outputFrame.zw` to get input coordinate.
       * Divide by `inputSize.xy` to get input normalized coordinate.
       *
       * ```
       * vec2 filterTextureCoord( void )
       * {
       *     return aVertexPosition * (outputFrame.zw * inputSize.zw); // same as /inputSize.xy
       * }
       * ```
       * **resolution**
       *
       * The `resolution` is the ratio of screen (CSS) pixels to real pixels.
       *
       * **inputPixel**
       *
       * `inputPixel.xy` is the size of framebuffer in real pixels, same as `inputSize.xy * resolution`
       * `inputPixel.zw` is inverted `inputPixel.xy`.
       *
       * It's handy for filters that use neighbour pixels, like {@link PIXI.filters.FXAAFilter FXAAFilter}.
       *
       * **inputClamp**
       *
       * If you try to get info from outside of used part of Framebuffer - you'll get undefined behaviour.
       * For displacements, coordinates has to be clamped.
       *
       * The `inputClamp.xy` is left-top pixel center, you may ignore it, because we use left-top part of Framebuffer
       * `inputClamp.zw` is bottom-right pixel center.
       *
       * ```
       * vec4 color = texture2D(uSampler, clamp(modifiedTextureCoord, inputClamp.xy, inputClamp.zw))
       * ```
       * OR
       * ```
       * vec4 color = texture2D(uSampler, min(modifigedTextureCoord, inputClamp.zw))
       * ```
       *
       * ### Additional Information
       *
       * Complete documentation on Filter usage is located in the
       * {@link https://github.com/pixijs/pixi.js/wiki/v5-Creating-filters Wiki}.
       *
       * Since PixiJS only had a handful of built-in filters, additional filters can be downloaded
       * {@link https://github.com/pixijs/pixi-filters here} from the PixiJS Filters repository.
       *
       * @class
       * @memberof PIXI
       * @extends PIXI.Shader
       */

      var _Filter =
      /** @class */
      function (_super) {
        __extends(Filter, _super);
        /**
         * @param {string} [vertexSrc] - The source of the vertex shader.
         * @param {string} [fragmentSrc] - The source of the fragment shader.
         * @param {object} [uniforms] - Custom uniforms to use to augment the built-in ones.
         */


        function Filter(vertexSrc, fragmentSrc, uniforms) {
          var _this = this;

          var program = _Program.from(vertexSrc || Filter.defaultVertexSrc, fragmentSrc || Filter.defaultFragmentSrc);

          _this = _super.call(this, program, uniforms) || this;
          /**
           * The padding of the filter. Some filters require extra space to breath such as a blur.
           * Increasing this will add extra width and height to the bounds of the object that the
           * filter is applied to.
           *
           * @member {number}
           */

          _this.padding = 0;
          _this.resolution = _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.FILTER_RESOLUTION;
          /**
           * The samples of the filter.
           *
           * @member {PIXI.MSAA_QUALITY}
           */

          _this.multisample = _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.FILTER_MULTISAMPLE;
          /**
           * If enabled is true the filter is applied, if false it will not.
           *
           * @member {boolean}
           */

          _this.enabled = true;
          /**
           * If enabled, PixiJS will fit the filter area into boundaries for better performance.
           * Switch it off if it does not work for specific shader.
           *
           * @member {boolean}
           */

          _this.autoFit = true;
          /**
           * The WebGL state the filter requires to render
           * @member {PIXI.State}
           */

          _this.state = new _State();
          return _this;
        }
        /**
         * Applies the filter
         *
         * @param {PIXI.FilterSystem} filterManager - The renderer to retrieve the filter from
         * @param {PIXI.RenderTexture} input - The input render target.
         * @param {PIXI.RenderTexture} output - The target to output to.
         * @param {PIXI.CLEAR_MODES} [clearMode] - Should the output be cleared before rendering to it.
         * @param {object} [currentState] - It's current state of filter.
         *        There are some useful properties in the currentState :
         *        target, filters, sourceFrame, destinationFrame, renderTarget, resolution
         */


        Filter.prototype.apply = function (filterManager, input, output, clearMode, _currentState) {
          // do as you please!
          filterManager.applyFilter(this, input, output, clearMode); // or just do a regular render..
        };

        Object.defineProperty(Filter.prototype, "blendMode", {
          /**
           * Sets the blendmode of the filter
           *
           * @member {number}
           * @default PIXI.BLEND_MODES.NORMAL
           */
          get: function get() {
            return this.state.blendMode;
          },
          set: function set(value) {
            this.state.blendMode = value;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Filter.prototype, "resolution", {
          /**
           * The resolution of the filter. Setting this to be lower will lower the quality but
           * increase the performance of the filter.
           *
           * @member {number}
           */
          get: function get() {
            return this._resolution;
          },
          set: function set(value) {
            this._resolution = value;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Filter, "defaultVertexSrc", {
          /**
           * The default vertex shader source
           *
           * @static
           * @type {string}
           * @constant
           */
          get: function get() {
            return defaultVertex$1;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Filter, "defaultFragmentSrc", {
          /**
           * The default fragment shader source
           *
           * @static
           * @type {string}
           * @constant
           */
          get: function get() {
            return defaultFragment$1;
          },
          enumerable: false,
          configurable: true
        });
        return Filter;
      }(_Shader);

      var vertex = "attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\nuniform mat3 otherMatrix;\n\nvarying vec2 vMaskCoord;\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n\n    vTextureCoord = aTextureCoord;\n    vMaskCoord = ( otherMatrix * vec3( aTextureCoord, 1.0)  ).xy;\n}\n";
      var fragment = "varying vec2 vMaskCoord;\nvarying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\nuniform sampler2D mask;\nuniform float alpha;\nuniform float npmAlpha;\nuniform vec4 maskClamp;\n\nvoid main(void)\n{\n    float clip = step(3.5,\n        step(maskClamp.x, vMaskCoord.x) +\n        step(maskClamp.y, vMaskCoord.y) +\n        step(vMaskCoord.x, maskClamp.z) +\n        step(vMaskCoord.y, maskClamp.w));\n\n    vec4 original = texture2D(uSampler, vTextureCoord);\n    vec4 masky = texture2D(mask, vMaskCoord);\n    float alphaMul = 1.0 - npmAlpha * (1.0 - masky.a);\n\n    original *= (alphaMul * masky.r * alpha * clip);\n\n    gl_FragColor = original;\n}\n";
      var tempMat = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Matrix();
      /**
       * Class controls uv mapping from Texture normal space to BaseTexture normal space.
       *
       * Takes `trim` and `rotate` into account. May contain clamp settings for Meshes and TilingSprite.
       *
       * Can be used in Texture `uvMatrix` field, or separately, you can use different clamp settings on the same texture.
       * If you want to add support for texture region of certain feature or filter, that's what you're looking for.
       *
       * Takes track of Texture changes through `_lastTextureID` private field.
       * Use `update()` method call to track it from outside.
       *
       * @see PIXI.Texture
       * @see PIXI.Mesh
       * @see PIXI.TilingSprite
       * @class
       * @memberof PIXI
       */

      var _TextureMatrix =
      /** @class */
      function () {
        /**
         *
         * @param {PIXI.Texture} texture - observed texture
         * @param {number} [clampMargin] - Changes frame clamping, 0.5 by default. Use -0.5 for extra border.
         * @constructor
         */
        function TextureMatrix(texture, clampMargin) {
          this._texture = texture;
          /**
           * Matrix operation that converts texture region coords to texture coords
           * @member {PIXI.Matrix}
           * @readonly
           */

          this.mapCoord = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Matrix();
          /**
           * Clamp region for normalized coords, left-top pixel center in xy , bottom-right in zw.
           * Calculated based on clampOffset.
           * @member {Float32Array}
           * @readonly
           */

          this.uClampFrame = new Float32Array(4);
          /**
           * Normalized clamp offset.
           * Calculated based on clampOffset.
           * @member {Float32Array}
           * @readonly
           */

          this.uClampOffset = new Float32Array(2);
          /**
           * Tracks Texture frame changes
           * @member {number}
           * @protected
           */

          this._textureID = -1;
          /**
           * Tracks Texture frame changes
           * @member {number}
           * @protected
           */

          this._updateID = 0;
          /**
           * Changes frame clamping
           * Works with TilingSprite and Mesh
           * Change to 1.5 if you texture has repeated right and bottom lines, that leads to smoother borders
           *
           * @default 0
           * @member {number}
           */

          this.clampOffset = 0;
          /**
           * Changes frame clamping
           * Works with TilingSprite and Mesh
           * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas
           *
           * @default 0.5
           * @member {number}
           */

          this.clampMargin = typeof clampMargin === 'undefined' ? 0.5 : clampMargin;
          /**
           * If texture size is the same as baseTexture
           * @member {boolean}
           * @default false
           * @readonly
           */

          this.isSimple = false;
        }

        Object.defineProperty(TextureMatrix.prototype, "texture", {
          /**
           * texture property
           * @member {PIXI.Texture}
           */
          get: function get() {
            return this._texture;
          },
          set: function set(value) {
            this._texture = value;
            this._textureID = -1;
          },
          enumerable: false,
          configurable: true
        });
        /**
         * Multiplies uvs array to transform
         * @param {Float32Array} uvs - mesh uvs
         * @param {Float32Array} [out=uvs] - output
         * @returns {Float32Array} output
         */

        TextureMatrix.prototype.multiplyUvs = function (uvs, out) {
          if (out === undefined) {
            out = uvs;
          }

          var mat = this.mapCoord;

          for (var i = 0; i < uvs.length; i += 2) {
            var x = uvs[i];
            var y = uvs[i + 1];
            out[i] = x * mat.a + y * mat.c + mat.tx;
            out[i + 1] = x * mat.b + y * mat.d + mat.ty;
          }

          return out;
        };
        /**
         * updates matrices if texture was changed
         * @param {boolean} [forceUpdate=false] - if true, matrices will be updated any case
         * @returns {boolean} whether or not it was updated
         */


        TextureMatrix.prototype.update = function (forceUpdate) {
          var tex = this._texture;

          if (!tex || !tex.valid) {
            return false;
          }

          if (!forceUpdate && this._textureID === tex._updateID) {
            return false;
          }

          this._textureID = tex._updateID;
          this._updateID++;
          var uvs = tex._uvs;
          this.mapCoord.set(uvs.x1 - uvs.x0, uvs.y1 - uvs.y0, uvs.x3 - uvs.x0, uvs.y3 - uvs.y0, uvs.x0, uvs.y0);
          var orig = tex.orig;
          var trim = tex.trim;

          if (trim) {
            tempMat.set(orig.width / trim.width, 0, 0, orig.height / trim.height, -trim.x / trim.width, -trim.y / trim.height);
            this.mapCoord.append(tempMat);
          }

          var texBase = tex.baseTexture;
          var frame = this.uClampFrame;
          var margin = this.clampMargin / texBase.resolution;
          var offset = this.clampOffset;
          frame[0] = (tex._frame.x + margin + offset) / texBase.width;
          frame[1] = (tex._frame.y + margin + offset) / texBase.height;
          frame[2] = (tex._frame.x + tex._frame.width - margin + offset) / texBase.width;
          frame[3] = (tex._frame.y + tex._frame.height - margin + offset) / texBase.height;
          this.uClampOffset[0] = offset / texBase.realWidth;
          this.uClampOffset[1] = offset / texBase.realHeight;
          this.isSimple = tex._frame.width === texBase.width && tex._frame.height === texBase.height && tex.rotate === 0;
          return true;
        };

        return TextureMatrix;
      }();
      /**
       * This handles a Sprite acting as a mask, as opposed to a Graphic.
       *
       * WebGL only.
       *
       * @class
       * @extends PIXI.Filter
       * @memberof PIXI
       */


      var _SpriteMaskFilter =
      /** @class */
      function (_super) {
        __extends(SpriteMaskFilter, _super);
        /**
         * @ignore
         */


        function SpriteMaskFilter(vertexSrc, fragmentSrc, uniforms) {
          var _this = this;

          var sprite = null;

          if (typeof vertexSrc !== 'string' && fragmentSrc === undefined && uniforms === undefined) {
            sprite = vertexSrc;
            vertexSrc = undefined;
            fragmentSrc = undefined;
            uniforms = undefined;
          }

          _this = _super.call(this, vertexSrc || vertex, fragmentSrc || fragment, uniforms) || this;
          /**
           * Sprite mask
           * @member {PIXI.Sprite}
           */

          _this.maskSprite = sprite;
          /**
           * Mask matrix
           * @member {PIXI.Matrix}
           */

          _this.maskMatrix = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Matrix();
          return _this;
        }

        Object.defineProperty(SpriteMaskFilter.prototype, "maskSprite", {
          get: function get() {
            return this._maskSprite;
          },
          set: function set(value) {
            this._maskSprite = value;

            if (this._maskSprite) {
              this._maskSprite.renderable = false;
            }
          },
          enumerable: false,
          configurable: true
        });
        /**
         * Applies the filter
         *
         * @param {PIXI.FilterSystem} filterManager - The renderer to retrieve the filter from
         * @param {PIXI.RenderTexture} input - The input render target.
         * @param {PIXI.RenderTexture} output - The target to output to.
         * @param {PIXI.CLEAR_MODES} clearMode - Should the output be cleared before rendering to it.
         */

        SpriteMaskFilter.prototype.apply = function (filterManager, input, output, clearMode) {
          var maskSprite = this._maskSprite;
          var tex = maskSprite._texture;

          if (!tex.valid) {
            return;
          }

          if (!tex.uvMatrix) {
            // margin = 0.0, let it bleed a bit, shader code becomes easier
            // assuming that atlas textures were made with 1-pixel padding
            tex.uvMatrix = new _TextureMatrix(tex, 0.0);
          }

          tex.uvMatrix.update();
          this.uniforms.npmAlpha = tex.baseTexture.alphaMode ? 0.0 : 1.0;
          this.uniforms.mask = tex; // get _normalized sprite texture coords_ and convert them to _normalized atlas texture coords_ with `prepend`

          this.uniforms.otherMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, maskSprite).prepend(tex.uvMatrix.mapCoord);
          this.uniforms.alpha = maskSprite.worldAlpha;
          this.uniforms.maskClamp = tex.uvMatrix.uClampFrame;
          filterManager.applyFilter(this, input, output, clearMode);
        };

        return SpriteMaskFilter;
      }(_Filter);
      /**
       * System plugin to the renderer to manage masks.
       *
       * There are three built-in types of masking:
       * * **Scissor Masking**: Scissor masking discards pixels that are outside of a rectangle called the scissor box. It is
       *  the most performant as the scissor test is inexpensive. However, it can only be used when the mask is rectangular.
       * * **Stencil Masking**: Stencil masking discards pixels that don't overlap with the pixels rendered into the stencil
       *  buffer. It is the next fastest option as it does not require rendering into a separate framebuffer. However, it does
       *  cause the mask to be rendered **twice** for each masking operation; hence, minimize the rendering cost of your masks.
       * * **Sprite Mask Filtering**: Sprite mask filtering discards pixels based on the red channel of the sprite-mask's
       *  texture. (Generally, the masking texture is grayscale). Using advanced techniques, you might be able to embed this
       *  type of masking in a custom shader - and hence, bypassing the masking system fully for performance wins.
       *
       * The best type of masking is auto-detected when you `push` one. To use scissor masking, you must pass in a `Graphics`
       * object with just a rectangle drawn.
       *
       * ## Mask Stacks
       *
       * In the scene graph, masks can be applied recursively, i.e. a mask can be applied during a masking operation. The mask
       * stack stores the currently applied masks in order. Each {@link PIXI.BaseRenderTexture} holds its own mask stack, i.e.
       * when you switch render-textures, the old masks only applied when you switch back to rendering to the old render-target.
       *
       * @memberof PIXI
       */


      var _MaskSystem =
      /** @class */
      function () {
        /**
         * @param renderer - The renderer this System works for.
         */
        function MaskSystem(renderer) {
          this.renderer = renderer;
          this.enableScissor = true;
          this.alphaMaskPool = [];
          this.maskDataPool = [];
          this.maskStack = [];
          this.alphaMaskIndex = 0;
        }
        /**
         * Changes the mask stack that is used by this System.
         *
         * @param maskStack - The mask stack
         */


        MaskSystem.prototype.setMaskStack = function (maskStack) {
          this.maskStack = maskStack;
          this.renderer.scissor.setMaskStack(maskStack);
          this.renderer.stencil.setMaskStack(maskStack);
        };
        /**
         * Enables the mask and appends it to the current mask stack.
         *
         * NOTE: The batch renderer should be flushed beforehand to prevent pending renders from being masked.
         *
         * @param {PIXI.DisplayObject} target - Display Object to push the mask to
         * @param {PIXI.MaskData|PIXI.Sprite|PIXI.Graphics|PIXI.DisplayObject} maskData - The masking data.
         */


        MaskSystem.prototype.push = function (target, maskDataOrTarget) {
          var maskData = maskDataOrTarget;

          if (!maskData.isMaskData) {
            var d = this.maskDataPool.pop() || new _MaskData();
            d.pooled = true;
            d.maskObject = maskDataOrTarget;
            maskData = d;
          }

          var maskAbove = this.maskStack.length !== 0 ? this.maskStack[this.maskStack.length - 1] : null;
          maskData.copyCountersOrReset(maskAbove);

          if (maskData.autoDetect) {
            this.detect(maskData);
          }

          maskData._target = target;

          if (maskData.type !== _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MASK_TYPES.SPRITE) {
            this.maskStack.push(maskData);
          }

          if (maskData.enabled) {
            switch (maskData.type) {
              case _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MASK_TYPES.SCISSOR:
                this.renderer.scissor.push(maskData);
                break;

              case _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MASK_TYPES.STENCIL:
                this.renderer.stencil.push(maskData);
                break;

              case _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MASK_TYPES.SPRITE:
                maskData.copyCountersOrReset(null);
                this.pushSpriteMask(maskData);
                break;
            }
          }

          if (maskData.type === _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MASK_TYPES.SPRITE) {
            this.maskStack.push(maskData);
          }
        };
        /**
         * Removes the last mask from the mask stack and doesn't return it.
         *
         * NOTE: The batch renderer should be flushed beforehand to render the masked contents before the mask is removed.
         *
         * @param {PIXI.DisplayObject} target - Display Object to pop the mask from
         */


        MaskSystem.prototype.pop = function (target) {
          var maskData = this.maskStack.pop();

          if (!maskData || maskData._target !== target) {
            // TODO: add an assert when we have it
            return;
          }

          if (maskData.enabled) {
            switch (maskData.type) {
              case _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MASK_TYPES.SCISSOR:
                this.renderer.scissor.pop();
                break;

              case _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MASK_TYPES.STENCIL:
                this.renderer.stencil.pop(maskData.maskObject);
                break;

              case _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MASK_TYPES.SPRITE:
                this.popSpriteMask(maskData);
                break;
            }
          }

          maskData.reset();

          if (maskData.pooled) {
            this.maskDataPool.push(maskData);
          }

          if (this.maskStack.length !== 0) {
            var maskCurrent = this.maskStack[this.maskStack.length - 1];

            if (maskCurrent.type === _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MASK_TYPES.SPRITE && maskCurrent._filters) {
              maskCurrent._filters[0].maskSprite = maskCurrent.maskObject;
            }
          }
        };
        /** Sets type of MaskData based on its maskObject. */


        MaskSystem.prototype.detect = function (maskData) {
          var maskObject = maskData.maskObject;

          if (maskObject.isSprite) {
            maskData.type = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MASK_TYPES.SPRITE;
          } else if (this.enableScissor && this.renderer.scissor.testScissor(maskData)) {
            maskData.type = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MASK_TYPES.SCISSOR;
          } else {
            maskData.type = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MASK_TYPES.STENCIL;
          }
        };
        /**
         * Applies the Mask and adds it to the current filter stack.
         *
         * @param maskData - Sprite to be used as the mask.
         */


        MaskSystem.prototype.pushSpriteMask = function (maskData) {
          var _a, _b;

          var maskObject = maskData.maskObject;
          var target = maskData._target;
          var alphaMaskFilter = maskData._filters;

          if (!alphaMaskFilter) {
            alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex];

            if (!alphaMaskFilter) {
              alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex] = [new _SpriteMaskFilter()];
            }
          }

          var renderer = this.renderer;
          var renderTextureSystem = renderer.renderTexture;
          var resolution;
          var multisample;

          if (renderTextureSystem.current) {
            var renderTexture = renderTextureSystem.current;
            resolution = maskData.resolution || renderTexture.resolution;
            multisample = (_a = maskData.multisample) !== null && _a !== void 0 ? _a : renderTexture.multisample;
          } else {
            resolution = maskData.resolution || renderer.resolution;
            multisample = (_b = maskData.multisample) !== null && _b !== void 0 ? _b : renderer.multisample;
          }

          alphaMaskFilter[0].resolution = resolution;
          alphaMaskFilter[0].multisample = multisample;
          alphaMaskFilter[0].maskSprite = maskObject;
          var stashFilterArea = target.filterArea;
          target.filterArea = maskObject.getBounds(true);
          renderer.filter.push(target, alphaMaskFilter);
          target.filterArea = stashFilterArea;

          if (!maskData._filters) {
            this.alphaMaskIndex++;
          }
        };
        /**
         * Removes the last filter from the filter stack and doesn't return it.
         *
         * @param maskData - Sprite to be used as the mask.
         */


        MaskSystem.prototype.popSpriteMask = function (maskData) {
          this.renderer.filter.pop();

          if (maskData._filters) {
            maskData._filters[0].maskSprite = null;
          } else {
            this.alphaMaskIndex--;
            this.alphaMaskPool[this.alphaMaskIndex][0].maskSprite = null;
          }
        };

        MaskSystem.prototype.destroy = function () {
          this.renderer = null;
        };

        return MaskSystem;
      }();
      /**
       * System plugin to the renderer to manage specific types of masking operations.
       *
       * @memberof PIXI
       */


      var AbstractMaskSystem =
      /** @class */
      function () {
        /**
         * @param renderer - The renderer this System works for.
         */
        function AbstractMaskSystem(renderer) {
          this.renderer = renderer;
          this.maskStack = [];
          this.glConst = 0;
        }
        /** Gets count of masks of certain type. */


        AbstractMaskSystem.prototype.getStackLength = function () {
          return this.maskStack.length;
        };
        /**
         * Changes the mask stack that is used by this System.
         *
         * @param {PIXI.MaskData[]} maskStack - The mask stack
         */


        AbstractMaskSystem.prototype.setMaskStack = function (maskStack) {
          var gl = this.renderer.gl;
          var curStackLen = this.getStackLength();
          this.maskStack = maskStack;
          var newStackLen = this.getStackLength();

          if (newStackLen !== curStackLen) {
            if (newStackLen === 0) {
              gl.disable(this.glConst);
            } else {
              gl.enable(this.glConst);

              this._useCurrent();
            }
          }
        };
        /**
         * Setup renderer to use the current mask data.
         * @private
         */


        AbstractMaskSystem.prototype._useCurrent = function () {// OVERWRITE;
        };
        /** Destroys the mask stack. */


        AbstractMaskSystem.prototype.destroy = function () {
          this.renderer = null;
          this.maskStack = null;
        };

        return AbstractMaskSystem;
      }();

      var tempMatrix$1 = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Matrix();
      /**
       * System plugin to the renderer to manage scissor masking.
       *
       * Scissor masking discards pixels outside of a rectangle called the scissor box. The scissor box is in the framebuffer
       * viewport's space; however, the mask's rectangle is projected from world-space to viewport space automatically
       * by this system.
       *
       * @memberof PIXI
       */

      var _ScissorSystem =
      /** @class */
      function (_super) {
        __extends(ScissorSystem, _super);
        /**
         * @param {PIXI.Renderer} renderer - The renderer this System works for.
         */


        function ScissorSystem(renderer) {
          var _this = _super.call(this, renderer) || this;

          _this.glConst = WebGLRenderingContext.SCISSOR_TEST;
          return _this;
        }

        ScissorSystem.prototype.getStackLength = function () {
          var maskData = this.maskStack[this.maskStack.length - 1];

          if (maskData) {
            return maskData._scissorCounter;
          }

          return 0;
        };
        /**
         * evaluates _boundsTransformed, _scissorRect for MaskData
         * @param maskData
         */


        ScissorSystem.prototype.calcScissorRect = function (maskData) {
          if (maskData._scissorRectLocal) {
            return;
          }

          var prevData = maskData._scissorRect;
          var maskObject = maskData.maskObject;
          var renderer = this.renderer;
          var renderTextureSystem = renderer.renderTexture;
          maskObject.renderable = true;
          var rect = maskObject.getBounds();
          this.roundFrameToPixels(rect, renderTextureSystem.current ? renderTextureSystem.current.resolution : renderer.resolution, renderTextureSystem.sourceFrame, renderTextureSystem.destinationFrame, renderer.projection.transform);
          maskObject.renderable = false;

          if (prevData) {
            rect.fit(prevData);
          }

          maskData._scissorRectLocal = rect;
        };

        ScissorSystem.isMatrixRotated = function (matrix) {
          if (!matrix) {
            return false;
          }

          var a = matrix.a,
              b = matrix.b,
              c = matrix.c,
              d = matrix.d; // Skip if skew/rotation present in matrix, except for multiple of 90° rotation. If rotation
          // is a multiple of 90°, then either pair of (b,c) or (a,d) will be (0,0).

          return (Math.abs(b) > 1e-4 || Math.abs(c) > 1e-4) && (Math.abs(a) > 1e-4 || Math.abs(d) > 1e-4);
        };
        /**
         * Test, whether the object can be scissor mask with current renderer projection.
         * Calls "calcScissorRect()" if its true.
         * @param maskData mask data
         * @returns whether Whether the object can be scissor mask
         */


        ScissorSystem.prototype.testScissor = function (maskData) {
          var maskObject = maskData.maskObject;

          if (!maskObject.isFastRect || !maskObject.isFastRect()) {
            return false;
          }

          if (ScissorSystem.isMatrixRotated(maskObject.worldTransform)) {
            return false;
          }

          if (ScissorSystem.isMatrixRotated(this.renderer.projection.transform)) {
            return false;
          }

          this.calcScissorRect(maskData);
          var rect = maskData._scissorRectLocal;
          return rect.width > 0 && rect.height > 0;
        };

        ScissorSystem.prototype.roundFrameToPixels = function (frame, resolution, bindingSourceFrame, bindingDestinationFrame, transform) {
          if (ScissorSystem.isMatrixRotated(transform)) {
            return;
          }

          transform = transform ? tempMatrix$1.copyFrom(transform) : tempMatrix$1.identity(); // Get forward transform from world space to screen space

          transform.translate(-bindingSourceFrame.x, -bindingSourceFrame.y).scale(bindingDestinationFrame.width / bindingSourceFrame.width, bindingDestinationFrame.height / bindingSourceFrame.height).translate(bindingDestinationFrame.x, bindingDestinationFrame.y); // Convert frame to screen space

          this.renderer.filter.transformAABB(transform, frame);
          frame.fit(bindingDestinationFrame);
          frame.x = Math.round(frame.x * resolution);
          frame.y = Math.round(frame.y * resolution);
          frame.width = Math.round(frame.width * resolution);
          frame.height = Math.round(frame.height * resolution);
        };
        /**
         * Applies the Mask and adds it to the current stencil stack.
         *
         * @author alvin
         * @param maskData - The mask data.
         */


        ScissorSystem.prototype.push = function (maskData) {
          if (!maskData._scissorRectLocal) {
            this.calcScissorRect(maskData);
          }

          var gl = this.renderer.gl;

          if (!maskData._scissorRect) {
            gl.enable(gl.SCISSOR_TEST);
          }

          maskData._scissorCounter++;
          maskData._scissorRect = maskData._scissorRectLocal;

          this._useCurrent();
        };
        /**
         * This should be called after a mask is popped off the mask stack. It will rebind the scissor box to be latest with the
         * last mask in the stack.
         *
         * This can also be called when you directly modify the scissor box and want to restore PixiJS state.
         */


        ScissorSystem.prototype.pop = function () {
          var gl = this.renderer.gl;

          if (this.getStackLength() > 0) {
            this._useCurrent();
          } else {
            gl.disable(gl.SCISSOR_TEST);
          }
        };
        /**
         * Setup renderer to use the current scissor data.
         * @private
         */


        ScissorSystem.prototype._useCurrent = function () {
          var rect = this.maskStack[this.maskStack.length - 1]._scissorRect;
          var y;

          if (this.renderer.renderTexture.current) {
            y = rect.y;
          } else {
            // flipY. In future we'll have it over renderTextures as an option
            y = this.renderer.height - rect.height - rect.y;
          }

          this.renderer.gl.scissor(rect.x, y, rect.width, rect.height);
        };

        return ScissorSystem;
      }(AbstractMaskSystem);
      /**
       * System plugin to the renderer to manage stencils (used for masks).
       *
       * @memberof PIXI
       */


      var _StencilSystem =
      /** @class */
      function (_super) {
        __extends(StencilSystem, _super);
        /**
         * @param renderer - The renderer this System works for.
         */


        function StencilSystem(renderer) {
          var _this = _super.call(this, renderer) || this;

          _this.glConst = WebGLRenderingContext.STENCIL_TEST;
          return _this;
        }

        StencilSystem.prototype.getStackLength = function () {
          var maskData = this.maskStack[this.maskStack.length - 1];

          if (maskData) {
            return maskData._stencilCounter;
          }

          return 0;
        };
        /**
         * Applies the Mask and adds it to the current stencil stack.
         *
         * @param maskData - The mask data
         */


        StencilSystem.prototype.push = function (maskData) {
          var maskObject = maskData.maskObject;
          var gl = this.renderer.gl;
          var prevMaskCount = maskData._stencilCounter;

          if (prevMaskCount === 0) {
            // force use stencil texture in current framebuffer
            this.renderer.framebuffer.forceStencil();
            gl.enable(gl.STENCIL_TEST);
          }

          maskData._stencilCounter++; // Increment the reference stencil value where the new mask overlaps with the old ones.

          gl.colorMask(false, false, false, false);
          gl.stencilFunc(gl.EQUAL, prevMaskCount, 0xFFFFFFFF);
          gl.stencilOp(gl.KEEP, gl.KEEP, gl.INCR);
          maskObject.renderable = true;
          maskObject.render(this.renderer);
          this.renderer.batch.flush();
          maskObject.renderable = false;

          this._useCurrent();
        };
        /**
         * Pops stencil mask. MaskData is already removed from stack
         *
         * @param {PIXI.DisplayObject} maskObject - object of popped mask data
         */


        StencilSystem.prototype.pop = function (maskObject) {
          var gl = this.renderer.gl;

          if (this.getStackLength() === 0) {
            // the stack is empty!
            gl.disable(gl.STENCIL_TEST);
            gl.clearStencil(0);
            gl.clear(gl.STENCIL_BUFFER_BIT);
          } else {
            // Decrement the reference stencil value where the popped mask overlaps with the other ones
            gl.colorMask(false, false, false, false);
            gl.stencilOp(gl.KEEP, gl.KEEP, gl.DECR);
            maskObject.renderable = true;
            maskObject.render(this.renderer);
            this.renderer.batch.flush();
            maskObject.renderable = false;

            this._useCurrent();
          }
        };
        /**
         * Setup renderer to use the current stencil data.
         * @private
         */


        StencilSystem.prototype._useCurrent = function () {
          var gl = this.renderer.gl;
          gl.colorMask(true, true, true, true);
          gl.stencilFunc(gl.EQUAL, this.getStackLength(), 0xFFFFFFFF);
          gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
        };

        return StencilSystem;
      }(AbstractMaskSystem);
      /**
       * System plugin to the renderer to manage the projection matrix.
       *
       * The `projectionMatrix` is a global uniform provided to all shaders. It is used to transform points in world space to
       * normalized device coordinates.
       *
       * @memberof PIXI
       */


      var _ProjectionSystem =
      /** @class */
      function () {
        /** @param renderer - The renderer this System works for. */
        function ProjectionSystem(renderer) {
          this.renderer = renderer;
          this.destinationFrame = null;
          this.sourceFrame = null;
          this.defaultFrame = null;
          this.projectionMatrix = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Matrix();
          this.transform = null;
        }
        /**
         * Updates the projection-matrix based on the sourceFrame → destinationFrame mapping provided.
         *
         * NOTE: It is expected you call `renderer.framebuffer.setViewport(destinationFrame)` after this. This is because
         * the framebuffer viewport converts shader vertex output in normalized device coordinates to window coordinates.
         *
         * NOTE-2: {@link RenderTextureSystem#bind} updates the projection-matrix when you bind a render-texture. It is expected
         * that you dirty the current bindings when calling this manually.
         *
         * @param destinationFrame - The rectangle in the render-target to render the contents into. If rendering to the canvas,
         *  the origin is on the top-left; if rendering to a render-texture, the origin is on the bottom-left.
         * @param sourceFrame - The rectangle in world space that contains the contents being rendered.
         * @param resolution - The resolution of the render-target, which is the ratio of
         *  world-space (or CSS) pixels to physical pixels.
         * @param root - Whether the render-target is the screen. This is required because rendering to textures
         *  is y-flipped (i.e. upside down relative to the screen).
         */


        ProjectionSystem.prototype.update = function (destinationFrame, sourceFrame, resolution, root) {
          this.destinationFrame = destinationFrame || this.destinationFrame || this.defaultFrame;
          this.sourceFrame = sourceFrame || this.sourceFrame || destinationFrame; // Calculate object-space to clip-space projection

          this.calculateProjection(this.destinationFrame, this.sourceFrame, resolution, root);

          if (this.transform) {
            this.projectionMatrix.append(this.transform);
          }

          var renderer = this.renderer;
          renderer.globalUniforms.uniforms.projectionMatrix = this.projectionMatrix;
          renderer.globalUniforms.update(); // this will work for now
          // but would be sweet to stick and even on the global uniforms..

          if (renderer.shader.shader) {
            renderer.shader.syncUniformGroup(renderer.shader.shader.uniforms.globals);
          }
        };
        /**
         * Calculates the `projectionMatrix` to map points inside `sourceFrame` to inside `destinationFrame`.
         *
         * @param destinationFrame - The destination frame in the render-target.
         * @param sourceFrame - The source frame in world space.
         * @param resolution - The render-target's resolution, i.e. ratio of CSS to physical pixels.
         * @param root - Whether rendering into the screen. Otherwise, if rendering to a framebuffer, the projection
         *  is y-flipped.
         */


        ProjectionSystem.prototype.calculateProjection = function (_destinationFrame, sourceFrame, _resolution, root) {
          var pm = this.projectionMatrix;
          var sign = !root ? 1 : -1;
          pm.identity();
          pm.a = 1 / sourceFrame.width * 2;
          pm.d = sign * (1 / sourceFrame.height * 2);
          pm.tx = -1 - sourceFrame.x * pm.a;
          pm.ty = -sign - sourceFrame.y * pm.d;
        };
        /**
         * Sets the transform of the active render target to the given matrix.
         *
         * @param matrix - The transformation matrix
         */


        ProjectionSystem.prototype.setTransform = function (_matrix) {// this._activeRenderTarget.transform = matrix;
        };

        ProjectionSystem.prototype.destroy = function () {
          this.renderer = null;
        };

        return ProjectionSystem;
      }(); // Temporary rectangle for assigned sourceFrame or destinationFrame


      var tempRect = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Rectangle(); // Temporary rectangle for renderTexture destinationFrame

      var tempRect2 = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Rectangle();
      /* eslint-disable max-len */

      /**
       * System plugin to the renderer to manage render textures.
       *
       * Should be added after FramebufferSystem
       *
       * ### Frames
       *
       * The `RenderTextureSystem` holds a sourceFrame → destinationFrame projection. The following table explains the different
       * coordinate spaces used:
       *
       * | Frame                  | Description                                                      | Coordinate System                                       |
       * | ---------------------- | ---------------------------------------------------------------- | ------------------------------------------------------- |
       * | sourceFrame            | The rectangle inside of which display-objects are being rendered | **World Space**: The origin on the top-left             |
       * | destinationFrame       | The rectangle in the render-target (canvas or texture) into which contents should be rendered | If rendering to the canvas, this is in screen space and the origin is on the top-left. If rendering to a render-texture, this is in its base-texture's space with the origin on the bottom-left.  |
       * | viewportFrame          | The framebuffer viewport corresponding to the destination-frame  | **Window Coordinates**: The origin is always on the bottom-left. |
       *
       * @memberof PIXI
       */

      var _RenderTextureSystem =
      /** @class */
      function () {
        /**
         * @param renderer - The renderer this System works for.
         */
        function RenderTextureSystem(renderer) {
          this.renderer = renderer;
          this.clearColor = renderer._backgroundColorRgba;
          this.defaultMaskStack = [];
          this.current = null;
          this.sourceFrame = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Rectangle();
          this.destinationFrame = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Rectangle();
          this.viewportFrame = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Rectangle();
        }
        /**
         * Bind the current render texture.
         *
         * @param renderTexture - RenderTexture to bind, by default its `null` - the screen.
         * @param sourceFrame - Part of world that is mapped to the renderTexture.
         * @param destinationFrame - Part of renderTexture, by default it has the same size as sourceFrame.
         */


        RenderTextureSystem.prototype.bind = function (renderTexture, sourceFrame, destinationFrame) {
          if (renderTexture === void 0) {
            renderTexture = null;
          }

          var renderer = this.renderer;
          this.current = renderTexture;
          var baseTexture;
          var framebuffer;
          var resolution;

          if (renderTexture) {
            baseTexture = renderTexture.baseTexture;
            resolution = baseTexture.resolution;

            if (!sourceFrame) {
              tempRect.width = renderTexture.frame.width;
              tempRect.height = renderTexture.frame.height;
              sourceFrame = tempRect;
            }

            if (!destinationFrame) {
              tempRect2.x = renderTexture.frame.x;
              tempRect2.y = renderTexture.frame.y;
              tempRect2.width = sourceFrame.width;
              tempRect2.height = sourceFrame.height;
              destinationFrame = tempRect2;
            }

            framebuffer = baseTexture.framebuffer;
          } else {
            resolution = renderer.resolution;

            if (!sourceFrame) {
              tempRect.width = renderer.screen.width;
              tempRect.height = renderer.screen.height;
              sourceFrame = tempRect;
            }

            if (!destinationFrame) {
              destinationFrame = tempRect;
              destinationFrame.width = sourceFrame.width;
              destinationFrame.height = sourceFrame.height;
            }
          }

          var viewportFrame = this.viewportFrame;
          viewportFrame.x = destinationFrame.x * resolution;
          viewportFrame.y = destinationFrame.y * resolution;
          viewportFrame.width = destinationFrame.width * resolution;
          viewportFrame.height = destinationFrame.height * resolution;

          if (!renderTexture) {
            viewportFrame.y = renderer.view.height - (viewportFrame.y + viewportFrame.height);
          }

          viewportFrame.ceil();
          this.renderer.framebuffer.bind(framebuffer, viewportFrame);
          this.renderer.projection.update(destinationFrame, sourceFrame, resolution, !framebuffer);

          if (renderTexture) {
            this.renderer.mask.setMaskStack(baseTexture.maskStack);
          } else {
            this.renderer.mask.setMaskStack(this.defaultMaskStack);
          }

          this.sourceFrame.copyFrom(sourceFrame);
          this.destinationFrame.copyFrom(destinationFrame);
        };
        /**
         * Erases the render texture and fills the drawing area with a colour.
         *
         * @param clearColor - The color as rgba, default to use the renderer backgroundColor
         * @param [mask=BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH] - Bitwise OR of masks
         *  that indicate the buffers to be cleared, by default COLOR and DEPTH buffers.
         */


        RenderTextureSystem.prototype.clear = function (clearColor, mask) {
          if (this.current) {
            clearColor = clearColor || this.current.baseTexture.clearColor;
          } else {
            clearColor = clearColor || this.clearColor;
          }

          var destinationFrame = this.destinationFrame;
          var baseFrame = this.current ? this.current.baseTexture : this.renderer.screen;
          var clearMask = destinationFrame.width !== baseFrame.width || destinationFrame.height !== baseFrame.height;

          if (clearMask) {
            var _a = this.viewportFrame,
                x = _a.x,
                y = _a.y,
                width = _a.width,
                height = _a.height;
            x = Math.round(x);
            y = Math.round(y);
            width = Math.round(width);
            height = Math.round(height); // TODO: ScissorSystem should cache whether the scissor test is enabled or not.

            this.renderer.gl.enable(this.renderer.gl.SCISSOR_TEST);
            this.renderer.gl.scissor(x, y, width, height);
          }

          this.renderer.framebuffer.clear(clearColor[0], clearColor[1], clearColor[2], clearColor[3], mask);

          if (clearMask) {
            // Restore the scissor box
            this.renderer.scissor.pop();
          }
        };

        RenderTextureSystem.prototype.resize = function () {
          // resize the root only!
          this.bind(null);
        };
        /** Resets render-texture state. */


        RenderTextureSystem.prototype.reset = function () {
          this.bind(null);
        };

        RenderTextureSystem.prototype.destroy = function () {
          this.renderer = null;
        };

        return RenderTextureSystem;
      }();

      function uboUpdate(_ud, _uv, _renderer, _syncData, buffer) {
        _renderer.buffer.update(buffer);
      } // cv = CachedValue
      // v = value
      // ud = uniformData
      // uv = uniformValue
      // l = location


      var UBO_TO_SINGLE_SETTERS = {
        "float": "\n        data[offset] = v;\n    ",
        vec2: "\n        data[offset] = v[0];\n        data[offset+1] = v[1];\n    ",
        vec3: "\n        data[offset] = v[0];\n        data[offset+1] = v[1];\n        data[offset+2] = v[2];\n\n    ",
        vec4: "\n        data[offset] = v[0];\n        data[offset+1] = v[1];\n        data[offset+2] = v[2];\n        data[offset+3] = v[3];\n    ",
        mat2: "\n        data[offset] = v[0];\n        data[offset+1] = v[1];\n\n        data[offset+4] = v[2];\n        data[offset+5] = v[3];\n    ",
        mat3: "\n        data[offset] = v[0];\n        data[offset+1] = v[1];\n        data[offset+2] = v[2];\n\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];\n    ",
        mat4: "\n        for(var i = 0; i < 16; i++)\n        {\n            data[offset + i] = v[i];\n        }\n    "
      };
      var GLSL_TO_STD40_SIZE = {
        "float": 4,
        vec2: 8,
        vec3: 12,
        vec4: 16,
        "int": 4,
        ivec2: 8,
        ivec3: 12,
        ivec4: 16,
        uint: 4,
        uvec2: 8,
        uvec3: 12,
        uvec4: 16,
        bool: 4,
        bvec2: 8,
        bvec3: 12,
        bvec4: 16,
        mat2: 16 * 2,
        mat3: 16 * 3,
        mat4: 16 * 4
      };
      /**
       * @ignore
       *
       * logic originally from here: https://github.com/sketchpunk/FunWithWebGL2/blob/master/lesson_022/Shaders.js
       * rewrote it, but this was a great starting point to get a solid understanding of whats going on :)
       *
       * @param uniformData
       */

      function _createUBOElements(uniformData) {
        var uboElements = uniformData.map(function (data) {
          return {
            data: data,
            offset: 0,
            dataLen: 0,
            dirty: 0
          };
        });
        var size = 0;
        var chunkSize = 0;
        var offset = 0;

        for (var i = 0; i < uboElements.length; i++) {
          var uboElement = uboElements[i];
          size = GLSL_TO_STD40_SIZE[uboElement.data.type];

          if (uboElement.data.size > 1) {
            size = Math.max(size, 16) * uboElement.data.size;
          }

          uboElement.dataLen = size; // add some size offset..
          // must align to the nearest 16 bytes or internally nearest round size

          if (chunkSize % size !== 0 && chunkSize < 16) {
            // diff required to line up..
            var lineUpValue = chunkSize % size % 16;
            chunkSize += lineUpValue;
            offset += lineUpValue;
          }

          if (chunkSize + size > 16) {
            offset = Math.ceil(offset / 16) * 16;
            uboElement.offset = offset;
            offset += size;
            chunkSize = size;
          } else {
            uboElement.offset = offset;
            chunkSize += size;
            offset += size;
          }
        }

        offset = Math.ceil(offset / 16) * 16;
        return {
          uboElements: uboElements,
          size: offset
        };
      }

      function _getUBOData(uniforms, uniformData) {
        var usedUniformDatas = []; // build..

        for (var i in uniforms) {
          if (uniformData[i]) {
            usedUniformDatas.push(uniformData[i]);
          }
        } // sort them out by index!


        usedUniformDatas.sort(function (a, b) {
          return a.index - b.index;
        });
        return usedUniformDatas;
      }

      function _generateUniformBufferSync(group, uniformData) {
        if (!group.autoManage) {
          // if the group is nott automatically managed, we don't need to generate a special function for it...
          return {
            size: 0,
            syncFunc: uboUpdate
          };
        }

        var usedUniformDatas = _getUBOData(group.uniforms, uniformData);

        var _a = _createUBOElements(usedUniformDatas),
            uboElements = _a.uboElements,
            size = _a.size;

        var funcFragments = ["\n    var v = null;\n    var v2 = null;\n    var cv = null;\n    var t = 0;\n    var gl = renderer.gl\n    var index = 0;\n    var data = buffer.data;\n    "];

        for (var i = 0; i < uboElements.length; i++) {
          var uboElement = uboElements[i];
          var uniform = group.uniforms[uboElement.data.name];
          var name = uboElement.data.name;
          var parsed = false;

          for (var j = 0; j < _uniformParsers.length; j++) {
            var uniformParser = _uniformParsers[j];

            if (uniformParser.codeUbo && uniformParser.test(uboElement.data, uniform)) {
              funcFragments.push("offset = " + uboElement.offset / 4 + ";", _uniformParsers[j].codeUbo(uboElement.data.name, uniform));
              parsed = true;
              break;
            }
          }

          if (!parsed) {
            if (uboElement.data.size > 1) {
              var size_1 = mapSize(uboElement.data.type);
              var rowSize = Math.max(GLSL_TO_STD40_SIZE[uboElement.data.type] / 16, 1);
              var elementSize = size_1 / rowSize;
              var remainder = (4 - elementSize % 4) % 4;
              funcFragments.push("\n                cv = ud." + name + ".value;\n                v = uv." + name + ";\n                offset = " + uboElement.offset / 4 + ";\n\n                t = 0;\n\n                for(var i=0; i < " + uboElement.data.size * rowSize + "; i++)\n                {\n                    for(var j = 0; j < " + elementSize + "; j++)\n                    {\n                        data[offset++] = v[t++];\n                    }\n                    offset += " + remainder + ";\n                }\n\n                ");
            } else {
              var template = UBO_TO_SINGLE_SETTERS[uboElement.data.type];
              funcFragments.push("\n                cv = ud." + name + ".value;\n                v = uv." + name + ";\n                offset = " + uboElement.offset / 4 + ";\n                " + template + ";\n                ");
            }
          }
        }

        funcFragments.push("\n       renderer.buffer.update(buffer);\n    ");
        return {
          size: size,
          // eslint-disable-next-line no-new-func
          syncFunc: new Function('ud', 'uv', 'renderer', 'syncData', 'buffer', funcFragments.join('\n'))
        };
      }
      /**
       * @private
       */


      var _IGLUniformData =
      /** @class */
      function () {
        function IGLUniformData() {}

        return IGLUniformData;
      }();
      /**
       * Helper class to create a WebGL Program
       *
       * @class
       * @memberof PIXI
       */


      var _GLProgram =
      /** @class */
      function () {
        /**
         * Makes a new Pixi program
         *
         * @param {WebGLProgram} program - webgl program
         * @param {Object} uniformData - uniforms
         */
        function GLProgram(program, uniformData) {
          /**
           * The shader program
           *
           * @member {WebGLProgram}
           */
          this.program = program;
          /**
           * holds the uniform data which contains uniform locations
           * and current uniform values used for caching and preventing unneeded GPU commands
           * @member {Object}
           */

          this.uniformData = uniformData;
          /**
           * uniformGroups holds the various upload functions for the shader. Each uniform group
           * and program have a unique upload function generated.
           * @member {Object}
           */

          this.uniformGroups = {};
          this.uniformDirtyGroups = {};
          this.uniformBufferBindings = {};
        }
        /**
         * Destroys this program
         */


        GLProgram.prototype.destroy = function () {
          this.uniformData = null;
          this.uniformGroups = null;
          this.uniformDirtyGroups = null;
          this.uniformBufferBindings = null;
          this.program = null;
        };

        return GLProgram;
      }();
      /**
       * returns the attribute data from the program
       * @private
       *
       * @param {WebGLProgram} [program] - the WebGL program
       * @param {WebGLRenderingContext} [gl] - the WebGL context
       *
       * @returns {object} the attribute data for this program
       */


      function getAttributeData(program, gl) {
        var attributes = {};
        var totalAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);

        for (var i = 0; i < totalAttributes; i++) {
          var attribData = gl.getActiveAttrib(program, i);

          if (attribData.name.indexOf('gl_') === 0) {
            continue;
          }

          var type = mapType(gl, attribData.type);
          var data = {
            type: type,
            name: attribData.name,
            size: mapSize(type),
            location: gl.getAttribLocation(program, attribData.name)
          };
          attributes[attribData.name] = data;
        }

        return attributes;
      }
      /**
       * returns the uniform data from the program
       * @private
       *
       * @param program - the webgl program
       * @param gl - the WebGL context
       *
       * @returns {object} the uniform data for this program
       */


      function getUniformData(program, gl) {
        var uniforms = {};
        var totalUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);

        for (var i = 0; i < totalUniforms; i++) {
          var uniformData = gl.getActiveUniform(program, i);
          var name = uniformData.name.replace(/\[.*?\]$/, '');
          var isArray = !!uniformData.name.match(/\[.*?\]$/);
          var type = mapType(gl, uniformData.type);
          uniforms[name] = {
            name: name,
            index: i,
            type: type,
            size: uniformData.size,
            isArray: isArray,
            value: defaultValue(type, uniformData.size)
          };
        }

        return uniforms;
      }
      /**
       * generates a WebGL Program object from a high level Pixi Program.
       *
       * @param gl - a rendering context on which to generate the program
       * @param program - the high level Pixi Program.
       */


      function _generateProgram(gl, program) {
        var glVertShader = compileShader(gl, gl.VERTEX_SHADER, program.vertexSrc);
        var glFragShader = compileShader(gl, gl.FRAGMENT_SHADER, program.fragmentSrc);
        var webGLProgram = gl.createProgram();
        gl.attachShader(webGLProgram, glVertShader);
        gl.attachShader(webGLProgram, glFragShader);
        gl.linkProgram(webGLProgram);

        if (!gl.getProgramParameter(webGLProgram, gl.LINK_STATUS)) {
          logProgramError(gl, webGLProgram, glVertShader, glFragShader);
        }

        program.attributeData = getAttributeData(webGLProgram, gl);
        program.uniformData = getUniformData(webGLProgram, gl); // GLSL 1.00: bind attributes sorted by name in ascending order
        // GLSL 3.00: don't change the attribute locations that where chosen by the compiler
        //            or assigned by the layout specifier in the shader source code

        if (!/^[ \t]*#[ \t]*version[ \t]+300[ \t]+es[ \t]*$/m.test(program.vertexSrc)) {
          var keys = Object.keys(program.attributeData);
          keys.sort(function (a, b) {
            return a > b ? 1 : -1;
          }); // eslint-disable-line no-confusing-arrow

          for (var i = 0; i < keys.length; i++) {
            program.attributeData[keys[i]].location = i;
            gl.bindAttribLocation(webGLProgram, i, keys[i]);
          }

          gl.linkProgram(webGLProgram);
        }

        gl.deleteShader(glVertShader);
        gl.deleteShader(glFragShader);
        var uniformData = {};

        for (var i in program.uniformData) {
          var data = program.uniformData[i];
          uniformData[i] = {
            location: gl.getUniformLocation(webGLProgram, i),
            value: defaultValue(data.type, data.size)
          };
        }

        var glProgram = new _GLProgram(webGLProgram, uniformData);
        return glProgram;
      }

      var UID$4 = 0; // default sync data so we don't create a new one each time!

      var defaultSyncData = {
        textureCount: 0,
        uboCount: 0
      };
      /**
       * System plugin to the renderer to manage shaders.
       *
       * @memberof PIXI
       */

      var _ShaderSystem =
      /** @class */
      function () {
        /** @param renderer - The renderer this System works for. */
        function ShaderSystem(renderer) {
          this.destroyed = false;
          this.renderer = renderer; // Validation check that this environment support `new Function`

          this.systemCheck();
          this.gl = null;
          this.shader = null;
          this.program = null;
          this.cache = {};
          this._uboCache = {};
          this.id = UID$4++;
        }
        /**
         * Overrideable function by `@pixi/unsafe-eval` to silence
         * throwing an error if platform doesn't support unsafe-evals.
         *
         * @private
         */


        ShaderSystem.prototype.systemCheck = function () {
          if (!unsafeEvalSupported()) {
            throw new Error('Current environment does not allow unsafe-eval, ' + 'please use @pixi/unsafe-eval module to enable support.');
          }
        };

        ShaderSystem.prototype.contextChange = function (gl) {
          this.gl = gl;
          this.reset();
        };
        /**
         * Changes the current shader to the one given in parameter.
         *
         * @param shader - the new shader
         * @param dontSync - false if the shader should automatically sync its uniforms.
         * @returns the glProgram that belongs to the shader.
         */


        ShaderSystem.prototype.bind = function (shader, dontSync) {
          shader.uniforms.globals = this.renderer.globalUniforms;
          var program = shader.program;
          var glProgram = program.glPrograms[this.renderer.CONTEXT_UID] || this.generateProgram(shader);
          this.shader = shader; // TODO - some current Pixi plugins bypass this.. so it not safe to use yet..

          if (this.program !== program) {
            this.program = program;
            this.gl.useProgram(glProgram.program);
          }

          if (!dontSync) {
            defaultSyncData.textureCount = 0;
            defaultSyncData.uboCount = 0;
            this.syncUniformGroup(shader.uniformGroup, defaultSyncData);
          }

          return glProgram;
        };
        /**
         * Uploads the uniforms values to the currently bound shader.
         *
         * @param uniforms - the uniforms values that be applied to the current shader
         */


        ShaderSystem.prototype.setUniforms = function (uniforms) {
          var shader = this.shader.program;
          var glProgram = shader.glPrograms[this.renderer.CONTEXT_UID];
          shader.syncUniforms(glProgram.uniformData, uniforms, this.renderer);
        };
        /* eslint-disable @typescript-eslint/explicit-module-boundary-types */

        /**
         * Syncs uniforms on the group
         *
         * @param group - the uniform group to sync
         * @param syncData - this is data that is passed to the sync function and any nested sync functions
         */


        ShaderSystem.prototype.syncUniformGroup = function (group, syncData) {
          var glProgram = this.getGlProgram();

          if (!group["static"] || group.dirtyId !== glProgram.uniformDirtyGroups[group.id]) {
            glProgram.uniformDirtyGroups[group.id] = group.dirtyId;
            this.syncUniforms(group, glProgram, syncData);
          }
        };
        /**
         * Overrideable by the @pixi/unsafe-eval package to use static syncUniforms instead.
         */


        ShaderSystem.prototype.syncUniforms = function (group, glProgram, syncData) {
          var syncFunc = group.syncUniforms[this.shader.program.id] || this.createSyncGroups(group);
          syncFunc(glProgram.uniformData, group.uniforms, this.renderer, syncData);
        };

        ShaderSystem.prototype.createSyncGroups = function (group) {
          var id = this.getSignature(group, this.shader.program.uniformData, 'u');

          if (!this.cache[id]) {
            this.cache[id] = generateUniformsSync(group, this.shader.program.uniformData);
          }

          group.syncUniforms[this.shader.program.id] = this.cache[id];
          return group.syncUniforms[this.shader.program.id];
        };
        /**
         * Syncs uniform buffers
         *
         * @param group - the uniform buffer group to sync
         * @param name - the name of the uniform buffer
         */


        ShaderSystem.prototype.syncUniformBufferGroup = function (group, name) {
          var glProgram = this.getGlProgram();

          if (!group["static"] || group.dirtyId !== 0 || !glProgram.uniformGroups[group.id]) {
            group.dirtyId = 0;
            var syncFunc = glProgram.uniformGroups[group.id] || this.createSyncBufferGroup(group, glProgram, name); // TODO wrap update in a cache??

            group.buffer.update();
            syncFunc(glProgram.uniformData, group.uniforms, this.renderer, defaultSyncData, group.buffer);
          }

          this.renderer.buffer.bindBufferBase(group.buffer, glProgram.uniformBufferBindings[name]);
        };
        /**
         * Will create a function that uploads a uniform buffer using the STD140 standard.
         * The upload function will then be cached for future calls
         * If a group is manually managed, then a simple upload function is generated
         *
         * @param group - the uniform buffer group to sync
         * @param glProgram - the gl program to attach the uniform bindings to
         * @param name - the name of the uniform buffer (must exist on the shader)
         */


        ShaderSystem.prototype.createSyncBufferGroup = function (group, glProgram, name) {
          var gl = this.renderer.gl;
          this.renderer.buffer.bind(group.buffer); // bind them...

          var uniformBlockIndex = this.gl.getUniformBlockIndex(glProgram.program, name);
          glProgram.uniformBufferBindings[name] = this.shader.uniformBindCount;
          gl.uniformBlockBinding(glProgram.program, uniformBlockIndex, this.shader.uniformBindCount);
          this.shader.uniformBindCount++;
          var id = this.getSignature(group, this.shader.program.uniformData, 'ubo');
          var uboData = this._uboCache[id];

          if (!uboData) {
            uboData = this._uboCache[id] = _generateUniformBufferSync(group, this.shader.program.uniformData);
          }

          if (group.autoManage) {
            var data = new Float32Array(uboData.size / 4);
            group.buffer.update(data);
          }

          glProgram.uniformGroups[group.id] = uboData.syncFunc;
          return glProgram.uniformGroups[group.id];
        };
        /**
         * Takes a uniform group and data and generates a unique signature for them.
         *
         * @param group - The uniform group to get signature of
         * @param uniformData - Uniform information generated by the shader
         * @returns Unique signature of the uniform group
         */


        ShaderSystem.prototype.getSignature = function (group, uniformData, preFix) {
          var uniforms = group.uniforms;
          var strings = [preFix + "-"];

          for (var i in uniforms) {
            strings.push(i);

            if (uniformData[i]) {
              strings.push(uniformData[i].type);
            }
          }

          return strings.join('-');
        };
        /**
         * Returns the underlying GLShade rof the currently bound shader.
         *
         * This can be handy for when you to have a little more control over the setting of your uniforms.
         *
         * @return The glProgram for the currently bound Shader for this context
         */


        ShaderSystem.prototype.getGlProgram = function () {
          if (this.shader) {
            return this.shader.program.glPrograms[this.renderer.CONTEXT_UID];
          }

          return null;
        };
        /**
         * Generates a glProgram version of the Shader provided.
         *
         * @param shader - The shader that the glProgram will be based on.
         * @return A shiny new glProgram!
         */


        ShaderSystem.prototype.generateProgram = function (shader) {
          var gl = this.gl;
          var program = shader.program;

          var glProgram = _generateProgram(gl, program);

          program.glPrograms[this.renderer.CONTEXT_UID] = glProgram;
          return glProgram;
        };
        /** Resets ShaderSystem state, does not affect WebGL state. */


        ShaderSystem.prototype.reset = function () {
          this.program = null;
          this.shader = null;
        };
        /** Destroys this System and removes all its textures. */


        ShaderSystem.prototype.destroy = function () {
          this.renderer = null; // TODO implement destroy method for ShaderSystem

          this.destroyed = true;
        };

        return ShaderSystem;
      }();
      /**
       * Maps gl blend combinations to WebGL.
       *
       * @memberof PIXI
       * @function mapWebGLBlendModesToPixi
       * @private
       * @param {WebGLRenderingContext} gl - The rendering context.
       * @param {number[][]} [array=[]] - The array to output into.
       * @return {number[][]} Mapped modes.
       */


      function mapWebGLBlendModesToPixi(gl, array) {
        if (array === void 0) {
          array = [];
        } // TODO - premultiply alpha would be different.
        // add a boolean for that!


        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.NORMAL] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.ADD] = [gl.ONE, gl.ONE];
        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.MULTIPLY] = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.SCREEN] = [gl.ONE, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.OVERLAY] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.DARKEN] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.LIGHTEN] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.COLOR_DODGE] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.COLOR_BURN] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.HARD_LIGHT] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.SOFT_LIGHT] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.DIFFERENCE] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.EXCLUSION] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.HUE] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.SATURATION] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.COLOR] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.LUMINOSITY] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.NONE] = [0, 0]; // not-premultiplied blend modes

        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.NORMAL_NPM] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.ADD_NPM] = [gl.SRC_ALPHA, gl.ONE, gl.ONE, gl.ONE];
        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.SCREEN_NPM] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA]; // composite operations

        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.SRC_IN] = [gl.DST_ALPHA, gl.ZERO];
        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.SRC_OUT] = [gl.ONE_MINUS_DST_ALPHA, gl.ZERO];
        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.SRC_ATOP] = [gl.DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA];
        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.DST_OVER] = [gl.ONE_MINUS_DST_ALPHA, gl.ONE];
        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.DST_IN] = [gl.ZERO, gl.SRC_ALPHA];
        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.DST_OUT] = [gl.ZERO, gl.ONE_MINUS_SRC_ALPHA];
        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.DST_ATOP] = [gl.ONE_MINUS_DST_ALPHA, gl.SRC_ALPHA];
        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.XOR] = [gl.ONE_MINUS_DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA]; // SUBTRACT from flash

        array[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.SUBTRACT] = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, gl.FUNC_REVERSE_SUBTRACT, gl.FUNC_ADD];
        return array;
      }

      var BLEND$1 = 0;
      var OFFSET$1 = 1;
      var CULLING$1 = 2;
      var DEPTH_TEST$1 = 3;
      var WINDING$1 = 4;
      var DEPTH_MASK$1 = 5;
      /**
       * System plugin to the renderer to manage WebGL state machines.
       *
       * @memberof PIXI
       */

      var _StateSystem =
      /** @class */
      function () {
        function StateSystem() {
          this.gl = null;
          this.stateId = 0;
          this.polygonOffset = 0;
          this.blendMode = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.BLEND_MODES.NONE;
          this._blendEq = false; // map functions for when we set state..

          this.map = [];
          this.map[BLEND$1] = this.setBlend;
          this.map[OFFSET$1] = this.setOffset;
          this.map[CULLING$1] = this.setCullFace;
          this.map[DEPTH_TEST$1] = this.setDepthTest;
          this.map[WINDING$1] = this.setFrontFace;
          this.map[DEPTH_MASK$1] = this.setDepthMask;
          this.checks = [];
          this.defaultState = new _State();
          this.defaultState.blend = true;
        }

        StateSystem.prototype.contextChange = function (gl) {
          this.gl = gl;
          this.blendModes = mapWebGLBlendModesToPixi(gl);
          this.set(this.defaultState);
          this.reset();
        };
        /**
         * Sets the current state
         *
         * @param {*} state - The state to set.
         */


        StateSystem.prototype.set = function (state) {
          state = state || this.defaultState; // TODO maybe to an object check? ( this.state === state )?

          if (this.stateId !== state.data) {
            var diff = this.stateId ^ state.data;
            var i = 0; // order from least to most common

            while (diff) {
              if (diff & 1) {
                // state change!
                this.map[i].call(this, !!(state.data & 1 << i));
              }

              diff = diff >> 1;
              i++;
            }

            this.stateId = state.data;
          } // based on the above settings we check for specific modes..
          // for example if blend is active we check and set the blend modes
          // or of polygon offset is active we check the poly depth.


          for (var i = 0; i < this.checks.length; i++) {
            this.checks[i](this, state);
          }
        };
        /**
         * Sets the state, when previous state is unknown.
         *
         * @param {*} state - The state to set
         */


        StateSystem.prototype.forceState = function (state) {
          state = state || this.defaultState;

          for (var i = 0; i < this.map.length; i++) {
            this.map[i].call(this, !!(state.data & 1 << i));
          }

          for (var i = 0; i < this.checks.length; i++) {
            this.checks[i](this, state);
          }

          this.stateId = state.data;
        };
        /**
         * Sets whether to enable or disable blending.
         *
         * @param value - Turn on or off WebGl blending.
         */


        StateSystem.prototype.setBlend = function (value) {
          this.updateCheck(StateSystem.checkBlendMode, value);
          this.gl[value ? 'enable' : 'disable'](this.gl.BLEND);
        };
        /**
         * Sets whether to enable or disable polygon offset fill.
         *
         * @param value - Turn on or off webgl polygon offset testing.
         */


        StateSystem.prototype.setOffset = function (value) {
          this.updateCheck(StateSystem.checkPolygonOffset, value);
          this.gl[value ? 'enable' : 'disable'](this.gl.POLYGON_OFFSET_FILL);
        };
        /**
         * Sets whether to enable or disable depth test.
         *
         * @param value - Turn on or off webgl depth testing.
         */


        StateSystem.prototype.setDepthTest = function (value) {
          this.gl[value ? 'enable' : 'disable'](this.gl.DEPTH_TEST);
        };
        /**
         * Sets whether to enable or disable depth mask.
         *
         * @param value - Turn on or off webgl depth mask.
         */


        StateSystem.prototype.setDepthMask = function (value) {
          this.gl.depthMask(value);
        };
        /**
         * Sets whether to enable or disable cull face.
         *
         * @param {boolean} value - Turn on or off webgl cull face.
         */


        StateSystem.prototype.setCullFace = function (value) {
          this.gl[value ? 'enable' : 'disable'](this.gl.CULL_FACE);
        };
        /**
         * Sets the gl front face.
         *
         * @param {boolean} value - true is clockwise and false is counter-clockwise
         */


        StateSystem.prototype.setFrontFace = function (value) {
          this.gl.frontFace(this.gl[value ? 'CW' : 'CCW']);
        };
        /**
         * Sets the blend mode.
         *
         * @param {number} value - The blend mode to set to.
         */


        StateSystem.prototype.setBlendMode = function (value) {
          if (value === this.blendMode) {
            return;
          }

          this.blendMode = value;
          var mode = this.blendModes[value];
          var gl = this.gl;

          if (mode.length === 2) {
            gl.blendFunc(mode[0], mode[1]);
          } else {
            gl.blendFuncSeparate(mode[0], mode[1], mode[2], mode[3]);
          }

          if (mode.length === 6) {
            this._blendEq = true;
            gl.blendEquationSeparate(mode[4], mode[5]);
          } else if (this._blendEq) {
            this._blendEq = false;
            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
          }
        };
        /**
         * Sets the polygon offset.
         *
         * @param {number} value - the polygon offset
         * @param {number} scale - the polygon offset scale
         */


        StateSystem.prototype.setPolygonOffset = function (value, scale) {
          this.gl.polygonOffset(value, scale);
        }; // used

        /** Resets all the logic and disables the VAOs. */


        StateSystem.prototype.reset = function () {
          this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);
          this.forceState(this.defaultState);
          this._blendEq = true;
          this.blendMode = -1;
          this.setBlendMode(0);
        };
        /**
         * Checks to see which updates should be checked based on which settings have been activated.
         *
         * For example, if blend is enabled then we should check the blend modes each time the state is changed
         * or if polygon fill is activated then we need to check if the polygon offset changes.
         * The idea is that we only check what we have too.
         *
         * @param func - the checking function to add or remove
         * @param value - should the check function be added or removed.
         */


        StateSystem.prototype.updateCheck = function (func, value) {
          var index = this.checks.indexOf(func);

          if (value && index === -1) {
            this.checks.push(func);
          } else if (!value && index !== -1) {
            this.checks.splice(index, 1);
          }
        };
        /**
         * A private little wrapper function that we call to check the blend mode.
         *
         * @param System - the System to perform the state check on
         * @param state - the state that the blendMode will pulled from
         */


        StateSystem.checkBlendMode = function (system, state) {
          system.setBlendMode(state.blendMode);
        };
        /**
         * A private little wrapper function that we call to check the polygon offset.
         *
         * @param System - the System to perform the state check on
         * @param state - the state that the blendMode will pulled from
         */


        StateSystem.checkPolygonOffset = function (system, state) {
          system.setPolygonOffset(1, state.polygonOffset);
        };
        /**
         * @ignore
         */


        StateSystem.prototype.destroy = function () {
          this.gl = null;
        };

        return StateSystem;
      }();
      /**
       * System plugin to the renderer to manage texture garbage collection on the GPU,
       * ensuring that it does not get clogged up with textures that are no longer being used.
       *
       * @class
       * @memberof PIXI
       * @extends PIXI.System
       */


      var _TextureGCSystem =
      /** @class */
      function () {
        /**
         * @param {PIXI.Renderer} renderer - The renderer this System works for.
         */
        function TextureGCSystem(renderer) {
          this.renderer = renderer;
          /**
           * Count
           * @member {number}
           * @readonly
           */

          this.count = 0;
          /**
           * Check count
           * @member {number}
           * @readonly
           */

          this.checkCount = 0;
          /**
           * Maximum idle time, in seconds
           * @member {number}
           * @see PIXI.settings.GC_MAX_IDLE
           */

          this.maxIdle = _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.GC_MAX_IDLE;
          /**
           * Maximum number of item to check
           * @member {number}
           * @see PIXI.settings.GC_MAX_CHECK_COUNT
           */

          this.checkCountMax = _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.GC_MAX_CHECK_COUNT;
          /**
           * Current garbage collection mode
           * @member {PIXI.GC_MODES}
           * @see PIXI.settings.GC_MODE
           */

          this.mode = _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.GC_MODE;
        }
        /**
         * Checks to see when the last time a texture was used
         * if the texture has not been used for a specified amount of time it will be removed from the GPU
         */


        TextureGCSystem.prototype.postrender = function () {
          if (!this.renderer.renderingToScreen) {
            return;
          }

          this.count++;

          if (this.mode === _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.GC_MODES.MANUAL) {
            return;
          }

          this.checkCount++;

          if (this.checkCount > this.checkCountMax) {
            this.checkCount = 0;
            this.run();
          }
        };
        /**
         * Checks to see when the last time a texture was used
         * if the texture has not been used for a specified amount of time it will be removed from the GPU
         */


        TextureGCSystem.prototype.run = function () {
          var tm = this.renderer.texture;
          var managedTextures = tm.managedTextures;
          var wasRemoved = false;

          for (var i = 0; i < managedTextures.length; i++) {
            var texture = managedTextures[i]; // only supports non generated textures at the moment!

            if (!texture.framebuffer && this.count - texture.touched > this.maxIdle) {
              tm.destroyTexture(texture, true);
              managedTextures[i] = null;
              wasRemoved = true;
            }
          }

          if (wasRemoved) {
            var j = 0;

            for (var i = 0; i < managedTextures.length; i++) {
              if (managedTextures[i] !== null) {
                managedTextures[j++] = managedTextures[i];
              }
            }

            managedTextures.length = j;
          }
        };
        /**
         * Removes all the textures within the specified displayObject and its children from the GPU
         *
         * @param {PIXI.DisplayObject} displayObject - the displayObject to remove the textures from.
         */


        TextureGCSystem.prototype.unload = function (displayObject) {
          var tm = this.renderer.texture;
          var texture = displayObject._texture; // only destroy non generated textures

          if (texture && !texture.framebuffer) {
            tm.destroyTexture(texture);
          }

          for (var i = displayObject.children.length - 1; i >= 0; i--) {
            this.unload(displayObject.children[i]);
          }
        };
        /**
         * @ignore
         */


        TextureGCSystem.prototype.destroy = function () {
          this.renderer = null;
        };

        return TextureGCSystem;
      }();
      /**
       * Returns a lookup table that maps each type-format pair to a compatible internal format.
       *
       * @memberof PIXI
       * @function mapTypeAndFormatToInternalFormat
       * @private
       * @param {WebGLRenderingContext} gl - The rendering context.
       * @return {{ [type: number]: { [format: number]: number } }} Lookup table.
       */


      function mapTypeAndFormatToInternalFormat(gl) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;

        var table;

        if ('WebGL2RenderingContext' in self && gl instanceof self.WebGL2RenderingContext) {
          table = (_a = {}, _a[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.UNSIGNED_BYTE] = (_b = {}, _b[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGBA] = gl.RGBA8, _b[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGB] = gl.RGB8, _b[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RG] = gl.RG8, _b[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RED] = gl.R8, _b[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGBA_INTEGER] = gl.RGBA8UI, _b[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGB_INTEGER] = gl.RGB8UI, _b[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RG_INTEGER] = gl.RG8UI, _b[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RED_INTEGER] = gl.R8UI, _b[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.ALPHA] = gl.ALPHA, _b[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.LUMINANCE] = gl.LUMINANCE, _b[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.LUMINANCE_ALPHA] = gl.LUMINANCE_ALPHA, _b), _a[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.BYTE] = (_c = {}, _c[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGBA] = gl.RGBA8_SNORM, _c[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGB] = gl.RGB8_SNORM, _c[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RG] = gl.RG8_SNORM, _c[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RED] = gl.R8_SNORM, _c[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGBA_INTEGER] = gl.RGBA8I, _c[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGB_INTEGER] = gl.RGB8I, _c[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RG_INTEGER] = gl.RG8I, _c[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RED_INTEGER] = gl.R8I, _c), _a[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.UNSIGNED_SHORT] = (_d = {}, _d[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGBA_INTEGER] = gl.RGBA16UI, _d[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGB_INTEGER] = gl.RGB16UI, _d[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RG_INTEGER] = gl.RG16UI, _d[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RED_INTEGER] = gl.R16UI, _d[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.DEPTH_COMPONENT] = gl.DEPTH_COMPONENT16, _d), _a[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.SHORT] = (_e = {}, _e[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGBA_INTEGER] = gl.RGBA16I, _e[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGB_INTEGER] = gl.RGB16I, _e[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RG_INTEGER] = gl.RG16I, _e[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RED_INTEGER] = gl.R16I, _e), _a[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.UNSIGNED_INT] = (_f = {}, _f[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGBA_INTEGER] = gl.RGBA32UI, _f[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGB_INTEGER] = gl.RGB32UI, _f[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RG_INTEGER] = gl.RG32UI, _f[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RED_INTEGER] = gl.R32UI, _f[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.DEPTH_COMPONENT] = gl.DEPTH_COMPONENT24, _f), _a[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.INT] = (_g = {}, _g[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGBA_INTEGER] = gl.RGBA32I, _g[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGB_INTEGER] = gl.RGB32I, _g[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RG_INTEGER] = gl.RG32I, _g[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RED_INTEGER] = gl.R32I, _g), _a[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.FLOAT] = (_h = {}, _h[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGBA] = gl.RGBA32F, _h[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGB] = gl.RGB32F, _h[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RG] = gl.RG32F, _h[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RED] = gl.R32F, _h[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.DEPTH_COMPONENT] = gl.DEPTH_COMPONENT32F, _h), _a[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.HALF_FLOAT] = (_j = {}, _j[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGBA] = gl.RGBA16F, _j[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGB] = gl.RGB16F, _j[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RG] = gl.RG16F, _j[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RED] = gl.R16F, _j), _a[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.UNSIGNED_SHORT_5_6_5] = (_k = {}, _k[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGB] = gl.RGB565, _k), _a[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.UNSIGNED_SHORT_4_4_4_4] = (_l = {}, _l[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGBA] = gl.RGBA4, _l), _a[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.UNSIGNED_SHORT_5_5_5_1] = (_m = {}, _m[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGBA] = gl.RGB5_A1, _m), _a[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.UNSIGNED_INT_2_10_10_10_REV] = (_o = {}, _o[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGBA] = gl.RGB10_A2, _o[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGBA_INTEGER] = gl.RGB10_A2UI, _o), _a[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.UNSIGNED_INT_10F_11F_11F_REV] = (_p = {}, _p[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGB] = gl.R11F_G11F_B10F, _p), _a[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.UNSIGNED_INT_5_9_9_9_REV] = (_q = {}, _q[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGB] = gl.RGB9_E5, _q), _a[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.UNSIGNED_INT_24_8] = (_r = {}, _r[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.DEPTH_STENCIL] = gl.DEPTH24_STENCIL8, _r), _a[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.FLOAT_32_UNSIGNED_INT_24_8_REV] = (_s = {}, _s[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.DEPTH_STENCIL] = gl.DEPTH32F_STENCIL8, _s), _a);
        } else {
          table = (_t = {}, _t[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.UNSIGNED_BYTE] = (_u = {}, _u[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGBA] = gl.RGBA, _u[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGB] = gl.RGB, _u[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.ALPHA] = gl.ALPHA, _u[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.LUMINANCE] = gl.LUMINANCE, _u[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.LUMINANCE_ALPHA] = gl.LUMINANCE_ALPHA, _u), _t[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.UNSIGNED_SHORT_5_6_5] = (_v = {}, _v[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGB] = gl.RGB, _v), _t[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.UNSIGNED_SHORT_4_4_4_4] = (_w = {}, _w[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGBA] = gl.RGBA, _w), _t[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.UNSIGNED_SHORT_5_5_5_1] = (_x = {}, _x[_pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGBA] = gl.RGBA, _x), _t);
        }

        return table;
      }
      /**
       * Internal texture for WebGL context
       * @class
       * @memberof PIXI
       */


      var _GLTexture =
      /** @class */
      function () {
        function GLTexture(texture) {
          /**
           * The WebGL texture
           * @member {WebGLTexture}
           */
          this.texture = texture;
          /**
           * Width of texture that was used in texImage2D
           * @member {number}
           */

          this.width = -1;
          /**
           * Height of texture that was used in texImage2D
           * @member {number}
           */

          this.height = -1;
          /**
           * Texture contents dirty flag
           * @member {number}
           */

          this.dirtyId = -1;
          /**
           * Texture style dirty flag
           * @member {number}
           */

          this.dirtyStyleId = -1;
          /**
           * Whether mip levels has to be generated
           * @member {boolean}
           */

          this.mipmap = false;
          /**
           * WrapMode copied from baseTexture
           * @member {number}
           */

          this.wrapMode = 33071;
          /**
           * Type copied from baseTexture
           * @member {number}
           */

          this.type = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.UNSIGNED_BYTE;
          /**
           * Type copied from baseTexture
           * @member {number}
           */

          this.internalFormat = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.FORMATS.RGBA;
          this.samplerType = 0;
        }

        return GLTexture;
      }();
      /**
       * System plugin to the renderer to manage textures.
       *
       * @class
       * @extends PIXI.System
       * @memberof PIXI
       */


      var _TextureSystem =
      /** @class */
      function () {
        /**
         * @param {PIXI.Renderer} renderer - The renderer this System works for.
         */
        function TextureSystem(renderer) {
          this.renderer = renderer; // TODO set to max textures...

          /**
           * Bound textures
           * @member {PIXI.BaseTexture[]}
           * @readonly
           */

          this.boundTextures = [];
          /**
           * Current location
           * @member {number}
           * @readonly
           */

          this.currentLocation = -1;
          /**
           * List of managed textures
           * @member {PIXI.BaseTexture[]}
           * @readonly
           */

          this.managedTextures = [];
          /**
           * Did someone temper with textures state? We'll overwrite them when we need to unbind something.
           * @member {boolean}
           * @private
           */

          this._unknownBoundTextures = false;
          /**
           * BaseTexture value that shows that we don't know what is bound
           * @member {PIXI.BaseTexture}
           * @readonly
           */

          this.unknownTexture = new _BaseTexture();
          this.hasIntegerTextures = false;
        }
        /**
         * Sets up the renderer context and necessary buffers.
         */


        TextureSystem.prototype.contextChange = function () {
          var gl = this.gl = this.renderer.gl;
          this.CONTEXT_UID = this.renderer.CONTEXT_UID;
          this.webGLVersion = this.renderer.context.webGLVersion;
          this.internalFormats = mapTypeAndFormatToInternalFormat(gl);
          var maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
          this.boundTextures.length = maxTextures;

          for (var i = 0; i < maxTextures; i++) {
            this.boundTextures[i] = null;
          } // TODO move this.. to a nice make empty textures class..


          this.emptyTextures = {};
          var emptyTexture2D = new _GLTexture(gl.createTexture());
          gl.bindTexture(gl.TEXTURE_2D, emptyTexture2D.texture);
          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4));
          this.emptyTextures[gl.TEXTURE_2D] = emptyTexture2D;
          this.emptyTextures[gl.TEXTURE_CUBE_MAP] = new _GLTexture(gl.createTexture());
          gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.emptyTextures[gl.TEXTURE_CUBE_MAP].texture);

          for (var i = 0; i < 6; i++) {
            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
          }

          gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
          gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);

          for (var i = 0; i < this.boundTextures.length; i++) {
            this.bind(null, i);
          }
        };
        /**
         * Bind a texture to a specific location
         *
         * If you want to unbind something, please use `unbind(texture)` instead of `bind(null, textureLocation)`
         *
         * @param {PIXI.Texture|PIXI.BaseTexture} texture_ - Texture to bind
         * @param {number} [location=0] - Location to bind at
         */


        TextureSystem.prototype.bind = function (texture, location) {
          if (location === void 0) {
            location = 0;
          }

          var gl = this.gl;
          texture = texture === null || texture === void 0 ? void 0 : texture.castToBaseTexture(); // cannot bind partial texture
          // TODO: report a warning

          if (texture && texture.valid && !texture.parentTextureArray) {
            texture.touched = this.renderer.textureGC.count;
            var glTexture = texture._glTextures[this.CONTEXT_UID] || this.initTexture(texture);

            if (this.boundTextures[location] !== texture) {
              if (this.currentLocation !== location) {
                this.currentLocation = location;
                gl.activeTexture(gl.TEXTURE0 + location);
              }

              gl.bindTexture(texture.target, glTexture.texture);
            }

            if (glTexture.dirtyId !== texture.dirtyId) {
              if (this.currentLocation !== location) {
                this.currentLocation = location;
                gl.activeTexture(gl.TEXTURE0 + location);
              }

              this.updateTexture(texture);
            }

            this.boundTextures[location] = texture;
          } else {
            if (this.currentLocation !== location) {
              this.currentLocation = location;
              gl.activeTexture(gl.TEXTURE0 + location);
            }

            gl.bindTexture(gl.TEXTURE_2D, this.emptyTextures[gl.TEXTURE_2D].texture);
            this.boundTextures[location] = null;
          }
        };
        /**
         * Resets texture location and bound textures
         *
         * Actual `bind(null, i)` calls will be performed at next `unbind()` call
         */


        TextureSystem.prototype.reset = function () {
          this._unknownBoundTextures = true;
          this.hasIntegerTextures = false;
          this.currentLocation = -1;

          for (var i = 0; i < this.boundTextures.length; i++) {
            this.boundTextures[i] = this.unknownTexture;
          }
        };
        /**
         * Unbind a texture
         * @param {PIXI.BaseTexture} texture - Texture to bind
         */


        TextureSystem.prototype.unbind = function (texture) {
          var _a = this,
              gl = _a.gl,
              boundTextures = _a.boundTextures;

          if (this._unknownBoundTextures) {
            this._unknownBoundTextures = false; // someone changed webGL state,
            // we have to be sure that our texture does not appear in multi-texture renderer samplers

            for (var i = 0; i < boundTextures.length; i++) {
              if (boundTextures[i] === this.unknownTexture) {
                this.bind(null, i);
              }
            }
          }

          for (var i = 0; i < boundTextures.length; i++) {
            if (boundTextures[i] === texture) {
              if (this.currentLocation !== i) {
                gl.activeTexture(gl.TEXTURE0 + i);
                this.currentLocation = i;
              }

              gl.bindTexture(texture.target, this.emptyTextures[texture.target].texture);
              boundTextures[i] = null;
            }
          }
        };
        /**
         * Ensures that current boundTextures all have FLOAT sampler type,
         * see {@link PIXI.SAMPLER_TYPES} for explanation.
         *
         * @param maxTextures - number of locations to check
         */


        TextureSystem.prototype.ensureSamplerType = function (maxTextures) {
          var _a = this,
              boundTextures = _a.boundTextures,
              hasIntegerTextures = _a.hasIntegerTextures,
              CONTEXT_UID = _a.CONTEXT_UID;

          if (!hasIntegerTextures) {
            return;
          }

          for (var i = maxTextures - 1; i >= 0; --i) {
            var tex = boundTextures[i];

            if (tex) {
              var glTexture = tex._glTextures[CONTEXT_UID];

              if (glTexture.samplerType !== _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.SAMPLER_TYPES.FLOAT) {
                this.renderer.texture.unbind(tex);
              }
            }
          }
        };
        /**
         * Initialize a texture
         *
         * @private
         * @param {PIXI.BaseTexture} texture - Texture to initialize
         */


        TextureSystem.prototype.initTexture = function (texture) {
          var glTexture = new _GLTexture(this.gl.createTexture()); // guarantee an update..

          glTexture.dirtyId = -1;
          texture._glTextures[this.CONTEXT_UID] = glTexture;
          this.managedTextures.push(texture);
          texture.on('dispose', this.destroyTexture, this);
          return glTexture;
        };

        TextureSystem.prototype.initTextureType = function (texture, glTexture) {
          var _a, _b;

          glTexture.internalFormat = (_b = (_a = this.internalFormats[texture.type]) === null || _a === void 0 ? void 0 : _a[texture.format]) !== null && _b !== void 0 ? _b : texture.format;

          if (this.webGLVersion === 2 && texture.type === _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.HALF_FLOAT) {
            // TYPES.HALF_FLOAT is WebGL1 HALF_FLOAT_OES
            // we have to convert it to WebGL HALF_FLOAT
            glTexture.type = this.gl.HALF_FLOAT;
          } else {
            glTexture.type = texture.type;
          }
        };
        /**
         * Update a texture
         *
         * @private
         * @param {PIXI.BaseTexture} texture - Texture to initialize
         */


        TextureSystem.prototype.updateTexture = function (texture) {
          var glTexture = texture._glTextures[this.CONTEXT_UID];

          if (!glTexture) {
            return;
          }

          var renderer = this.renderer;
          this.initTextureType(texture, glTexture);

          if (texture.resource && texture.resource.upload(renderer, texture, glTexture)) {
            // texture is uploaded, dont do anything!
            if (glTexture.samplerType !== _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.SAMPLER_TYPES.FLOAT) {
              this.hasIntegerTextures = true;
            }
          } else {
            // default, renderTexture-like logic
            var width = texture.realWidth;
            var height = texture.realHeight;
            var gl = renderer.gl;

            if (glTexture.width !== width || glTexture.height !== height || glTexture.dirtyId < 0) {
              glTexture.width = width;
              glTexture.height = height;
              gl.texImage2D(texture.target, 0, glTexture.internalFormat, width, height, 0, texture.format, glTexture.type, null);
            }
          } // lets only update what changes..


          if (texture.dirtyStyleId !== glTexture.dirtyStyleId) {
            this.updateTextureStyle(texture);
          }

          glTexture.dirtyId = texture.dirtyId;
        };
        /**
         * Deletes the texture from WebGL
         *
         * @private
         * @param {PIXI.BaseTexture|PIXI.Texture} texture_ - the texture to destroy
         * @param {boolean} [skipRemove=false] - Whether to skip removing the texture from the TextureManager.
         */


        TextureSystem.prototype.destroyTexture = function (texture, skipRemove) {
          var gl = this.gl;
          texture = texture.castToBaseTexture();

          if (texture._glTextures[this.CONTEXT_UID]) {
            this.unbind(texture);
            gl.deleteTexture(texture._glTextures[this.CONTEXT_UID].texture);
            texture.off('dispose', this.destroyTexture, this);
            delete texture._glTextures[this.CONTEXT_UID];

            if (!skipRemove) {
              var i = this.managedTextures.indexOf(texture);

              if (i !== -1) {
                (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.removeItems)(this.managedTextures, i, 1);
              }
            }
          }
        };
        /**
         * Update texture style such as mipmap flag
         *
         * @private
         * @param {PIXI.BaseTexture} texture - Texture to update
         */


        TextureSystem.prototype.updateTextureStyle = function (texture) {
          var glTexture = texture._glTextures[this.CONTEXT_UID];

          if (!glTexture) {
            return;
          }

          if ((texture.mipmap === _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MIPMAP_MODES.POW2 || this.webGLVersion !== 2) && !texture.isPowerOfTwo) {
            glTexture.mipmap = false;
          } else {
            glTexture.mipmap = texture.mipmap >= 1;
          }

          if (this.webGLVersion !== 2 && !texture.isPowerOfTwo) {
            glTexture.wrapMode = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.WRAP_MODES.CLAMP;
          } else {
            glTexture.wrapMode = texture.wrapMode;
          }

          if (texture.resource && texture.resource.style(this.renderer, texture, glTexture)) ;else {
            this.setStyle(texture, glTexture);
          }
          glTexture.dirtyStyleId = texture.dirtyStyleId;
        };
        /**
         * Set style for texture
         *
         * @private
         * @param {PIXI.BaseTexture} texture - Texture to update
         * @param {PIXI.GLTexture} glTexture
         */


        TextureSystem.prototype.setStyle = function (texture, glTexture) {
          var gl = this.gl;

          if (glTexture.mipmap && texture.mipmap !== _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MIPMAP_MODES.ON_MANUAL) {
            gl.generateMipmap(texture.target);
          }

          gl.texParameteri(texture.target, gl.TEXTURE_WRAP_S, glTexture.wrapMode);
          gl.texParameteri(texture.target, gl.TEXTURE_WRAP_T, glTexture.wrapMode);

          if (glTexture.mipmap) {
            /* eslint-disable max-len */
            gl.texParameteri(texture.target, gl.TEXTURE_MIN_FILTER, texture.scaleMode === _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.SCALE_MODES.LINEAR ? gl.LINEAR_MIPMAP_LINEAR : gl.NEAREST_MIPMAP_NEAREST);
            /* eslint-disable max-len */

            var anisotropicExt = this.renderer.context.extensions.anisotropicFiltering;

            if (anisotropicExt && texture.anisotropicLevel > 0 && texture.scaleMode === _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.SCALE_MODES.LINEAR) {
              var level = Math.min(texture.anisotropicLevel, gl.getParameter(anisotropicExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT));
              gl.texParameterf(texture.target, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, level);
            }
          } else {
            gl.texParameteri(texture.target, gl.TEXTURE_MIN_FILTER, texture.scaleMode === _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.SCALE_MODES.LINEAR ? gl.LINEAR : gl.NEAREST);
          }

          gl.texParameteri(texture.target, gl.TEXTURE_MAG_FILTER, texture.scaleMode === _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.SCALE_MODES.LINEAR ? gl.LINEAR : gl.NEAREST);
        };
        /**
         * @ignore
         */


        TextureSystem.prototype.destroy = function () {
          this.renderer = null;
        };

        return TextureSystem;
      }();

      var _systems = {
        __proto__: null,
        FilterSystem: _FilterSystem,
        BatchSystem: _BatchSystem,
        ContextSystem: _ContextSystem,
        FramebufferSystem: _FramebufferSystem,
        GeometrySystem: _GeometrySystem,
        MaskSystem: _MaskSystem,
        ScissorSystem: _ScissorSystem,
        StencilSystem: _StencilSystem,
        ProjectionSystem: _ProjectionSystem,
        RenderTextureSystem: _RenderTextureSystem,
        ShaderSystem: _ShaderSystem,
        StateSystem: _StateSystem,
        TextureGCSystem: _TextureGCSystem,
        TextureSystem: _TextureSystem
      };
      var tempMatrix$2 = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Matrix();
      /**
       * The AbstractRenderer is the base for a PixiJS Renderer. It is extended by the {@link PIXI.CanvasRenderer}
       * and {@link PIXI.Renderer} which can be used for rendering a PixiJS scene.
       *
       * @abstract
       * @class
       * @extends PIXI.utils.EventEmitter
       * @memberof PIXI
       */

      var _AbstractRenderer =
      /** @class */
      function (_super) {
        __extends(AbstractRenderer, _super);
        /**
         * @param system - The name of the system this renderer is for.
         * @param [options] - The optional renderer parameters.
         * @param {number} [options.width=800] - The width of the screen.
         * @param {number} [options.height=600] - The height of the screen.
         * @param {HTMLCanvasElement} [options.view] - The canvas to use as a view, optional.
         * @param {boolean} [options.useContextAlpha=true] - Pass-through value for canvas' context `alpha` property.
         *   If you want to set transparency, please use `backgroundAlpha`. This option is for cases where the
         *   canvas needs to be opaque, possibly for performance reasons on some older devices.
         * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for
         *   resolutions other than 1.
         * @param {boolean} [options.antialias=false] - Sets antialias
         * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the renderer.
         * @param {boolean} [options.preserveDrawingBuffer=false] - Enables drawing buffer preservation,
         *  enable this if you need to call toDataUrl on the WebGL context.
         * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or
         *      not before the new render pass.
         * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area
         *  (shown if not transparent).
         * @param {number} [options.backgroundAlpha=1] - Value from 0 (fully transparent) to 1 (fully opaque).
         */


        function AbstractRenderer(type, options) {
          if (type === void 0) {
            type = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.RENDERER_TYPE.UNKNOWN;
          }

          var _this = _super.call(this) || this; // Add the default render options


          options = Object.assign({}, _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.RENDER_OPTIONS, options);
          /**
           * The supplied constructor options.
           *
           * @member {Object}
           * @readOnly
           */

          _this.options = options;
          /**
           * The type of the renderer.
           *
           * @member {number}
           * @default PIXI.RENDERER_TYPE.UNKNOWN
           * @see PIXI.RENDERER_TYPE
           */

          _this.type = type;
          /**
           * Measurements of the screen. (0, 0, screenWidth, screenHeight).
           *
           * Its safe to use as filterArea or hitArea for the whole stage.
           *
           * @member {PIXI.Rectangle}
           */

          _this.screen = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Rectangle(0, 0, options.width, options.height);
          /**
           * The canvas element that everything is drawn to.
           *
           * @member {HTMLCanvasElement}
           */

          _this.view = options.view || document.createElement('canvas');
          /**
           * The resolution / device pixel ratio of the renderer.
           *
           * @member {number}
           * @default PIXI.settings.RESOLUTION
           */

          _this.resolution = options.resolution || _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.RESOLUTION;
          /**
           * Pass-thru setting for the the canvas' context `alpha` property. This is typically
           * not something you need to fiddle with. If you want transparency, use `backgroundAlpha`.
           *
           * @member {boolean}
           */

          _this.useContextAlpha = options.useContextAlpha;
          /**
           * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.
           *
           * @member {boolean}
           */

          _this.autoDensity = !!options.autoDensity;
          /**
           * The value of the preserveDrawingBuffer flag affects whether or not the contents of
           * the stencil buffer is retained after rendering.
           *
           * @member {boolean}
           */

          _this.preserveDrawingBuffer = options.preserveDrawingBuffer;
          /**
           * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.
           * If the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every
           * frame to set the canvas background color. If the scene is transparent PixiJS will use clearRect
           * to clear the canvas every frame. Disable this by setting this to false. For example, if
           * your game has a canvas filling background image you often don't need this set.
           *
           * @member {boolean}
           * @default
           */

          _this.clearBeforeRender = options.clearBeforeRender;
          /**
           * The background color as a number.
           *
           * @member {number}
           * @protected
           */

          _this._backgroundColor = 0x000000;
          /**
           * The background color as an [R, G, B, A] array.
           *
           * @member {number[]}
           * @protected
           */

          _this._backgroundColorRgba = [0, 0, 0, 1];
          /**
           * The background color as a string.
           *
           * @member {string}
           * @protected
           */

          _this._backgroundColorString = '#000000';
          _this.backgroundColor = options.backgroundColor || _this._backgroundColor; // run bg color setter

          _this.backgroundAlpha = options.backgroundAlpha; // @deprecated

          if (options.transparent !== undefined) {
            (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.deprecation)('6.0.0', 'Option transparent is deprecated, please use backgroundAlpha instead.');
            _this.useContextAlpha = options.transparent;
            _this.backgroundAlpha = options.transparent ? 0 : 1;
          }
          /**
           * The last root object that the renderer tried to render.
           *
           * @member {PIXI.DisplayObject}
           * @protected
           */


          _this._lastObjectRendered = null;
          /**
           * Collection of plugins.
           * @readonly
           * @member {object}
           */

          _this.plugins = {};
          return _this;
        }
        /**
         * Initialize the plugins.
         *
         * @protected
         * @param {object} staticMap - The dictionary of statically saved plugins.
         */


        AbstractRenderer.prototype.initPlugins = function (staticMap) {
          for (var o in staticMap) {
            this.plugins[o] = new staticMap[o](this);
          }
        };

        Object.defineProperty(AbstractRenderer.prototype, "width", {
          /**
           * Same as view.width, actual number of pixels in the canvas by horizontal.
           *
           * @member {number}
           * @readonly
           * @default 800
           */
          get: function get() {
            return this.view.width;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(AbstractRenderer.prototype, "height", {
          /**
           * Same as view.height, actual number of pixels in the canvas by vertical.
           *
           * @member {number}
           * @readonly
           * @default 600
           */
          get: function get() {
            return this.view.height;
          },
          enumerable: false,
          configurable: true
        });
        /**
         * Resizes the screen and canvas as close as possible to the specified width and height.
         * Canvas dimensions are multiplied by resolution and rounded to the nearest integers.
         * The new canvas dimensions divided by the resolution become the new screen dimensions.
         *
         * @param desiredScreenWidth - The desired width of the screen.
         * @param desiredScreenHeight - The desired height of the screen.
         */

        AbstractRenderer.prototype.resize = function (desiredScreenWidth, desiredScreenHeight) {
          this.view.width = Math.round(desiredScreenWidth * this.resolution);
          this.view.height = Math.round(desiredScreenHeight * this.resolution);
          var screenWidth = this.view.width / this.resolution;
          var screenHeight = this.view.height / this.resolution;
          this.screen.width = screenWidth;
          this.screen.height = screenHeight;

          if (this.autoDensity) {
            this.view.style.width = screenWidth + "px";
            this.view.style.height = screenHeight + "px";
          }
          /**
           * Fired after view has been resized.
           *
           * @event PIXI.Renderer#resize
           * @param {number} screenWidth - The new width of the screen.
           * @param {number} screenHeight - The new height of the screen.
           */


          this.emit('resize', screenWidth, screenHeight);
        };
        /**
         * @ignore
         */


        AbstractRenderer.prototype.generateTexture = function (displayObject, options, resolution, region) {
          if (options === void 0) {
            options = {};
          } // @deprecated parameters spread, use options instead


          if (typeof options === 'number') {
            (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.deprecation)('6.1.0', 'generateTexture options (scaleMode, resolution, region) are now object options.');
            options = {
              scaleMode: options,
              resolution: resolution,
              region: region
            };
          }

          var manualRegion = options.region,
              textureOptions = __rest(options, ["region"]);

          region = manualRegion || displayObject.getLocalBounds(null, true); // minimum texture size is 1x1, 0x0 will throw an error

          if (region.width === 0) {
            region.width = 1;
          }

          if (region.height === 0) {
            region.height = 1;
          }

          var renderTexture = _RenderTexture.create(_assign({
            width: region.width,
            height: region.height
          }, textureOptions));

          tempMatrix$2.tx = -region.x;
          tempMatrix$2.ty = -region.y;
          this.render(displayObject, {
            renderTexture: renderTexture,
            clear: false,
            transform: tempMatrix$2,
            skipUpdateTransform: !!displayObject.parent
          });
          return renderTexture;
        };
        /**
         * Removes everything from the renderer and optionally removes the Canvas DOM element.
         *
         * @param [removeView=false] - Removes the Canvas element from the DOM.
         */


        AbstractRenderer.prototype.destroy = function (removeView) {
          for (var o in this.plugins) {
            this.plugins[o].destroy();
            this.plugins[o] = null;
          }

          if (removeView && this.view.parentNode) {
            this.view.parentNode.removeChild(this.view);
          }

          var thisAny = this; // null-ing all objects, that's a tradition!

          thisAny.plugins = null;
          thisAny.type = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.RENDERER_TYPE.UNKNOWN;
          thisAny.view = null;
          thisAny.screen = null;
          thisAny._tempDisplayObjectParent = null;
          thisAny.options = null;
          this._backgroundColorRgba = null;
          this._backgroundColorString = null;
          this._lastObjectRendered = null;
        };

        Object.defineProperty(AbstractRenderer.prototype, "backgroundColor", {
          /**
           * The background color to fill if not transparent
           *
           * @member {number}
           */
          get: function get() {
            return this._backgroundColor;
          },
          set: function set(value) {
            this._backgroundColor = value;
            this._backgroundColorString = (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.hex2string)(value);
            (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.hex2rgb)(value, this._backgroundColorRgba);
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(AbstractRenderer.prototype, "backgroundAlpha", {
          /**
           * The background color alpha. Setting this to 0 will make the canvas transparent.
           *
           * @member {number}
           */
          get: function get() {
            return this._backgroundColorRgba[3];
          },
          set: function set(value) {
            this._backgroundColorRgba[3] = value;
          },
          enumerable: false,
          configurable: true
        });
        return AbstractRenderer;
      }(_pixi_utils__WEBPACK_IMPORTED_MODULE_2__.EventEmitter);

      var GLBuffer =
      /** @class */
      function () {
        function GLBuffer(buffer) {
          this.buffer = buffer || null;
          this.updateID = -1;
          this.byteLength = -1;
          this.refCount = 0;
        }

        return GLBuffer;
      }();
      /**
       * System plugin to the renderer to manage buffers.
       *
       * WebGL uses Buffers as a way to store objects to the GPU.
       * This system makes working with them a lot easier.
       *
       * Buffers are used in three main places in WebGL
       * - geometry information
       * - Uniform information (via uniform buffer objects - a WebGL 2 only feature)
       * - Transform feedback information. (WebGL 2 only feature)
       *
       * This system will handle the binding of buffers to the GPU as well as uploading
       * them. With this system, you never need to work directly with GPU buffers, but instead work with
       * the PIXI.Buffer class.
       *
       *
       * @class
       * @memberof PIXI
       */


      var BufferSystem =
      /** @class */
      function () {
        /**
         * @param {PIXI.Renderer} renderer - The renderer this System works for.
         */
        function BufferSystem(renderer) {
          this.renderer = renderer;
          this.managedBuffers = {};
          this.boundBufferBases = {};
        }
        /**
         * @ignore
         */


        BufferSystem.prototype.destroy = function () {
          this.renderer = null;
        };
        /**
         * Sets up the renderer context and necessary buffers.
         */


        BufferSystem.prototype.contextChange = function () {
          this.disposeAll(true);
          this.gl = this.renderer.gl; // TODO fill out...

          this.CONTEXT_UID = this.renderer.CONTEXT_UID;
        };
        /**
         * This binds specified buffer. On first run, it will create the webGL buffers for the context too
         *
         * @param buffer - the buffer to bind to the renderer
         */


        BufferSystem.prototype.bind = function (buffer) {
          var _a = this,
              gl = _a.gl,
              CONTEXT_UID = _a.CONTEXT_UID;

          var glBuffer = buffer._glBuffers[CONTEXT_UID] || this.createGLBuffer(buffer);
          gl.bindBuffer(buffer.type, glBuffer.buffer);
        };
        /**
         * Binds an uniform buffer to at the given index.
         *
         * A cache is used so a buffer will not be bound again if already bound.
         *
         * @param buffer - the buffer to bind
         * @param index - the base index to bind it to.
         */


        BufferSystem.prototype.bindBufferBase = function (buffer, index) {
          var _a = this,
              gl = _a.gl,
              CONTEXT_UID = _a.CONTEXT_UID;

          if (this.boundBufferBases[index] !== buffer) {
            var glBuffer = buffer._glBuffers[CONTEXT_UID] || this.createGLBuffer(buffer);
            this.boundBufferBases[index] = buffer;
            gl.bindBufferBase(gl.UNIFORM_BUFFER, index, glBuffer.buffer);
          }
        };
        /**
         * Binds a buffer whilst also binding its range.
         * This will make the buffer start from the offset supplied rather than 0 when it is read.
         *
         * @param buffer - the buffer to bind
         * @param index - the base index to bind at, defaults to 0
         * @param offset - the offset to bind at (this is blocks of 256). 0 = 0, 1 = 256, 2 = 512 etc
         */


        BufferSystem.prototype.bindBufferRange = function (buffer, index, offset) {
          var _a = this,
              gl = _a.gl,
              CONTEXT_UID = _a.CONTEXT_UID;

          offset = offset || 0;
          var glBuffer = buffer._glBuffers[CONTEXT_UID] || this.createGLBuffer(buffer);
          gl.bindBufferRange(gl.UNIFORM_BUFFER, index || 0, glBuffer.buffer, offset * 256, 256);
        };
        /**
         * Will ensure sure the the data in the buffer is uploaded to the GPU.
         *
         * @param {PIXI.Buffer} buffer - the buffer to update
         */


        BufferSystem.prototype.update = function (buffer) {
          var _a = this,
              gl = _a.gl,
              CONTEXT_UID = _a.CONTEXT_UID;

          var glBuffer = buffer._glBuffers[CONTEXT_UID];

          if (buffer._updateID === glBuffer.updateID) {
            return;
          }

          glBuffer.updateID = buffer._updateID;
          gl.bindBuffer(buffer.type, glBuffer.buffer);

          if (glBuffer.byteLength >= buffer.data.byteLength) {
            // offset is always zero for now!
            gl.bufferSubData(buffer.type, 0, buffer.data);
          } else {
            var drawType = buffer["static"] ? gl.STATIC_DRAW : gl.DYNAMIC_DRAW;
            glBuffer.byteLength = buffer.data.byteLength;
            gl.bufferData(buffer.type, buffer.data, drawType);
          }
        };
        /**
         * Disposes buffer
         * @param {PIXI.Buffer} buffer - buffer with data
         * @param {boolean} [contextLost=false] - If context was lost, we suppress deleteVertexArray
         */


        BufferSystem.prototype.dispose = function (buffer, contextLost) {
          if (!this.managedBuffers[buffer.id]) {
            return;
          }

          delete this.managedBuffers[buffer.id];
          var glBuffer = buffer._glBuffers[this.CONTEXT_UID];
          var gl = this.gl;
          buffer.disposeRunner.remove(this);

          if (!glBuffer) {
            return;
          }

          if (!contextLost) {
            gl.deleteBuffer(glBuffer.buffer);
          }

          delete buffer._glBuffers[this.CONTEXT_UID];
        };
        /**
         * dispose all WebGL resources of all managed buffers
         * @param {boolean} [contextLost=false] - If context was lost, we suppress `gl.delete` calls
         */


        BufferSystem.prototype.disposeAll = function (contextLost) {
          var all = Object.keys(this.managedBuffers);

          for (var i = 0; i < all.length; i++) {
            this.dispose(this.managedBuffers[all[i]], contextLost);
          }
        };
        /**
         * creates and attaches a GLBuffer object tied to the current context.
         * @protected
         */


        BufferSystem.prototype.createGLBuffer = function (buffer) {
          var _a = this,
              CONTEXT_UID = _a.CONTEXT_UID,
              gl = _a.gl;

          buffer._glBuffers[CONTEXT_UID] = new GLBuffer(gl.createBuffer());
          this.managedBuffers[buffer.id] = buffer;
          buffer.disposeRunner.add(this);
          return buffer._glBuffers[CONTEXT_UID];
        };

        return BufferSystem;
      }();
      /**
       * The Renderer draws the scene and all its content onto a WebGL enabled canvas.
       *
       * This renderer should be used for browsers that support WebGL.
       *
       * This renderer works by automatically managing WebGLBatchesm, so no need for Sprite Batches or Sprite Clouds.
       * Don't forget to add the view to your DOM or you will not see anything!
       *
       * Renderer is composed of systems that manage specific tasks. The following systems are added by default
       * whenever you create a renderer:
       *
       * | System                               | Description                                                                   |
       * | ------------------------------------ | ----------------------------------------------------------------------------- |
       * | {@link PIXI.BatchSystem}             | This manages object renderers that defer rendering until a flush.             |
       * | {@link PIXI.ContextSystem}           | This manages the WebGL context and extensions.                                |
       * | {@link PIXI.EventSystem}             | This manages UI events.                                                       |
       * | {@link PIXI.FilterSystem}            | This manages the filtering pipeline for post-processing effects.              |
       * | {@link PIXI.FramebufferSystem}       | This manages framebuffers, which are used for offscreen rendering.            |
       * | {@link PIXI.GeometrySystem}          | This manages geometries & buffers, which are used to draw object meshes.      |
       * | {@link PIXI.MaskSystem}              | This manages masking operations.                                              |
       * | {@link PIXI.ProjectionSystem}        | This manages the `projectionMatrix`, used by shaders to get NDC coordinates.  |
       * | {@link PIXI.RenderTextureSystem}     | This manages render-textures, which are an abstraction over framebuffers.     |
       * | {@link PIXI.ScissorSystem}           | This handles scissor masking, and is used internally by {@link MaskSystem}    |
       * | {@link PIXI.ShaderSystem}            | This manages shaders, programs that run on the GPU to calculate 'em pixels.   |
       * | {@link PIXI.StateSystem}             | This manages the WebGL state variables like blend mode, depth testing, etc.   |
       * | {@link PIXI.StencilSystem}           | This handles stencil masking, and is used internally by {@link MaskSystem}    |
       * | {@link PIXI.TextureSystem}           | This manages textures and their resources on the GPU.                         |
       * | {@link PIXI.TextureGCSystem}         | This will automatically remove textures from the GPU if they are not used.    |
       *
       * The breadth of the API surface provided by the renderer is contained within these systems.
       *
       * @memberof PIXI
       */


      var _Renderer =
      /** @class */
      function (_super) {
        __extends(Renderer, _super);
        /**
         * @param [options] - The optional renderer parameters.
         * @param {number} [options.width=800] - The width of the screen.
         * @param {number} [options.height=600] - The height of the screen.
         * @param {HTMLCanvasElement} [options.view] - The canvas to use as a view, optional.
         * @param {boolean} [options.useContextAlpha=true] - Pass-through value for canvas' context `alpha` property.
         *   If you want to set transparency, please use `backgroundAlpha`. This option is for cases where the
         *   canvas needs to be opaque, possibly for performance reasons on some older devices.
         * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for
         *   resolutions other than 1.
         * @param {boolean} [options.antialias=false] - Sets antialias. If not available natively then FXAA
         *  antialiasing is used.
         * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the renderer.
         * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear
         *  the canvas or not before the new render pass. If you wish to set this to false, you *must* set
         *  preserveDrawingBuffer to `true`.
         * @param {boolean} [options.preserveDrawingBuffer=false] - Enables drawing buffer preservation,
         *  enable this if you need to call toDataUrl on the WebGL context.
         * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area
         *  (shown if not transparent).
         * @param {number} [options.backgroundAlpha=1] - Value from 0 (fully transparent) to 1 (fully opaque).
         * @param {string} [options.powerPreference] - Parameter passed to WebGL context, set to "high-performance"
         *  for devices with dual graphics card.
         * @param {object} [options.context] - If WebGL context already exists, all parameters must be taken from it.
         */


        function Renderer(options) {
          var _this = _super.call(this, _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.RENDERER_TYPE.WEBGL, options) || this; // the options will have been modified here in the super constructor with pixi's default settings..


          options = _this.options;
          _this.gl = null;
          _this.CONTEXT_UID = 0;
          _this.runners = {
            destroy: new _pixi_runner__WEBPACK_IMPORTED_MODULE_3__.Runner('destroy'),
            contextChange: new _pixi_runner__WEBPACK_IMPORTED_MODULE_3__.Runner('contextChange'),
            reset: new _pixi_runner__WEBPACK_IMPORTED_MODULE_3__.Runner('reset'),
            update: new _pixi_runner__WEBPACK_IMPORTED_MODULE_3__.Runner('update'),
            postrender: new _pixi_runner__WEBPACK_IMPORTED_MODULE_3__.Runner('postrender'),
            prerender: new _pixi_runner__WEBPACK_IMPORTED_MODULE_3__.Runner('prerender'),
            resize: new _pixi_runner__WEBPACK_IMPORTED_MODULE_3__.Runner('resize')
          };

          _this.runners.contextChange.add(_this);

          _this.globalUniforms = new _UniformGroup({
            projectionMatrix: new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Matrix()
          }, true);

          _this.addSystem(_MaskSystem, 'mask').addSystem(_ContextSystem, 'context').addSystem(_StateSystem, 'state').addSystem(_ShaderSystem, 'shader').addSystem(_TextureSystem, 'texture').addSystem(BufferSystem, 'buffer').addSystem(_GeometrySystem, 'geometry').addSystem(_FramebufferSystem, 'framebuffer').addSystem(_ScissorSystem, 'scissor').addSystem(_StencilSystem, 'stencil').addSystem(_ProjectionSystem, 'projection').addSystem(_TextureGCSystem, 'textureGC').addSystem(_FilterSystem, 'filter').addSystem(_RenderTextureSystem, 'renderTexture').addSystem(_BatchSystem, 'batch');

          _this.initPlugins(Renderer.__plugins);

          _this.multisample = undefined;
          /*
           * The options passed in to create a new WebGL context.
           */

          if (options.context) {
            _this.context.initFromContext(options.context);
          } else {
            _this.context.initFromOptions({
              alpha: !!_this.useContextAlpha,
              antialias: options.antialias,
              premultipliedAlpha: _this.useContextAlpha && _this.useContextAlpha !== 'notMultiplied',
              stencil: true,
              preserveDrawingBuffer: options.preserveDrawingBuffer,
              powerPreference: _this.options.powerPreference
            });
          }

          _this.renderingToScreen = true;
          (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.sayHello)(_this.context.webGLVersion === 2 ? 'WebGL 2' : 'WebGL 1');

          _this.resize(_this.options.width, _this.options.height);

          return _this;
        }
        /**
         * Create renderer if WebGL is available. Overrideable
         * by the **@pixi/canvas-renderer** package to allow fallback.
         * throws error if WebGL is not available.
         *
         * @private
         */


        Renderer.create = function (options) {
          if ((0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.isWebGLSupported)()) {
            return new Renderer(options);
          }

          throw new Error('WebGL unsupported in this browser, use "pixi.js-legacy" for fallback canvas2d support.');
        };

        Renderer.prototype.contextChange = function () {
          var gl = this.gl;
          var samples;

          if (this.context.webGLVersion === 1) {
            var framebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);
            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
            samples = gl.getParameter(gl.SAMPLES);
            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
          } else {
            var framebuffer = gl.getParameter(gl.DRAW_FRAMEBUFFER_BINDING);
            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
            samples = gl.getParameter(gl.SAMPLES);
            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, framebuffer);
          }

          if (samples >= _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MSAA_QUALITY.HIGH) {
            this.multisample = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MSAA_QUALITY.HIGH;
          } else if (samples >= _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MSAA_QUALITY.MEDIUM) {
            this.multisample = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MSAA_QUALITY.MEDIUM;
          } else if (samples >= _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MSAA_QUALITY.LOW) {
            this.multisample = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MSAA_QUALITY.LOW;
          } else {
            this.multisample = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.MSAA_QUALITY.NONE;
          }
        };
        /**
         * Add a new system to the renderer.
         * @param ClassRef - Class reference
         * @param [name] - Property name for system, if not specified
         *        will use a static `name` property on the class itself. This
         *        name will be assigned as s property on the Renderer so make
         *        sure it doesn't collide with properties on Renderer.
         * @return Return instance of renderer
         */


        Renderer.prototype.addSystem = function (ClassRef, name) {
          var system = new ClassRef(this);

          if (this[name]) {
            throw new Error("Whoops! The name \"" + name + "\" is already in use");
          }

          this[name] = system;

          for (var i in this.runners) {
            this.runners[i].add(system);
          }
          /**
           * Fired after rendering finishes.
           *
           * @event PIXI.Renderer#postrender
           */

          /**
           * Fired before rendering starts.
           *
           * @event PIXI.Renderer#prerender
           */

          /**
           * Fired when the WebGL context is set.
           *
           * @event PIXI.Renderer#context
           * @param {WebGLRenderingContext} gl - WebGL context.
           */


          return this;
        };
        /**
         * @ignore
         */


        Renderer.prototype.render = function (displayObject, options) {
          var renderTexture;
          var clear;
          var transform;
          var skipUpdateTransform;

          if (options) {
            if (options instanceof _RenderTexture) {
              (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.deprecation)('6.0.0', 'Renderer#render arguments changed, use options instead.');
              /* eslint-disable prefer-rest-params */

              renderTexture = options;
              clear = arguments[2];
              transform = arguments[3];
              skipUpdateTransform = arguments[4];
              /* eslint-enable prefer-rest-params */
            } else {
              renderTexture = options.renderTexture;
              clear = options.clear;
              transform = options.transform;
              skipUpdateTransform = options.skipUpdateTransform;
            }
          } // can be handy to know!


          this.renderingToScreen = !renderTexture;
          this.runners.prerender.emit();
          this.emit('prerender'); // apply a transform at a GPU level

          this.projection.transform = transform; // no point rendering if our context has been blown up!

          if (this.context.isLost) {
            return;
          }

          if (!renderTexture) {
            this._lastObjectRendered = displayObject;
          }

          if (!skipUpdateTransform) {
            // update the scene graph
            var cacheParent = displayObject.enableTempParent();
            displayObject.updateTransform();
            displayObject.disableTempParent(cacheParent); // displayObject.hitArea = //TODO add a temp hit area
          }

          this.renderTexture.bind(renderTexture);
          this.batch.currentRenderer.start();

          if (clear !== undefined ? clear : this.clearBeforeRender) {
            this.renderTexture.clear();
          }

          displayObject.render(this); // apply transform..

          this.batch.currentRenderer.flush();

          if (renderTexture) {
            renderTexture.baseTexture.update();
          }

          this.runners.postrender.emit(); // reset transform after render

          this.projection.transform = null;
          this.emit('postrender');
        };
        /**
         * @override
         * @ignore
         */


        Renderer.prototype.generateTexture = function (displayObject, options, resolution, region) {
          if (options === void 0) {
            options = {};
          }

          var renderTexture = _super.prototype.generateTexture.call(this, displayObject, options, resolution, region);

          this.framebuffer.blit();
          return renderTexture;
        };
        /**
         * Resizes the WebGL view to the specified width and height.
         *
         * @param desiredScreenWidth - The desired width of the screen.
         * @param desiredScreenHeight - The desired height of the screen.
         */


        Renderer.prototype.resize = function (desiredScreenWidth, desiredScreenHeight) {
          _super.prototype.resize.call(this, desiredScreenWidth, desiredScreenHeight);

          this.runners.resize.emit(this.screen.height, this.screen.width);
        };
        /**
         * Resets the WebGL state so you can render things however you fancy!
         *
         * @return Returns itself.
         */


        Renderer.prototype.reset = function () {
          this.runners.reset.emit();
          return this;
        };
        /** Clear the frame buffer. */


        Renderer.prototype.clear = function () {
          this.renderTexture.bind();
          this.renderTexture.clear();
        };
        /**
         * Removes everything from the renderer (event listeners, spritebatch, etc...)
         *
         * @param [removeView=false] - Removes the Canvas element from the DOM.
         *  See: https://github.com/pixijs/pixi.js/issues/2233
         */


        Renderer.prototype.destroy = function (removeView) {
          this.runners.destroy.emit();

          for (var r in this.runners) {
            this.runners[r].destroy();
          } // call base destroy


          _super.prototype.destroy.call(this, removeView); // TODO nullify all the managers..


          this.gl = null;
        };

        Object.defineProperty(Renderer.prototype, "extract", {
          /**
           * Please use `plugins.extract` instead.
           * @member {PIXI.Extract} extract
           * @deprecated since 6.0.0
           * @readonly
           */
          get: function get() {
            (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.deprecation)('6.0.0', 'Renderer#extract has been deprecated, please use Renderer#plugins.extract instead.');
            return this.plugins.extract;
          },
          enumerable: false,
          configurable: true
        });
        /**
         * Adds a plugin to the renderer.
         *
         * @param pluginName - The name of the plugin.
         * @param ctor - The constructor function or class for the plugin.
         */

        Renderer.registerPlugin = function (pluginName, ctor) {
          Renderer.__plugins = Renderer.__plugins || {};
          Renderer.__plugins[pluginName] = ctor;
        };

        return Renderer;
      }(_AbstractRenderer);
      /**
       * This helper function will automatically detect which renderer you should be using.
       * WebGL is the preferred renderer as it is a lot faster. If WebGL is not supported by
       * the browser then this function will return a canvas renderer
       *
       * @memberof PIXI
       * @function autoDetectRenderer
       * @param {object} [options] - The optional renderer parameters
       * @param {number} [options.width=800] - the width of the renderers view
       * @param {number} [options.height=600] - the height of the renderers view
       * @param {HTMLCanvasElement} [options.view] - the canvas to use as a view, optional
       * @param {boolean} [options.useContextAlpha=true] - Pass-through value for canvas' context `alpha` property.
       *   If you want to set transparency, please use `backgroundAlpha`. This option is for cases where the
       *   canvas needs to be opaque, possibly for performance reasons on some older devices.
       * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for
       *   resolutions other than 1
       * @param {boolean} [options.antialias=false] - sets antialias
       * @param {boolean} [options.preserveDrawingBuffer=false] - enables drawing buffer preservation, enable this if you
       *  need to call toDataUrl on the webgl context
       * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area
       *  (shown if not transparent).
       * @param {number} [options.backgroundAlpha=1] - Value from 0 (fully transparent) to 1 (fully opaque).
       * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or
       *   not before the new render pass.
       * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the renderer.
       * @param {boolean} [options.forceCanvas=false] - prevents selection of WebGL renderer, even if such is present, this
       *   option only is available when using **pixi.js-legacy** or **@pixi/canvas-renderer** modules, otherwise
       *   it is ignored.
       * @param {string} [options.powerPreference] - Parameter passed to webgl context, set to "high-performance"
       *  for devices with dual graphics card **webgl only**
       * @return {PIXI.Renderer|PIXI.CanvasRenderer} Returns WebGL renderer if available, otherwise CanvasRenderer
       */


      function _autoDetectRenderer(options) {
        return _Renderer.create(options);
      }

      var $defaultVertex = "attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}";
      var $defaultFilterVertex = "attribute vec2 aVertexPosition;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nuniform vec4 inputSize;\nuniform vec4 outputFrame;\n\nvec4 filterVertexPosition( void )\n{\n    vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n\n    return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n}\n\nvec2 filterTextureCoord( void )\n{\n    return aVertexPosition * (outputFrame.zw * inputSize.zw);\n}\n\nvoid main(void)\n{\n    gl_Position = filterVertexPosition();\n    vTextureCoord = filterTextureCoord();\n}\n";
      /**
       * Default vertex shader
       * @memberof PIXI
       * @member {string} defaultVertex
       */

      /**
       * Default filter vertex shader
       * @memberof PIXI
       * @member {string} defaultFilterVertex
       */
      // NOTE: This black magic is so that @microsoft/api-extractor does not complain! This explicitly specifies the types
      // of defaultVertex, defaultFilterVertex.

      var defaultVertex$2 = $defaultVertex;
      var _defaultFilterVertex = $defaultFilterVertex;
      /**
       * Use the ISystem interface instead.
       * @deprecated since 6.1.0
       * @memberof PIXI
       */

      var _System =
      /** @class */
      function () {
        /**
         * @param renderer - Reference to Renderer
         */
        function System(renderer) {
          (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.deprecation)('6.1.0', 'System class is deprecated, implemement ISystem interface instead.');
          this.renderer = renderer;
        }
        /** Destroy and don't use after this. */


        System.prototype.destroy = function () {
          this.renderer = null;
        };

        return System;
      }();
      /**
       * Used by the batcher to draw batches.
       * Each one of these contains all information required to draw a bound geometry.
       *
       * @memberof PIXI
       */


      var _BatchDrawCall =
      /** @class */
      function () {
        function BatchDrawCall() {
          this.texArray = null;
          this.blend = 0;
          this.type = _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.DRAW_MODES.TRIANGLES;
          this.start = 0;
          this.size = 0;
          this.data = null;
        }

        return BatchDrawCall;
      }();
      /**
       * Used by the batcher to build texture batches.
       * Holds list of textures and their respective locations.
       *
       * @memberof PIXI
       */


      var _BatchTextureArray =
      /** @class */
      function () {
        function BatchTextureArray() {
          this.elements = [];
          this.ids = [];
          this.count = 0;
        }

        BatchTextureArray.prototype.clear = function () {
          for (var i = 0; i < this.count; i++) {
            this.elements[i] = null;
          }

          this.count = 0;
        };

        return BatchTextureArray;
      }();
      /**
       * Flexible wrapper around `ArrayBuffer` that also provides typed array views on demand.
       *
       * @class
       * @memberof PIXI
       */


      var _ViewableBuffer =
      /** @class */
      function () {
        function ViewableBuffer(sizeOrBuffer) {
          if (typeof sizeOrBuffer === 'number') {
            /**
             * Underlying `ArrayBuffer` that holds all the data and is of capacity `this.size`.
             *
             * @member {ArrayBuffer}
             */
            this.rawBinaryData = new ArrayBuffer(sizeOrBuffer);
          } else if (sizeOrBuffer instanceof Uint8Array) {
            this.rawBinaryData = sizeOrBuffer.buffer;
          } else {
            this.rawBinaryData = sizeOrBuffer;
          }
          /**
           * View on the raw binary data as a `Uint32Array`.
           *
           * @member {Uint32Array}
           */


          this.uint32View = new Uint32Array(this.rawBinaryData);
          /**
           * View on the raw binary data as a `Float32Array`.
           *
           * @member {Float32Array}
           */

          this.float32View = new Float32Array(this.rawBinaryData);
        }

        Object.defineProperty(ViewableBuffer.prototype, "int8View", {
          /**
           * View on the raw binary data as a `Int8Array`.
           *
           * @member {Int8Array}
           */
          get: function get() {
            if (!this._int8View) {
              this._int8View = new Int8Array(this.rawBinaryData);
            }

            return this._int8View;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(ViewableBuffer.prototype, "uint8View", {
          /**
           * View on the raw binary data as a `Uint8Array`.
           *
           * @member {Uint8Array}
           */
          get: function get() {
            if (!this._uint8View) {
              this._uint8View = new Uint8Array(this.rawBinaryData);
            }

            return this._uint8View;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(ViewableBuffer.prototype, "int16View", {
          /**
           * View on the raw binary data as a `Int16Array`.
           *
           * @member {Int16Array}
           */
          get: function get() {
            if (!this._int16View) {
              this._int16View = new Int16Array(this.rawBinaryData);
            }

            return this._int16View;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(ViewableBuffer.prototype, "uint16View", {
          /**
           * View on the raw binary data as a `Uint16Array`.
           *
           * @member {Uint16Array}
           */
          get: function get() {
            if (!this._uint16View) {
              this._uint16View = new Uint16Array(this.rawBinaryData);
            }

            return this._uint16View;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(ViewableBuffer.prototype, "int32View", {
          /**
           * View on the raw binary data as a `Int32Array`.
           *
           * @member {Int32Array}
           */
          get: function get() {
            if (!this._int32View) {
              this._int32View = new Int32Array(this.rawBinaryData);
            }

            return this._int32View;
          },
          enumerable: false,
          configurable: true
        });
        /**
         * Returns the view of the given type.
         *
         * @param {string} type - One of `int8`, `uint8`, `int16`,
         *    `uint16`, `int32`, `uint32`, and `float32`.
         * @return {object} typed array of given type
         */

        ViewableBuffer.prototype.view = function (type) {
          return this[type + "View"];
        };
        /**
         * Destroys all buffer references. Do not use after calling
         * this.
         */


        ViewableBuffer.prototype.destroy = function () {
          this.rawBinaryData = null;
          this._int8View = null;
          this._uint8View = null;
          this._int16View = null;
          this._uint16View = null;
          this._int32View = null;
          this.uint32View = null;
          this.float32View = null;
        };

        ViewableBuffer.sizeOf = function (type) {
          switch (type) {
            case 'int8':
            case 'uint8':
              return 1;

            case 'int16':
            case 'uint16':
              return 2;

            case 'int32':
            case 'uint32':
            case 'float32':
              return 4;

            default:
              throw new Error(type + " isn't a valid view type");
          }
        };

        return ViewableBuffer;
      }();
      /**
       * Renderer dedicated to drawing and batching sprites.
       *
       * This is the default batch renderer. It buffers objects
       * with texture-based geometries and renders them in
       * batches. It uploads multiple textures to the GPU to
       * reduce to the number of draw calls.
       *
       * @memberof PIXI
       */


      var _AbstractBatchRenderer =
      /** @class */
      function (_super) {
        __extends(AbstractBatchRenderer, _super);
        /**
         * This will hook onto the renderer's `contextChange`
         * and `prerender` signals.
         *
         * @param {PIXI.Renderer} renderer - The renderer this works for.
         */


        function AbstractBatchRenderer(renderer) {
          var _this = _super.call(this, renderer) || this;

          _this.shaderGenerator = null;
          _this.geometryClass = null;
          _this.vertexSize = null;
          _this.state = _State.for2d();
          _this.size = _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.SPRITE_BATCH_SIZE * 4;
          _this._vertexCount = 0;
          _this._indexCount = 0;
          _this._bufferedElements = [];
          _this._bufferedTextures = [];
          _this._bufferSize = 0;
          _this._shader = null;
          _this._packedGeometries = [];
          _this._packedGeometryPoolSize = 2;
          _this._flushId = 0;
          _this._aBuffers = {};
          _this._iBuffers = {};
          _this.MAX_TEXTURES = 1;

          _this.renderer.on('prerender', _this.onPrerender, _this);

          renderer.runners.contextChange.add(_this);
          _this._dcIndex = 0;
          _this._aIndex = 0;
          _this._iIndex = 0;
          _this._attributeBuffer = null;
          _this._indexBuffer = null;
          _this._tempBoundTextures = [];
          return _this;
        }
        /**
         * Handles the `contextChange` signal.
         *
         * It calculates `this.MAX_TEXTURES` and allocating the packed-geometry object pool.
         */


        AbstractBatchRenderer.prototype.contextChange = function () {
          var gl = this.renderer.gl;

          if (_pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.PREFER_ENV === _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.ENV.WEBGL_LEGACY) {
            this.MAX_TEXTURES = 1;
          } else {
            // step 1: first check max textures the GPU can handle.
            this.MAX_TEXTURES = Math.min(gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS), _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.SPRITE_MAX_TEXTURES); // step 2: check the maximum number of if statements the shader can have too..

            this.MAX_TEXTURES = _checkMaxIfStatementsInShader(this.MAX_TEXTURES, gl);
          }

          this._shader = this.shaderGenerator.generateShader(this.MAX_TEXTURES); // we use the second shader as the first one depending on your browser
          // may omit aTextureId as it is not used by the shader so is optimized out.

          for (var i = 0; i < this._packedGeometryPoolSize; i++) {
            /* eslint-disable max-len */
            this._packedGeometries[i] = new this.geometryClass();
          }

          this.initFlushBuffers();
        };
        /** Makes sure that static and dynamic flush pooled objects have correct dimensions. */


        AbstractBatchRenderer.prototype.initFlushBuffers = function () {
          var _drawCallPool = AbstractBatchRenderer._drawCallPool,
              _textureArrayPool = AbstractBatchRenderer._textureArrayPool; // max draw calls

          var MAX_SPRITES = this.size / 4; // max texture arrays

          var MAX_TA = Math.floor(MAX_SPRITES / this.MAX_TEXTURES) + 1;

          while (_drawCallPool.length < MAX_SPRITES) {
            _drawCallPool.push(new _BatchDrawCall());
          }

          while (_textureArrayPool.length < MAX_TA) {
            _textureArrayPool.push(new _BatchTextureArray());
          }

          for (var i = 0; i < this.MAX_TEXTURES; i++) {
            this._tempBoundTextures[i] = null;
          }
        };
        /**
         * Handles the `prerender` signal.
         *
         * It ensures that flushes start from the first geometry object again.
         */


        AbstractBatchRenderer.prototype.onPrerender = function () {
          this._flushId = 0;
        };
        /**
         * Buffers the "batchable" object. It need not be rendered immediately.
         *
         * @param {PIXI.DisplayObject} element - the element to render when
         *    using this renderer
         */


        AbstractBatchRenderer.prototype.render = function (element) {
          if (!element._texture.valid) {
            return;
          }

          if (this._vertexCount + element.vertexData.length / 2 > this.size) {
            this.flush();
          }

          this._vertexCount += element.vertexData.length / 2;
          this._indexCount += element.indices.length;
          this._bufferedTextures[this._bufferSize] = element._texture.baseTexture;
          this._bufferedElements[this._bufferSize++] = element;
        };

        AbstractBatchRenderer.prototype.buildTexturesAndDrawCalls = function () {
          var _a = this,
              textures = _a._bufferedTextures,
              MAX_TEXTURES = _a.MAX_TEXTURES;

          var textureArrays = AbstractBatchRenderer._textureArrayPool;
          var batch = this.renderer.batch;
          var boundTextures = this._tempBoundTextures;
          var touch = this.renderer.textureGC.count;
          var TICK = ++_BaseTexture._globalBatch;
          var countTexArrays = 0;
          var texArray = textureArrays[0];
          var start = 0;
          batch.copyBoundTextures(boundTextures, MAX_TEXTURES);

          for (var i = 0; i < this._bufferSize; ++i) {
            var tex = textures[i];
            textures[i] = null;

            if (tex._batchEnabled === TICK) {
              continue;
            }

            if (texArray.count >= MAX_TEXTURES) {
              batch.boundArray(texArray, boundTextures, TICK, MAX_TEXTURES);
              this.buildDrawCalls(texArray, start, i);
              start = i;
              texArray = textureArrays[++countTexArrays];
              ++TICK;
            }

            tex._batchEnabled = TICK;
            tex.touched = touch;
            texArray.elements[texArray.count++] = tex;
          }

          if (texArray.count > 0) {
            batch.boundArray(texArray, boundTextures, TICK, MAX_TEXTURES);
            this.buildDrawCalls(texArray, start, this._bufferSize);
            ++countTexArrays;
            ++TICK;
          } // Clean-up


          for (var i = 0; i < boundTextures.length; i++) {
            boundTextures[i] = null;
          }

          _BaseTexture._globalBatch = TICK;
        };
        /** Populating drawcalls for rendering */


        AbstractBatchRenderer.prototype.buildDrawCalls = function (texArray, start, finish) {
          var _a = this,
              elements = _a._bufferedElements,
              _attributeBuffer = _a._attributeBuffer,
              _indexBuffer = _a._indexBuffer,
              vertexSize = _a.vertexSize;

          var drawCalls = AbstractBatchRenderer._drawCallPool;
          var dcIndex = this._dcIndex;
          var aIndex = this._aIndex;
          var iIndex = this._iIndex;
          var drawCall = drawCalls[dcIndex];
          drawCall.start = this._iIndex;
          drawCall.texArray = texArray;

          for (var i = start; i < finish; ++i) {
            var sprite = elements[i];
            var tex = sprite._texture.baseTexture;
            var spriteBlendMode = _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.premultiplyBlendMode[tex.alphaMode ? 1 : 0][sprite.blendMode];
            elements[i] = null;

            if (start < i && drawCall.blend !== spriteBlendMode) {
              drawCall.size = iIndex - drawCall.start;
              start = i;
              drawCall = drawCalls[++dcIndex];
              drawCall.texArray = texArray;
              drawCall.start = iIndex;
            }

            this.packInterleavedGeometry(sprite, _attributeBuffer, _indexBuffer, aIndex, iIndex);
            aIndex += sprite.vertexData.length / 2 * vertexSize;
            iIndex += sprite.indices.length;
            drawCall.blend = spriteBlendMode;
          }

          if (start < finish) {
            drawCall.size = iIndex - drawCall.start;
            ++dcIndex;
          }

          this._dcIndex = dcIndex;
          this._aIndex = aIndex;
          this._iIndex = iIndex;
        };
        /** Bind textures for current rendering */


        AbstractBatchRenderer.prototype.bindAndClearTexArray = function (texArray) {
          var textureSystem = this.renderer.texture;

          for (var j = 0; j < texArray.count; j++) {
            textureSystem.bind(texArray.elements[j], texArray.ids[j]);
            texArray.elements[j] = null;
          }

          texArray.count = 0;
        };

        AbstractBatchRenderer.prototype.updateGeometry = function () {
          var _a = this,
              packedGeometries = _a._packedGeometries,
              attributeBuffer = _a._attributeBuffer,
              indexBuffer = _a._indexBuffer;

          if (!_pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.CAN_UPLOAD_SAME_BUFFER) {
            /* Usually on iOS devices, where the browser doesn't
            like uploads to the same buffer in a single frame. */
            if (this._packedGeometryPoolSize <= this._flushId) {
              this._packedGeometryPoolSize++;
              packedGeometries[this._flushId] = new this.geometryClass();
            }

            packedGeometries[this._flushId]._buffer.update(attributeBuffer.rawBinaryData);

            packedGeometries[this._flushId]._indexBuffer.update(indexBuffer);

            this.renderer.geometry.bind(packedGeometries[this._flushId]);
            this.renderer.geometry.updateBuffers();
            this._flushId++;
          } else {
            // lets use the faster option, always use buffer number 0
            packedGeometries[this._flushId]._buffer.update(attributeBuffer.rawBinaryData);

            packedGeometries[this._flushId]._indexBuffer.update(indexBuffer);

            this.renderer.geometry.updateBuffers();
          }
        };

        AbstractBatchRenderer.prototype.drawBatches = function () {
          var dcCount = this._dcIndex;
          var _a = this.renderer,
              gl = _a.gl,
              stateSystem = _a.state;
          var drawCalls = AbstractBatchRenderer._drawCallPool;
          var curTexArray = null; // Upload textures and do the draw calls

          for (var i = 0; i < dcCount; i++) {
            var _b = drawCalls[i],
                texArray = _b.texArray,
                type = _b.type,
                size = _b.size,
                start = _b.start,
                blend = _b.blend;

            if (curTexArray !== texArray) {
              curTexArray = texArray;
              this.bindAndClearTexArray(texArray);
            }

            this.state.blendMode = blend;
            stateSystem.set(this.state);
            gl.drawElements(type, size, gl.UNSIGNED_SHORT, start * 2);
          }
        };
        /** Renders the content _now_ and empties the current batch. */


        AbstractBatchRenderer.prototype.flush = function () {
          if (this._vertexCount === 0) {
            return;
          }

          this._attributeBuffer = this.getAttributeBuffer(this._vertexCount);
          this._indexBuffer = this.getIndexBuffer(this._indexCount);
          this._aIndex = 0;
          this._iIndex = 0;
          this._dcIndex = 0;
          this.buildTexturesAndDrawCalls();
          this.updateGeometry();
          this.drawBatches(); // reset elements buffer for the next flush

          this._bufferSize = 0;
          this._vertexCount = 0;
          this._indexCount = 0;
        };
        /** Starts a new sprite batch. */


        AbstractBatchRenderer.prototype.start = function () {
          this.renderer.state.set(this.state);
          this.renderer.texture.ensureSamplerType(this.MAX_TEXTURES);
          this.renderer.shader.bind(this._shader);

          if (_pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.CAN_UPLOAD_SAME_BUFFER) {
            // bind buffer #0, we don't need others
            this.renderer.geometry.bind(this._packedGeometries[this._flushId]);
          }
        };
        /** Stops and flushes the current batch. */


        AbstractBatchRenderer.prototype.stop = function () {
          this.flush();
        };
        /** Destroys this `AbstractBatchRenderer`. It cannot be used again. */


        AbstractBatchRenderer.prototype.destroy = function () {
          for (var i = 0; i < this._packedGeometryPoolSize; i++) {
            if (this._packedGeometries[i]) {
              this._packedGeometries[i].destroy();
            }
          }

          this.renderer.off('prerender', this.onPrerender, this);
          this._aBuffers = null;
          this._iBuffers = null;
          this._packedGeometries = null;
          this._attributeBuffer = null;
          this._indexBuffer = null;

          if (this._shader) {
            this._shader.destroy();

            this._shader = null;
          }

          _super.prototype.destroy.call(this);
        };
        /**
         * Fetches an attribute buffer from `this._aBuffers` that can hold atleast `size` floats.
         *
         * @param size - minimum capacity required
         * @return - buffer than can hold atleast `size` floats
         */


        AbstractBatchRenderer.prototype.getAttributeBuffer = function (size) {
          // 8 vertices is enough for 2 quads
          var roundedP2 = (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.nextPow2)(Math.ceil(size / 8));
          var roundedSizeIndex = (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.log2)(roundedP2);
          var roundedSize = roundedP2 * 8;

          if (this._aBuffers.length <= roundedSizeIndex) {
            this._iBuffers.length = roundedSizeIndex + 1;
          }

          var buffer = this._aBuffers[roundedSize];

          if (!buffer) {
            this._aBuffers[roundedSize] = buffer = new _ViewableBuffer(roundedSize * this.vertexSize * 4);
          }

          return buffer;
        };
        /**
         * Fetches an index buffer from `this._iBuffers` that can
         * have at least `size` capacity.
         *
         * @param size - minimum required capacity
         * @return - buffer that can fit `size` indices.
         */


        AbstractBatchRenderer.prototype.getIndexBuffer = function (size) {
          // 12 indices is enough for 2 quads
          var roundedP2 = (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.nextPow2)(Math.ceil(size / 12));
          var roundedSizeIndex = (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.log2)(roundedP2);
          var roundedSize = roundedP2 * 12;

          if (this._iBuffers.length <= roundedSizeIndex) {
            this._iBuffers.length = roundedSizeIndex + 1;
          }

          var buffer = this._iBuffers[roundedSizeIndex];

          if (!buffer) {
            this._iBuffers[roundedSizeIndex] = buffer = new Uint16Array(roundedSize);
          }

          return buffer;
        };
        /**
         * Takes the four batching parameters of `element`, interleaves
         * and pushes them into the batching attribute/index buffers given.
         *
         * It uses these properties: `vertexData` `uvs`, `textureId` and
         * `indicies`. It also uses the "tint" of the base-texture, if
         * present.
         *
         * @param {PIXI.DisplayObject} element - element being rendered
         * @param attributeBuffer - attribute buffer.
         * @param indexBuffer - index buffer
         * @param aIndex - number of floats already in the attribute buffer
         * @param iIndex - number of indices already in `indexBuffer`
         */


        AbstractBatchRenderer.prototype.packInterleavedGeometry = function (element, attributeBuffer, indexBuffer, aIndex, iIndex) {
          var uint32View = attributeBuffer.uint32View,
              float32View = attributeBuffer.float32View;
          var packedVertices = aIndex / this.vertexSize;
          var uvs = element.uvs;
          var indicies = element.indices;
          var vertexData = element.vertexData;
          var textureId = element._texture.baseTexture._batchLocation;
          var alpha = Math.min(element.worldAlpha, 1.0);
          var argb = alpha < 1.0 && element._texture.baseTexture.alphaMode ? (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.premultiplyTint)(element._tintRGB, alpha) : element._tintRGB + (alpha * 255 << 24); // lets not worry about tint! for now..

          for (var i = 0; i < vertexData.length; i += 2) {
            float32View[aIndex++] = vertexData[i];
            float32View[aIndex++] = vertexData[i + 1];
            float32View[aIndex++] = uvs[i];
            float32View[aIndex++] = uvs[i + 1];
            uint32View[aIndex++] = argb;
            float32View[aIndex++] = textureId;
          }

          for (var i = 0; i < indicies.length; i++) {
            indexBuffer[iIndex++] = packedVertices + indicies[i];
          }
        };
        /**
         * Pool of `BatchDrawCall` objects that `flush` used
         * to create "batches" of the objects being rendered.
         *
         * These are never re-allocated again.
         * Shared between all batch renderers because it can be only one "flush" working at the moment.
         *
         * @member {PIXI.BatchDrawCall[]}
         */


        AbstractBatchRenderer._drawCallPool = [];
        /**
         * Pool of `BatchDrawCall` objects that `flush` used
         * to create "batches" of the objects being rendered.
         *
         * These are never re-allocated again.
         * Shared between all batch renderers because it can be only one "flush" working at the moment.
         *
         * @member {PIXI.BatchTextureArray[]}
         */

        AbstractBatchRenderer._textureArrayPool = [];
        return AbstractBatchRenderer;
      }(_ObjectRenderer);
      /**
       * Helper that generates batching multi-texture shader. Use it with your new BatchRenderer
       *
       * @memberof PIXI
       */


      var _BatchShaderGenerator =
      /** @class */
      function () {
        /**
         * @param vertexSrc - Vertex shader
         * @param fragTemplate - Fragment shader template
         */
        function BatchShaderGenerator(vertexSrc, fragTemplate) {
          this.vertexSrc = vertexSrc;
          this.fragTemplate = fragTemplate;
          this.programCache = {};
          this.defaultGroupCache = {};

          if (fragTemplate.indexOf('%count%') < 0) {
            throw new Error('Fragment template must contain "%count%".');
          }

          if (fragTemplate.indexOf('%forloop%') < 0) {
            throw new Error('Fragment template must contain "%forloop%".');
          }
        }

        BatchShaderGenerator.prototype.generateShader = function (maxTextures) {
          if (!this.programCache[maxTextures]) {
            var sampleValues = new Int32Array(maxTextures);

            for (var i = 0; i < maxTextures; i++) {
              sampleValues[i] = i;
            }

            this.defaultGroupCache[maxTextures] = _UniformGroup.from({
              uSamplers: sampleValues
            }, true);
            var fragmentSrc = this.fragTemplate;
            fragmentSrc = fragmentSrc.replace(/%count%/gi, "" + maxTextures);
            fragmentSrc = fragmentSrc.replace(/%forloop%/gi, this.generateSampleSrc(maxTextures));
            this.programCache[maxTextures] = new _Program(this.vertexSrc, fragmentSrc);
          }

          var uniforms = {
            tint: new Float32Array([1, 1, 1, 1]),
            translationMatrix: new _pixi_math__WEBPACK_IMPORTED_MODULE_5__.Matrix(),
            "default": this.defaultGroupCache[maxTextures]
          };
          return new _Shader(this.programCache[maxTextures], uniforms);
        };

        BatchShaderGenerator.prototype.generateSampleSrc = function (maxTextures) {
          var src = '';
          src += '\n';
          src += '\n';

          for (var i = 0; i < maxTextures; i++) {
            if (i > 0) {
              src += '\nelse ';
            }

            if (i < maxTextures - 1) {
              src += "if(vTextureId < " + i + ".5)";
            }

            src += '\n{';
            src += "\n\tcolor = texture2D(uSamplers[" + i + "], vTextureCoord);";
            src += '\n}';
          }

          src += '\n';
          src += '\n';
          return src;
        };

        return BatchShaderGenerator;
      }();
      /**
       * Geometry used to batch standard PIXI content (e.g. Mesh, Sprite, Graphics objects).
       *
       * @memberof PIXI
       */


      var _BatchGeometry =
      /** @class */
      function (_super) {
        __extends(BatchGeometry, _super);
        /**
         * @param {boolean} [_static=false] - Optimization flag, where `false`
         *        is updated every frame, `true` doesn't change frame-to-frame.
         */


        function BatchGeometry(_static) {
          if (_static === void 0) {
            _static = false;
          }

          var _this = _super.call(this) || this;

          _this._buffer = new _Buffer(null, _static, false);
          _this._indexBuffer = new _Buffer(null, _static, true);

          _this.addAttribute('aVertexPosition', _this._buffer, 2, false, _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.FLOAT).addAttribute('aTextureCoord', _this._buffer, 2, false, _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.FLOAT).addAttribute('aColor', _this._buffer, 4, true, _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.UNSIGNED_BYTE).addAttribute('aTextureId', _this._buffer, 1, true, _pixi_constants__WEBPACK_IMPORTED_MODULE_1__.TYPES.FLOAT).addIndex(_this._indexBuffer);

          return _this;
        }

        return BatchGeometry;
      }(_Geometry);

      var defaultVertex$3 = "precision highp float;\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\nattribute vec4 aColor;\nattribute float aTextureId;\n\nuniform mat3 projectionMatrix;\nuniform mat3 translationMatrix;\nuniform vec4 tint;\n\nvarying vec2 vTextureCoord;\nvarying vec4 vColor;\nvarying float vTextureId;\n\nvoid main(void){\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n\n    vTextureCoord = aTextureCoord;\n    vTextureId = aTextureId;\n    vColor = aColor * tint;\n}\n";
      var defaultFragment$2 = "varying vec2 vTextureCoord;\nvarying vec4 vColor;\nvarying float vTextureId;\nuniform sampler2D uSamplers[%count%];\n\nvoid main(void){\n    vec4 color;\n    %forloop%\n    gl_FragColor = color * vColor;\n}\n";
      /** @memberof PIXI */

      var _BatchPluginFactory =
      /** @class */
      function () {
        function BatchPluginFactory() {}
        /**
         * Create a new BatchRenderer plugin for Renderer. this convenience can provide an easy way
         * to extend BatchRenderer with all the necessary pieces.
         * @example
         * const fragment = `
         * varying vec2 vTextureCoord;
         * varying vec4 vColor;
         * varying float vTextureId;
         * uniform sampler2D uSamplers[%count%];
         *
         * void main(void){
         *     vec4 color;
         *     %forloop%
         *     gl_FragColor = vColor * vec4(color.a - color.rgb, color.a);
         * }
         * `;
         * const InvertBatchRenderer = PIXI.BatchPluginFactory.create({ fragment });
         * PIXI.Renderer.registerPlugin('invert', InvertBatchRenderer);
         * const sprite = new PIXI.Sprite();
         * sprite.pluginName = 'invert';
         *
         * @param {object} [options]
         * @param {string} [options.vertex=PIXI.BatchPluginFactory.defaultVertexSrc] - Vertex shader source
         * @param {string} [options.fragment=PIXI.BatchPluginFactory.defaultFragmentTemplate] - Fragment shader template
         * @param {number} [options.vertexSize=6] - Vertex size
         * @param {object} [options.geometryClass=PIXI.BatchGeometry]
         * @return {*} New batch renderer plugin
         */


        BatchPluginFactory.create = function (options) {
          var _a = Object.assign({
            vertex: defaultVertex$3,
            fragment: defaultFragment$2,
            geometryClass: _BatchGeometry,
            vertexSize: 6
          }, options),
              vertex = _a.vertex,
              fragment = _a.fragment,
              vertexSize = _a.vertexSize,
              geometryClass = _a.geometryClass;

          return (
            /** @class */
            function (_super) {
              __extends(BatchPlugin, _super);

              function BatchPlugin(renderer) {
                var _this = _super.call(this, renderer) || this;

                _this.shaderGenerator = new _BatchShaderGenerator(vertex, fragment);
                _this.geometryClass = geometryClass;
                _this.vertexSize = vertexSize;
                return _this;
              }

              return BatchPlugin;
            }(_AbstractBatchRenderer)
          );
        };

        Object.defineProperty(BatchPluginFactory, "defaultVertexSrc", {
          /**
           * The default vertex shader source
           *
           * @readonly
           */
          get: function get() {
            return defaultVertex$3;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BatchPluginFactory, "defaultFragmentTemplate", {
          /**
           * The default fragment shader source
           *
           * @readonly
           */
          get: function get() {
            return defaultFragment$2;
          },
          enumerable: false,
          configurable: true
        });
        return BatchPluginFactory;
      }(); // Setup the default BatchRenderer plugin, this is what
      // we'll actually export at the root level


      var _BatchRenderer = _BatchPluginFactory.create();
      /**
       * @memberof PIXI
       * @namespace resources
       * @see PIXI
       * @deprecated since 6.0.0
       */


      var _resources2 = {};

      var _loop_1 = function _loop_1(name) {
        Object.defineProperty(_resources2, name, {
          get: function get() {
            (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.deprecation)('6.0.0', "PIXI.systems." + name + " has moved to PIXI." + name);
            return _resources[name];
          }
        });
      };

      for (var name in _resources) {
        _loop_1(name);
      }
      /**
       * @memberof PIXI
       * @namespace systems
       * @see PIXI
       * @deprecated since 6.0.0
       */


      var _systems2 = {};

      var _loop_2 = function _loop_2(name) {
        Object.defineProperty(_systems2, name, {
          get: function get() {
            (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.deprecation)('6.0.0', "PIXI.resources." + name + " has moved to PIXI." + name);
            return _systems[name];
          }
        });
      };

      for (var name in _systems) {
        _loop_2(name);
      }
      /***/

    },

    /***/
    52630:
    /*!********************************************************!*\
      !*** ./node_modules/@pixi/display/dist/esm/display.js ***!
      \********************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "Bounds": function Bounds() {
          return (
            /* binding */
            _Bounds
          );
        },

        /* harmony export */
        "Container": function Container() {
          return (
            /* binding */
            _Container
          );
        },

        /* harmony export */
        "DisplayObject": function DisplayObject() {
          return (
            /* binding */
            _DisplayObject
          );
        },

        /* harmony export */
        "TemporaryDisplayObject": function TemporaryDisplayObject() {
          return (
            /* binding */
            _TemporaryDisplayObject
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _pixi_settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @pixi/settings */
      87703);
      /* harmony import */


      var _pixi_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @pixi/math */
      67947);
      /* harmony import */


      var _pixi_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @pixi/utils */
      47300);
      /*!
       * @pixi/display - v6.2.0
       * Compiled Mon, 01 Nov 2021 16:52:10 UTC
       *
       * @pixi/display is licensed under the MIT License.
       * http://www.opensource.org/licenses/mit-license
       */

      /**
       * Sets the default value for the container property 'sortableChildren'.
       * If set to true, the container will sort its children by zIndex value
       * when updateTransform() is called, or manually if sortChildren() is called.
       *
       * This actually changes the order of elements in the array, so should be treated
       * as a basic solution that is not performant compared to other solutions,
       * such as @link https://github.com/pixijs/pixi-display
       *
       * Also be aware of that this may not work nicely with the addChildAt() function,
       * as the zIndex sorting may cause the child to automatically sorted to another position.
       *
       * @static
       * @constant
       * @name SORTABLE_CHILDREN
       * @memberof PIXI.settings
       * @type {boolean}
       * @default false
       */


      _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.SORTABLE_CHILDREN = false;
      /**
       * 'Builder' pattern for bounds rectangles.
       *
       * This could be called an Axis-Aligned Bounding Box.
       * It is not an actual shape. It is a mutable thing; no 'EMPTY' or those kind of problems.
       *
       * @class
       * @memberof PIXI
       */

      var _Bounds =
      /** @class */
      function () {
        function Bounds() {
          /**
           * @member {number}
           * @default 0
           */
          this.minX = Infinity;
          /**
           * @member {number}
           * @default 0
           */

          this.minY = Infinity;
          /**
           * @member {number}
           * @default 0
           */

          this.maxX = -Infinity;
          /**
           * @member {number}
           * @default 0
           */

          this.maxY = -Infinity;
          this.rect = null;
          /**
           * It is updated to _boundsID of corresponding object to keep bounds in sync with content.
           * Updated from outside, thus public modifier.
           *
           * @member {number}
           * @public
           */

          this.updateID = -1;
        }
        /**
         * Checks if bounds are empty.
         *
         * @return {boolean} True if empty.
         */


        Bounds.prototype.isEmpty = function () {
          return this.minX > this.maxX || this.minY > this.maxY;
        };
        /**
         * Clears the bounds and resets.
         *
         */


        Bounds.prototype.clear = function () {
          this.minX = Infinity;
          this.minY = Infinity;
          this.maxX = -Infinity;
          this.maxY = -Infinity;
        };
        /**
         * Can return Rectangle.EMPTY constant, either construct new rectangle, either use your rectangle
         * It is not guaranteed that it will return tempRect
         *
         * @param {PIXI.Rectangle} rect - temporary object will be used if AABB is not empty
         * @returns {PIXI.Rectangle} A rectangle of the bounds
         */


        Bounds.prototype.getRectangle = function (rect) {
          if (this.minX > this.maxX || this.minY > this.maxY) {
            return _pixi_math__WEBPACK_IMPORTED_MODULE_1__.Rectangle.EMPTY;
          }

          rect = rect || new _pixi_math__WEBPACK_IMPORTED_MODULE_1__.Rectangle(0, 0, 1, 1);
          rect.x = this.minX;
          rect.y = this.minY;
          rect.width = this.maxX - this.minX;
          rect.height = this.maxY - this.minY;
          return rect;
        };
        /**
         * This function should be inlined when its possible.
         *
         * @param {PIXI.IPointData} point - The point to add.
         */


        Bounds.prototype.addPoint = function (point) {
          this.minX = Math.min(this.minX, point.x);
          this.maxX = Math.max(this.maxX, point.x);
          this.minY = Math.min(this.minY, point.y);
          this.maxY = Math.max(this.maxY, point.y);
        };
        /**
         * Adds a point, after transformed. This should be inlined when its possible.
         *
         * @param matrix
         * @param point
         */


        Bounds.prototype.addPointMatrix = function (matrix, point) {
          var a = matrix.a,
              b = matrix.b,
              c = matrix.c,
              d = matrix.d,
              tx = matrix.tx,
              ty = matrix.ty;
          var x = a * point.x + c * point.y + tx;
          var y = b * point.x + d * point.y + ty;
          this.minX = Math.min(this.minX, x);
          this.maxX = Math.max(this.maxX, x);
          this.minY = Math.min(this.minY, y);
          this.maxY = Math.max(this.maxY, y);
        };
        /**
         * Adds a quad, not transformed
         *
         * @param {Float32Array} vertices - The verts to add.
         */


        Bounds.prototype.addQuad = function (vertices) {
          var minX = this.minX;
          var minY = this.minY;
          var maxX = this.maxX;
          var maxY = this.maxY;
          var x = vertices[0];
          var y = vertices[1];
          minX = x < minX ? x : minX;
          minY = y < minY ? y : minY;
          maxX = x > maxX ? x : maxX;
          maxY = y > maxY ? y : maxY;
          x = vertices[2];
          y = vertices[3];
          minX = x < minX ? x : minX;
          minY = y < minY ? y : minY;
          maxX = x > maxX ? x : maxX;
          maxY = y > maxY ? y : maxY;
          x = vertices[4];
          y = vertices[5];
          minX = x < minX ? x : minX;
          minY = y < minY ? y : minY;
          maxX = x > maxX ? x : maxX;
          maxY = y > maxY ? y : maxY;
          x = vertices[6];
          y = vertices[7];
          minX = x < minX ? x : minX;
          minY = y < minY ? y : minY;
          maxX = x > maxX ? x : maxX;
          maxY = y > maxY ? y : maxY;
          this.minX = minX;
          this.minY = minY;
          this.maxX = maxX;
          this.maxY = maxY;
        };
        /**
         * Adds sprite frame, transformed.
         *
         * @param {PIXI.Transform} transform - transform to apply
         * @param {number} x0 - left X of frame
         * @param {number} y0 - top Y of frame
         * @param {number} x1 - right X of frame
         * @param {number} y1 - bottom Y of frame
         */


        Bounds.prototype.addFrame = function (transform, x0, y0, x1, y1) {
          this.addFrameMatrix(transform.worldTransform, x0, y0, x1, y1);
        };
        /**
         * Adds sprite frame, multiplied by matrix
         *
         * @param {PIXI.Matrix} matrix - matrix to apply
         * @param {number} x0 - left X of frame
         * @param {number} y0 - top Y of frame
         * @param {number} x1 - right X of frame
         * @param {number} y1 - bottom Y of frame
         */


        Bounds.prototype.addFrameMatrix = function (matrix, x0, y0, x1, y1) {
          var a = matrix.a;
          var b = matrix.b;
          var c = matrix.c;
          var d = matrix.d;
          var tx = matrix.tx;
          var ty = matrix.ty;
          var minX = this.minX;
          var minY = this.minY;
          var maxX = this.maxX;
          var maxY = this.maxY;
          var x = a * x0 + c * y0 + tx;
          var y = b * x0 + d * y0 + ty;
          minX = x < minX ? x : minX;
          minY = y < minY ? y : minY;
          maxX = x > maxX ? x : maxX;
          maxY = y > maxY ? y : maxY;
          x = a * x1 + c * y0 + tx;
          y = b * x1 + d * y0 + ty;
          minX = x < minX ? x : minX;
          minY = y < minY ? y : minY;
          maxX = x > maxX ? x : maxX;
          maxY = y > maxY ? y : maxY;
          x = a * x0 + c * y1 + tx;
          y = b * x0 + d * y1 + ty;
          minX = x < minX ? x : minX;
          minY = y < minY ? y : minY;
          maxX = x > maxX ? x : maxX;
          maxY = y > maxY ? y : maxY;
          x = a * x1 + c * y1 + tx;
          y = b * x1 + d * y1 + ty;
          minX = x < minX ? x : minX;
          minY = y < minY ? y : minY;
          maxX = x > maxX ? x : maxX;
          maxY = y > maxY ? y : maxY;
          this.minX = minX;
          this.minY = minY;
          this.maxX = maxX;
          this.maxY = maxY;
        };
        /**
         * Adds screen vertices from array
         *
         * @param {Float32Array} vertexData - calculated vertices
         * @param {number} beginOffset - begin offset
         * @param {number} endOffset - end offset, excluded
         */


        Bounds.prototype.addVertexData = function (vertexData, beginOffset, endOffset) {
          var minX = this.minX;
          var minY = this.minY;
          var maxX = this.maxX;
          var maxY = this.maxY;

          for (var i = beginOffset; i < endOffset; i += 2) {
            var x = vertexData[i];
            var y = vertexData[i + 1];
            minX = x < minX ? x : minX;
            minY = y < minY ? y : minY;
            maxX = x > maxX ? x : maxX;
            maxY = y > maxY ? y : maxY;
          }

          this.minX = minX;
          this.minY = minY;
          this.maxX = maxX;
          this.maxY = maxY;
        };
        /**
         * Add an array of mesh vertices
         *
         * @param {PIXI.Transform} transform - mesh transform
         * @param {Float32Array} vertices - mesh coordinates in array
         * @param {number} beginOffset - begin offset
         * @param {number} endOffset - end offset, excluded
         */


        Bounds.prototype.addVertices = function (transform, vertices, beginOffset, endOffset) {
          this.addVerticesMatrix(transform.worldTransform, vertices, beginOffset, endOffset);
        };
        /**
         * Add an array of mesh vertices.
         *
         * @param {PIXI.Matrix} matrix - mesh matrix
         * @param {Float32Array} vertices - mesh coordinates in array
         * @param {number} beginOffset - begin offset
         * @param {number} endOffset - end offset, excluded
         * @param {number} [padX=0] - x padding
         * @param {number} [padY=0] - y padding
         */


        Bounds.prototype.addVerticesMatrix = function (matrix, vertices, beginOffset, endOffset, padX, padY) {
          if (padX === void 0) {
            padX = 0;
          }

          if (padY === void 0) {
            padY = padX;
          }

          var a = matrix.a;
          var b = matrix.b;
          var c = matrix.c;
          var d = matrix.d;
          var tx = matrix.tx;
          var ty = matrix.ty;
          var minX = this.minX;
          var minY = this.minY;
          var maxX = this.maxX;
          var maxY = this.maxY;

          for (var i = beginOffset; i < endOffset; i += 2) {
            var rawX = vertices[i];
            var rawY = vertices[i + 1];
            var x = a * rawX + c * rawY + tx;
            var y = d * rawY + b * rawX + ty;
            minX = Math.min(minX, x - padX);
            maxX = Math.max(maxX, x + padX);
            minY = Math.min(minY, y - padY);
            maxY = Math.max(maxY, y + padY);
          }

          this.minX = minX;
          this.minY = minY;
          this.maxX = maxX;
          this.maxY = maxY;
        };
        /**
         * Adds other Bounds.
         *
         * @param {PIXI.Bounds} bounds - The Bounds to be added
         */


        Bounds.prototype.addBounds = function (bounds) {
          var minX = this.minX;
          var minY = this.minY;
          var maxX = this.maxX;
          var maxY = this.maxY;
          this.minX = bounds.minX < minX ? bounds.minX : minX;
          this.minY = bounds.minY < minY ? bounds.minY : minY;
          this.maxX = bounds.maxX > maxX ? bounds.maxX : maxX;
          this.maxY = bounds.maxY > maxY ? bounds.maxY : maxY;
        };
        /**
         * Adds other Bounds, masked with Bounds.
         *
         * @param {PIXI.Bounds} bounds - The Bounds to be added.
         * @param {PIXI.Bounds} mask - TODO
         */


        Bounds.prototype.addBoundsMask = function (bounds, mask) {
          var _minX = bounds.minX > mask.minX ? bounds.minX : mask.minX;

          var _minY = bounds.minY > mask.minY ? bounds.minY : mask.minY;

          var _maxX = bounds.maxX < mask.maxX ? bounds.maxX : mask.maxX;

          var _maxY = bounds.maxY < mask.maxY ? bounds.maxY : mask.maxY;

          if (_minX <= _maxX && _minY <= _maxY) {
            var minX = this.minX;
            var minY = this.minY;
            var maxX = this.maxX;
            var maxY = this.maxY;
            this.minX = _minX < minX ? _minX : minX;
            this.minY = _minY < minY ? _minY : minY;
            this.maxX = _maxX > maxX ? _maxX : maxX;
            this.maxY = _maxY > maxY ? _maxY : maxY;
          }
        };
        /**
         * Adds other Bounds, multiplied by matrix. Bounds shouldn't be empty.
         *
         * @param {PIXI.Bounds} bounds - other bounds
         * @param {PIXI.Matrix} matrix - multiplicator
         */


        Bounds.prototype.addBoundsMatrix = function (bounds, matrix) {
          this.addFrameMatrix(matrix, bounds.minX, bounds.minY, bounds.maxX, bounds.maxY);
        };
        /**
         * Adds other Bounds, masked with Rectangle.
         *
         * @param {PIXI.Bounds} bounds - TODO
         * @param {PIXI.Rectangle} area - TODO
         */


        Bounds.prototype.addBoundsArea = function (bounds, area) {
          var _minX = bounds.minX > area.x ? bounds.minX : area.x;

          var _minY = bounds.minY > area.y ? bounds.minY : area.y;

          var _maxX = bounds.maxX < area.x + area.width ? bounds.maxX : area.x + area.width;

          var _maxY = bounds.maxY < area.y + area.height ? bounds.maxY : area.y + area.height;

          if (_minX <= _maxX && _minY <= _maxY) {
            var minX = this.minX;
            var minY = this.minY;
            var maxX = this.maxX;
            var maxY = this.maxY;
            this.minX = _minX < minX ? _minX : minX;
            this.minY = _minY < minY ? _minY : minY;
            this.maxX = _maxX > maxX ? _maxX : maxX;
            this.maxY = _maxY > maxY ? _maxY : maxY;
          }
        };
        /**
         * Pads bounds object, making it grow in all directions.
         * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.
         *
         * @param {number} [paddingX=0] - The horizontal padding amount.
         * @param {number} [paddingY=0] - The vertical padding amount.
         */


        Bounds.prototype.pad = function (paddingX, paddingY) {
          if (paddingX === void 0) {
            paddingX = 0;
          }

          if (paddingY === void 0) {
            paddingY = paddingX;
          }

          if (!this.isEmpty()) {
            this.minX -= paddingX;
            this.maxX += paddingX;
            this.minY -= paddingY;
            this.maxY += paddingY;
          }
        };
        /**
         * Adds padded frame. (x0, y0) should be strictly less than (x1, y1)
         *
         * @param {number} x0 - left X of frame
         * @param {number} y0 - top Y of frame
         * @param {number} x1 - right X of frame
         * @param {number} y1 - bottom Y of frame
         * @param {number} padX - padding X
         * @param {number} padY - padding Y
         */


        Bounds.prototype.addFramePad = function (x0, y0, x1, y1, padX, padY) {
          x0 -= padX;
          y0 -= padY;
          x1 += padX;
          y1 += padY;
          this.minX = this.minX < x0 ? this.minX : x0;
          this.maxX = this.maxX > x1 ? this.maxX : x1;
          this.minY = this.minY < y0 ? this.minY : y0;
          this.maxY = this.maxY > y1 ? this.maxY : y1;
        };

        return Bounds;
      }();
      /*! *****************************************************************************
      Copyright (c) Microsoft Corporation. All rights reserved.
      Licensed under the Apache License, Version 2.0 (the "License"); you may not use
      this file except in compliance with the License. You may obtain a copy of the
      License at http://www.apache.org/licenses/LICENSE-2.0
      
      THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
      KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
      WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
      MERCHANTABLITY OR NON-INFRINGEMENT.
      
      See the Apache Version 2.0 License for specific language governing permissions
      and limitations under the License.
      ***************************************************************************** */

      /* global Reflect, Promise */


      var _extendStatics2 = function extendStatics(d, b) {
        _extendStatics2 = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function (d, b) {
          d.__proto__ = b;
        } || function (d, b) {
          for (var p in b) {
            if (b.hasOwnProperty(p)) {
              d[p] = b[p];
            }
          }
        };

        return _extendStatics2(d, b);
      };

      function __extends(d, b) {
        _extendStatics2(d, b);

        function __() {
          this.constructor = d;
        }

        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      }
      /**
       * The base class for all objects that are rendered on the screen.
       *
       * This is an abstract class and can not be used on its own; rather it should be extended.
       *
       * ## Display objects implemented in PixiJS
       *
       * | Display Object                  | Description                                                           |
       * | ------------------------------- | --------------------------------------------------------------------- |
       * | {@link PIXI.Container}          | Adds support for `children` to DisplayObject                          |
       * | {@link PIXI.Graphics}           | Shape-drawing display object similar to the Canvas API                |
       * | {@link PIXI.Sprite}             | Draws textures (i.e. images)                                          |
       * | {@link PIXI.Text}               | Draws text using the Canvas API internally                            |
       * | {@link PIXI.BitmapText}         | More scaleable solution for text rendering, reusing glyph textures    |
       * | {@link PIXI.TilingSprite}       | Draws textures/images in a tiled fashion                              |
       * | {@link PIXI.AnimatedSprite}     | Draws an animation of multiple images                                 |
       * | {@link PIXI.Mesh}               | Provides a lower-level API for drawing meshes with custom data        |
       * | {@link PIXI.NineSlicePlane}     | Mesh-related                                                          |
       * | {@link PIXI.SimpleMesh}         | v4-compatible mesh                                                    |
       * | {@link PIXI.SimplePlane}        | Mesh-related                                                          |
       * | {@link PIXI.SimpleRope}         | Mesh-related                                                          |
       *
       * ## Transforms
       *
       * The [transform]{@link DisplayObject#transform} of a display object describes the projection from its
       * local coordinate space to its parent's local coordinate space. The following properties are derived
       * from the transform:
       *
       * <table>
       *   <thead>
       *     <tr>
       *       <th>Property</th>
       *       <th>Description</th>
       *     </tr>
       *   </thead>
       *   <tbody>
       *     <tr>
       *       <td>[pivot]{@link PIXI.DisplayObject#pivot}</td>
       *       <td>
       *         Invariant under rotation, scaling, and skewing. The projection of into the parent's space of the pivot
       *         is equal to position, regardless of the other three transformations. In other words, It is the center of
       *         rotation, scaling, and skewing.
       *       </td>
       *     </tr>
       *     <tr>
       *       <td>[position]{@link PIXI.DisplayObject#position}</td>
       *       <td>
       *         Translation. This is the position of the [pivot]{@link PIXI.DisplayObject#pivot} in the parent's local
       *         space. The default value of the pivot is the origin (0,0). If the top-left corner of your display object
       *         is (0,0) in its local space, then the position will be its top-left corner in the parent's local space.
       *       </td>
       *     </tr>
       *     <tr>
       *       <td>[scale]{@link PIXI.DisplayObject#scale}</td>
       *       <td>
       *         Scaling. This will stretch (or compress) the display object's projection. The scale factors are along the
       *         local coordinate axes. In other words, the display object is scaled before rotated or skewed. The center
       *         of scaling is the [pivot]{@link PIXI.DisplayObject#pivot}.
       *       </td>
       *     </tr>
       *     <tr>
       *       <td>[rotation]{@link PIXI.DisplayObject#rotation}</td>
       *       <td>
       *          Rotation. This will rotate the display object's projection by this angle (in radians).
       *       </td>
       *     </tr>
       *     <tr>
       *       <td>[skew]{@link PIXI.DisplayObject#skew}</td>
       *       <td>
       *         <p>Skewing. This can be used to deform a rectangular display object into a parallelogram.</p>
       *         <p>
       *         In PixiJS, skew has a slightly different behaviour than the conventional meaning. It can be
       *         thought of the net rotation applied to the coordinate axes (separately). For example, if "skew.x" is
       *         ⍺ and "skew.y" is β, then the line x = 0 will be rotated by ⍺ (y = -x*cot⍺) and the line y = 0 will be
       *         rotated by β (y = x*tanβ). A line y = x*tanϴ (i.e. a line at angle ϴ to the x-axis in local-space) will
       *         be rotated by an angle between ⍺ and β.
       *         </p>
       *         <p>
       *         It can be observed that if skew is applied equally to both axes, then it will be equivalent to applying
       *         a rotation. Indeed, if "skew.x" = -ϴ and "skew.y" = ϴ, it will produce an equivalent of "rotation" = ϴ.
       *         </p>
       *         <p>
       *         Another quite interesting observation is that "skew.x", "skew.y", rotation are communtative operations. Indeed,
       *         because rotation is essentially a careful combination of the two.
       *         </p>
       *       </td>
       *     </tr>
       *     <tr>
       *       <td>angle</td>
       *       <td>Rotation. This is an alias for [rotation]{@link PIXI.DisplayObject#rotation}, but in degrees.</td>
       *     </tr>
       *     <tr>
       *       <td>x</td>
       *       <td>Translation. This is an alias for position.x!</td>
       *     </tr>
       *     <tr>
       *       <td>y</td>
       *       <td>Translation. This is an alias for position.y!</td>
       *     </tr>
       *     <tr>
       *       <td>width</td>
       *       <td>
       *         Implemented in [Container]{@link PIXI.Container}. Scaling. The width property calculates scale.x by dividing
       *         the "requested" width by the local bounding box width. It is indirectly an abstraction over scale.x, and there
       *         is no concept of user-defined width.
       *       </td>
       *     </tr>
       *     <tr>
       *       <td>height</td>
       *       <td>
       *         Implemented in [Container]{@link PIXI.Container}. Scaling. The height property calculates scale.y by dividing
       *         the "requested" height by the local bounding box height. It is indirectly an abstraction over scale.y, and there
       *         is no concept of user-defined height.
       *       </td>
       *     </tr>
       *   </tbody>
       * </table>
       *
       * ## Bounds
       *
       * The bounds of a display object is defined by the minimum axis-aligned rectangle in world space that can fit
       * around it. The abstract `calculateBounds` method is responsible for providing it (and it should use the
       * `worldTransform` to calculate in world space).
       *
       * There are a few additional types of bounding boxes:
       *
       * | Bounds                | Description                                                                              |
       * | --------------------- | ---------------------------------------------------------------------------------------- |
       * | World Bounds          | This is synonymous is the regular bounds described above. See `getBounds()`.             |
       * | Local Bounds          | This the axis-aligned bounding box in the parent's local space. See `getLocalBounds()`.  |
       * | Render Bounds         | The bounds, but including extra rendering effects like filter padding.                   |
       * | Projected Bounds      | The bounds of the projected display object onto the screen. Usually equals world bounds. |
       * | Relative Bounds       | The bounds of a display object when projected onto a ancestor's (or parent's) space.     |
       * | Natural Bounds        | The bounds of an object in its own local space (not parent's space, like in local bounds)|
       * | Content Bounds        | The natural bounds when excluding all children of a `Container`.                         |
       *
       * ### calculateBounds
       *
       * [Container]{@link Container} already implements `calculateBounds` in a manner that includes children.
       *
       * But for a non-Container display object, the `calculateBounds` method must be overridden in order for `getBounds` and
       * `getLocalBounds` to work. This method must write the bounds into `this._bounds`.
       *
       * Generally, the following technique works for most simple cases: take the list of points
       * forming the "hull" of the object (i.e. outline of the object's shape), and then add them
       * using {@link PIXI.Bounds#addPointMatrix}.
       *
       * ```js
       * calculateBounds(): void
       * {
       *     const points = [...];
       *
       *     for (let i = 0, j = points.length; i < j; i++)
       *     {
       *         this._bounds.addPointMatrix(this.worldTransform, points[i]);
       *     }
       * }
       * ```
       *
       * You can optimize this for a large number of points by using {@link PIXI.Bounds#addVerticesMatrix} to pass them
       * in one array together.
       *
       * ## Alpha
       *
       * This alpha sets a display object's **relative opacity** w.r.t its parent. For example, if the alpha of a display
       * object is 0.5 and its parent's alpha is 0.5, then it will be rendered with 25% opacity (assuming alpha is not
       * applied on any ancestor further up the chain).
       *
       * The alpha with which the display object will be rendered is called the [worldAlpha]{@link PIXI.DisplayObject#worldAlpha}.
       *
       * ## Renderable vs Visible
       *
       * The `renderable` and `visible` properties can be used to prevent a display object from being rendered to the
       * screen. However, there is a subtle difference between the two. When using `renderable`, the transforms  of the display
       * object (and its children subtree) will continue to be calculated. When using `visible`, the transforms will not
       * be calculated.
       *
       * It is recommended that applications use the `renderable` property for culling. See
       * [@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} or
       * [pixi-cull]{@link https://www.npmjs.com/package/pixi-cull} for more details.
       *
       * Otherwise, to prevent an object from rendering in the general-purpose sense - `visible` is the property to use. This
       * one is also better in terms of performance.
       *
       * @class
       * @extends PIXI.utils.EventEmitter
       * @memberof PIXI
       */


      var _DisplayObject =
      /** @class */
      function (_super) {
        __extends(DisplayObject, _super);

        function DisplayObject() {
          var _this = _super.call(this) || this;

          _this.tempDisplayObjectParent = null; // TODO: need to create Transform from factory

          /**
           * World transform and local transform of this object.
           * This will become read-only later, please do not assign anything there unless you know what are you doing.
           *
           * @member {PIXI.Transform}
           */

          _this.transform = new _pixi_math__WEBPACK_IMPORTED_MODULE_1__.Transform();
          /**
           * The opacity of the object.
           *
           * @member {number}
           */

          _this.alpha = 1;
          /**
           * The visibility of the object. If false the object will not be drawn, and
           * the updateTransform function will not be called.
           *
           * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.
           *
           * @member {boolean}
           */

          _this.visible = true;
          /**
           * Can this object be rendered, if false the object will not be drawn but the updateTransform
           * methods will still be called.
           *
           * Only affects recursive calls from parent. You can ask for bounds manually.
           *
           * @member {boolean}
           */

          _this.renderable = true;
          /**
           * The display object container that contains this display object.
           *
           * @member {PIXI.Container}
           */

          _this.parent = null;
          /**
           * The multiplied alpha of the displayObject.
           *
           * @member {number}
           * @readonly
           */

          _this.worldAlpha = 1;
          /**
           * Which index in the children array the display component was before the previous zIndex sort.
           * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.
           *
           * @member {number}
           * @protected
           */

          _this._lastSortedIndex = 0;
          /**
           * The zIndex of the displayObject.
           * A higher value will mean it will be rendered on top of other displayObjects within the same container.
           *
           * @member {number}
           * @protected
           */

          _this._zIndex = 0;
          /**
           * The area the filter is applied to. This is used as more of an optimization
           * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.
           *
           * Also works as an interaction mask.
           *
           * @member {?PIXI.Rectangle}
           */

          _this.filterArea = null;
          /**
           * Sets the filters for the displayObject.
           * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.
           * To remove filters simply set this property to `'null'`.
           *
           * @member {?PIXI.Filter[]}
           */

          _this.filters = null;
          /**
           * Currently enabled filters
           * @member {PIXI.Filter[]}
           * @protected
           */

          _this._enabledFilters = null;
          /**
           * The bounds object, this is used to calculate and store the bounds of the displayObject.
           *
           * @member {PIXI.Bounds}
           */

          _this._bounds = new _Bounds();
          /**
           * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.
           *
           * @member {PIXI.Bounds}
           */

          _this._localBounds = null;
          /**
           * Flags the cached bounds as dirty.
           *
           * @member {number}
           * @protected
           */

          _this._boundsID = 0;
          /**
           * Cache of this display-object's bounds-rectangle.
           *
           * @member {PIXI.Bounds}
           * @protected
           */

          _this._boundsRect = null;
          /**
           * Cache of this display-object's local-bounds rectangle.
           *
           * @member {PIXI.Bounds}
           * @protected
           */

          _this._localBoundsRect = null;
          /**
           * The original, cached mask of the object.
           *
           * @member {PIXI.Container|PIXI.MaskData|null}
           * @protected
           */

          _this._mask = null;
          /**
           * The number of times this object is used as a mask by another object.
           *
           * @member {number}
           * @private
           */

          _this._maskRefCount = 0;
          /**
           * If the object has been destroyed via destroy(). If true, it should not be used.
           *
           * @member {boolean}
           * @protected
           */

          _this._destroyed = false;
          /**
           * used to fast check if a sprite is.. a sprite!
           * @member {boolean}
           */

          _this.isSprite = false;
          /**
           * Does any other displayObject use this object as a mask?
           * @member {boolean}
           */

          _this.isMask = false;
          return _this;
        }
        /**
         * Mixes all enumerable properties and methods from a source object to DisplayObject.
         *
         * @param {object} source - The source of properties and methods to mix in.
         */


        DisplayObject.mixin = function (source) {
          // in ES8/ES2017, this would be really easy:
          // Object.defineProperties(DisplayObject.prototype, Object.getOwnPropertyDescriptors(source));
          // get all the enumerable property keys
          var keys = Object.keys(source); // loop through properties

          for (var i = 0; i < keys.length; ++i) {
            var propertyName = keys[i]; // Set the property using the property descriptor - this works for accessors and normal value properties

            Object.defineProperty(DisplayObject.prototype, propertyName, Object.getOwnPropertyDescriptor(source, propertyName));
          }
        };

        Object.defineProperty(DisplayObject.prototype, "destroyed", {
          /**
           * Fired when this DisplayObject is added to a Container.
           *
           * @instance
           * @event added
           * @param {PIXI.Container} container - The container added to.
           */

          /**
           * Fired when this DisplayObject is removed from a Container.
           *
           * @instance
           * @event removed
           * @param {PIXI.Container} container - The container removed from.
           */

          /**
           * Fired when this DisplayObject is destroyed.
           *
           * @instance
           * @event destroyed
           */

          /**
           * Readonly flag for destroyed display objects.
           */
          get: function get() {
            return this._destroyed;
          },
          enumerable: false,
          configurable: true
        });
        /**
         * Recursively updates transform of all objects from the root to this one
         * internal function for toLocal()
         */

        DisplayObject.prototype._recursivePostUpdateTransform = function () {
          if (this.parent) {
            this.parent._recursivePostUpdateTransform();

            this.transform.updateTransform(this.parent.transform);
          } else {
            this.transform.updateTransform(this._tempDisplayObjectParent.transform);
          }
        };
        /**
         * Updates the object transform for rendering.
         *
         * TODO - Optimization pass!
         */


        DisplayObject.prototype.updateTransform = function () {
          this._boundsID++;
          this.transform.updateTransform(this.parent.transform); // multiply the alphas..

          this.worldAlpha = this.alpha * this.parent.worldAlpha;
        };
        /**
         * Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.
         *
         * This method is expensive on containers with a large subtree (like the stage). This is because the bounds
         * of a container depend on its children's bounds, which recursively causes all bounds in the subtree to
         * be recalculated. The upside, however, is that calling `getBounds` once on a container will indeed update
         * the bounds of all children (the whole subtree, in fact). This side effect should be exploited by using
         * `displayObject._bounds.getRectangle()` when traversing through all the bounds in a scene graph. Otherwise,
         * calling `getBounds` on each object in a subtree will cause the total cost to increase quadratically as
         * its height increases.
         *
         * * The transforms of all objects in a container's **subtree** and of all **ancestors** are updated.
         * * The world bounds of all display objects in a container's **subtree** will also be recalculated.
         *
         * The `_bounds` object stores the last calculation of the bounds. You can use to entirely skip bounds
         * calculation if needed.
         *
         * ```js
         * const lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);
         * ```
         *
         * Do know that usage of `getLocalBounds` can corrupt the `_bounds` of children (the whole subtree, actually). This
         * is a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more
         * details.
         *
         * `getBounds` should be called with `skipUpdate` equal to `true` in a render() call. This is because the transforms
         * are guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain
         * cases.
         *
         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.
         * @return {PIXI.Rectangle} The minimum axis-aligned rectangle in world space that fits around this object.
         */


        DisplayObject.prototype.getBounds = function (skipUpdate, rect) {
          if (!skipUpdate) {
            if (!this.parent) {
              this.parent = this._tempDisplayObjectParent;
              this.updateTransform();
              this.parent = null;
            } else {
              this._recursivePostUpdateTransform();

              this.updateTransform();
            }
          }

          if (this._bounds.updateID !== this._boundsID) {
            this.calculateBounds();
            this._bounds.updateID = this._boundsID;
          }

          if (!rect) {
            if (!this._boundsRect) {
              this._boundsRect = new _pixi_math__WEBPACK_IMPORTED_MODULE_1__.Rectangle();
            }

            rect = this._boundsRect;
          }

          return this._bounds.getRectangle(rect);
        };
        /**
         * Retrieves the local bounds of the displayObject as a rectangle object.
         *
         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.
         * @return {PIXI.Rectangle} The rectangular bounding area.
         */


        DisplayObject.prototype.getLocalBounds = function (rect) {
          if (!rect) {
            if (!this._localBoundsRect) {
              this._localBoundsRect = new _pixi_math__WEBPACK_IMPORTED_MODULE_1__.Rectangle();
            }

            rect = this._localBoundsRect;
          }

          if (!this._localBounds) {
            this._localBounds = new _Bounds();
          }

          var transformRef = this.transform;
          var parentRef = this.parent;
          this.parent = null;
          this.transform = this._tempDisplayObjectParent.transform;
          var worldBounds = this._bounds;
          var worldBoundsID = this._boundsID;
          this._bounds = this._localBounds;
          var bounds = this.getBounds(false, rect);
          this.parent = parentRef;
          this.transform = transformRef;
          this._bounds = worldBounds;
          this._bounds.updateID += this._boundsID - worldBoundsID; // reflect side-effects

          return bounds;
        };
        /**
         * Calculates the global position of the display object.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.
         * @return {PIXI.Point} A point object representing the position of this object.
         */


        DisplayObject.prototype.toGlobal = function (position, point, skipUpdate) {
          if (skipUpdate === void 0) {
            skipUpdate = false;
          }

          if (!skipUpdate) {
            this._recursivePostUpdateTransform(); // this parent check is for just in case the item is a root object.
            // If it is we need to give it a temporary parent so that displayObjectUpdateTransform works correctly
            // this is mainly to avoid a parent check in the main loop. Every little helps for performance :)


            if (!this.parent) {
              this.parent = this._tempDisplayObjectParent;
              this.displayObjectUpdateTransform();
              this.parent = null;
            } else {
              this.displayObjectUpdateTransform();
            }
          } // don't need to update the lot


          return this.worldTransform.apply(position, point);
        };
        /**
         * Calculates the local position of the display object relative to another point.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform
         * @return {PIXI.Point} A point object representing the position of this object
         */


        DisplayObject.prototype.toLocal = function (position, from, point, skipUpdate) {
          if (from) {
            position = from.toGlobal(position, point, skipUpdate);
          }

          if (!skipUpdate) {
            this._recursivePostUpdateTransform(); // this parent check is for just in case the item is a root object.
            // If it is we need to give it a temporary parent so that displayObjectUpdateTransform works correctly
            // this is mainly to avoid a parent check in the main loop. Every little helps for performance :)


            if (!this.parent) {
              this.parent = this._tempDisplayObjectParent;
              this.displayObjectUpdateTransform();
              this.parent = null;
            } else {
              this.displayObjectUpdateTransform();
            }
          } // simply apply the matrix..


          return this.worldTransform.applyInverse(position, point);
        };
        /**
         * Set the parent Container of this DisplayObject.
         *
         * @param {PIXI.Container} container - The Container to add this DisplayObject to.
         * @return {PIXI.Container} The Container that this DisplayObject was added to.
         */


        DisplayObject.prototype.setParent = function (container) {
          if (!container || !container.addChild) {
            throw new Error('setParent: Argument must be a Container');
          }

          container.addChild(this);
          return container;
        };
        /**
         * Convenience function to set the position, scale, skew and pivot at once.
         *
         * @param {number} [x=0] - The X position
         * @param {number} [y=0] - The Y position
         * @param {number} [scaleX=1] - The X scale value
         * @param {number} [scaleY=1] - The Y scale value
         * @param {number} [rotation=0] - The rotation
         * @param {number} [skewX=0] - The X skew value
         * @param {number} [skewY=0] - The Y skew value
         * @param {number} [pivotX=0] - The X pivot value
         * @param {number} [pivotY=0] - The Y pivot value
         * @return {PIXI.DisplayObject} The DisplayObject instance
         */


        DisplayObject.prototype.setTransform = function (x, y, scaleX, scaleY, rotation, skewX, skewY, pivotX, pivotY) {
          if (x === void 0) {
            x = 0;
          }

          if (y === void 0) {
            y = 0;
          }

          if (scaleX === void 0) {
            scaleX = 1;
          }

          if (scaleY === void 0) {
            scaleY = 1;
          }

          if (rotation === void 0) {
            rotation = 0;
          }

          if (skewX === void 0) {
            skewX = 0;
          }

          if (skewY === void 0) {
            skewY = 0;
          }

          if (pivotX === void 0) {
            pivotX = 0;
          }

          if (pivotY === void 0) {
            pivotY = 0;
          }

          this.position.x = x;
          this.position.y = y;
          this.scale.x = !scaleX ? 1 : scaleX;
          this.scale.y = !scaleY ? 1 : scaleY;
          this.rotation = rotation;
          this.skew.x = skewX;
          this.skew.y = skewY;
          this.pivot.x = pivotX;
          this.pivot.y = pivotY;
          return this;
        };
        /**
         * Base destroy method for generic display objects. This will automatically
         * remove the display object from its parent Container as well as remove
         * all current event listeners and internal references. Do not use a DisplayObject
         * after calling `destroy()`.
         *
         */


        DisplayObject.prototype.destroy = function (_options) {
          if (this.parent) {
            this.parent.removeChild(this);
          }

          this.emit('destroyed');
          this.removeAllListeners();
          this.transform = null;
          this.parent = null;
          this._bounds = null;
          this.mask = null;
          this.filters = null;
          this.filterArea = null;
          this.hitArea = null;
          this.interactive = false;
          this.interactiveChildren = false;
          this._destroyed = true;
        };

        Object.defineProperty(DisplayObject.prototype, "_tempDisplayObjectParent", {
          /**
           * @protected
           * @member {PIXI.Container}
           */
          get: function get() {
            if (this.tempDisplayObjectParent === null) {
              // eslint-disable-next-line @typescript-eslint/no-use-before-define
              this.tempDisplayObjectParent = new _TemporaryDisplayObject();
            }

            return this.tempDisplayObjectParent;
          },
          enumerable: false,
          configurable: true
        });
        /**
         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root
         *
         * ```
         * const cacheParent = elem.enableTempParent();
         * elem.updateTransform();
         * elem.disableTempParent(cacheParent);
         * ```
         *
         * @returns {PIXI.Container} current parent
         */

        DisplayObject.prototype.enableTempParent = function () {
          var myParent = this.parent;
          this.parent = this._tempDisplayObjectParent;
          return myParent;
        };
        /**
         * Pair method for `enableTempParent`
         *
         * @param {PIXI.Container} cacheParent - Actual parent of element
         */


        DisplayObject.prototype.disableTempParent = function (cacheParent) {
          this.parent = cacheParent;
        };

        Object.defineProperty(DisplayObject.prototype, "x", {
          /**
           * The position of the displayObject on the x axis relative to the local coordinates of the parent.
           * An alias to position.x
           *
           * @member {number}
           */
          get: function get() {
            return this.position.x;
          },
          set: function set(value) {
            this.transform.position.x = value;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(DisplayObject.prototype, "y", {
          /**
           * The position of the displayObject on the y axis relative to the local coordinates of the parent.
           * An alias to position.y
           *
           * @member {number}
           */
          get: function get() {
            return this.position.y;
          },
          set: function set(value) {
            this.transform.position.y = value;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(DisplayObject.prototype, "worldTransform", {
          /**
           * Current transform of the object based on world (parent) factors.
           *
           * @member {PIXI.Matrix}
           * @readonly
           */
          get: function get() {
            return this.transform.worldTransform;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(DisplayObject.prototype, "localTransform", {
          /**
           * Current transform of the object based on local factors: position, scale, other stuff.
           *
           * @member {PIXI.Matrix}
           * @readonly
           */
          get: function get() {
            return this.transform.localTransform;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(DisplayObject.prototype, "position", {
          /**
           * The coordinate of the object relative to the local coordinates of the parent.
           *
           * @since PixiJS 4
           * @member {PIXI.ObservablePoint}
           */
          get: function get() {
            return this.transform.position;
          },
          set: function set(value) {
            this.transform.position.copyFrom(value);
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(DisplayObject.prototype, "scale", {
          /**
           * The scale factors of this object along the local coordinate axes.
           *
           * The default scale is (1, 1).
           *
           * @since PixiJS 4
           * @member {PIXI.ObservablePoint}
           */
          get: function get() {
            return this.transform.scale;
          },
          set: function set(value) {
            this.transform.scale.copyFrom(value);
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(DisplayObject.prototype, "pivot", {
          /**
           * The center of rotation, scaling, and skewing for this display object in its local space. The `position`
           * is the projection of `pivot` in the parent's local space.
           *
           * By default, the pivot is the origin (0, 0).
           *
           * @since PixiJS 4
           * @member {PIXI.ObservablePoint}
           */
          get: function get() {
            return this.transform.pivot;
          },
          set: function set(value) {
            this.transform.pivot.copyFrom(value);
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(DisplayObject.prototype, "skew", {
          /**
           * The skew factor for the object in radians.
           *
           * @since PixiJS 4
           * @member {PIXI.ObservablePoint}
           */
          get: function get() {
            return this.transform.skew;
          },
          set: function set(value) {
            this.transform.skew.copyFrom(value);
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(DisplayObject.prototype, "rotation", {
          /**
           * The rotation of the object in radians.
           * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
           *
           * @member {number}
           */
          get: function get() {
            return this.transform.rotation;
          },
          set: function set(value) {
            this.transform.rotation = value;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(DisplayObject.prototype, "angle", {
          /**
           * The angle of the object in degrees.
           * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
           *
           * @member {number}
           */
          get: function get() {
            return this.transform.rotation * _pixi_math__WEBPACK_IMPORTED_MODULE_1__.RAD_TO_DEG;
          },
          set: function set(value) {
            this.transform.rotation = value * _pixi_math__WEBPACK_IMPORTED_MODULE_1__.DEG_TO_RAD;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(DisplayObject.prototype, "zIndex", {
          /**
           * The zIndex of the displayObject.
           *
           * If a container has the sortableChildren property set to true, children will be automatically
           * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,
           * and thus rendered on top of other display objects within the same container.
           *
           * @member {number}
           * @see PIXI.Container#sortableChildren
           */
          get: function get() {
            return this._zIndex;
          },
          set: function set(value) {
            this._zIndex = value;

            if (this.parent) {
              this.parent.sortDirty = true;
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(DisplayObject.prototype, "worldVisible", {
          /**
           * Indicates if the object is globally visible.
           *
           * @member {boolean}
           * @readonly
           */
          get: function get() {
            var item = this;

            do {
              if (!item.visible) {
                return false;
              }

              item = item.parent;
            } while (item);

            return true;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(DisplayObject.prototype, "mask", {
          /**
           * Sets a mask for the displayObject. A mask is an object that limits the visibility of an
           * object to the shape of the mask applied to it. In PixiJS a regular mask must be a
           * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it
           * utilities shape clipping. To remove a mask, set this property to `null`.
           *
           * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.
           *
           * @example
           * const graphics = new PIXI.Graphics();
           * graphics.beginFill(0xFF3300);
           * graphics.drawRect(50, 250, 100, 100);
           * graphics.endFill();
           *
           * const sprite = new PIXI.Sprite(texture);
           * sprite.mask = graphics;
           *
           * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.
           * @member {PIXI.Container|PIXI.MaskData|null}
           */
          get: function get() {
            return this._mask;
          },
          set: function set(value) {
            if (this._mask === value) {
              return;
            }

            if (this._mask) {
              var maskObject = this._mask.maskObject || this._mask;
              maskObject._maskRefCount--;

              if (maskObject._maskRefCount === 0) {
                maskObject.renderable = true;
                maskObject.isMask = false;
              }
            }

            this._mask = value;

            if (this._mask) {
              var maskObject = this._mask.maskObject || this._mask;

              if (maskObject._maskRefCount === 0) {
                maskObject.renderable = false;
                maskObject.isMask = true;
              }

              maskObject._maskRefCount++;
            }
          },
          enumerable: false,
          configurable: true
        });
        return DisplayObject;
      }(_pixi_utils__WEBPACK_IMPORTED_MODULE_2__.EventEmitter);
      /**
       * @private
       */


      var _TemporaryDisplayObject =
      /** @class */
      function (_super) {
        __extends(TemporaryDisplayObject, _super);

        function TemporaryDisplayObject() {
          var _this = _super !== null && _super.apply(this, arguments) || this;

          _this.sortDirty = null;
          return _this;
        }

        return TemporaryDisplayObject;
      }(_DisplayObject);
      /**
       * DisplayObject default updateTransform, does not update children of container.
       * Will crash if there's no parent element.
       *
       * @memberof PIXI.DisplayObject#
       * @method displayObjectUpdateTransform
       */


      _DisplayObject.prototype.displayObjectUpdateTransform = _DisplayObject.prototype.updateTransform;
      /*!
       * @pixi/constants - v6.2.0
       * Compiled Mon, 01 Nov 2021 16:52:10 UTC
       *
       * @pixi/constants is licensed under the MIT License.
       * http://www.opensource.org/licenses/mit-license
       */

      /**
       * Different types of environments for WebGL.
       *
       * @static
       * @memberof PIXI
       * @name ENV
       * @enum {number}
       * @property {number} WEBGL_LEGACY - Used for older v1 WebGL devices. PixiJS will aim to ensure compatibility
       *  with older / less advanced devices. If you experience unexplained flickering prefer this environment.
       * @property {number} WEBGL - Version 1 of WebGL
       * @property {number} WEBGL2 - Version 2 of WebGL
       */

      var ENV;

      (function (ENV) {
        ENV[ENV["WEBGL_LEGACY"] = 0] = "WEBGL_LEGACY";
        ENV[ENV["WEBGL"] = 1] = "WEBGL";
        ENV[ENV["WEBGL2"] = 2] = "WEBGL2";
      })(ENV || (ENV = {}));
      /**
       * Constant to identify the Renderer Type.
       *
       * @static
       * @memberof PIXI
       * @name RENDERER_TYPE
       * @enum {number}
       * @property {number} UNKNOWN - Unknown render type.
       * @property {number} WEBGL - WebGL render type.
       * @property {number} CANVAS - Canvas render type.
       */


      var RENDERER_TYPE;

      (function (RENDERER_TYPE) {
        RENDERER_TYPE[RENDERER_TYPE["UNKNOWN"] = 0] = "UNKNOWN";
        RENDERER_TYPE[RENDERER_TYPE["WEBGL"] = 1] = "WEBGL";
        RENDERER_TYPE[RENDERER_TYPE["CANVAS"] = 2] = "CANVAS";
      })(RENDERER_TYPE || (RENDERER_TYPE = {}));
      /**
       * Bitwise OR of masks that indicate the buffers to be cleared.
       *
       * @static
       * @memberof PIXI
       * @name BUFFER_BITS
       * @enum {number}
       * @property {number} COLOR - Indicates the buffers currently enabled for color writing.
       * @property {number} DEPTH - Indicates the depth buffer.
       * @property {number} STENCIL - Indicates the stencil buffer.
       */


      var BUFFER_BITS;

      (function (BUFFER_BITS) {
        BUFFER_BITS[BUFFER_BITS["COLOR"] = 16384] = "COLOR";
        BUFFER_BITS[BUFFER_BITS["DEPTH"] = 256] = "DEPTH";
        BUFFER_BITS[BUFFER_BITS["STENCIL"] = 1024] = "STENCIL";
      })(BUFFER_BITS || (BUFFER_BITS = {}));
      /**
       * Various blend modes supported by PIXI.
       *
       * IMPORTANT - The WebGL renderer only supports the NORMAL, ADD, MULTIPLY and SCREEN blend modes.
       * Anything else will silently act like NORMAL.
       *
       * @memberof PIXI
       * @name BLEND_MODES
       * @enum {number}
       * @property {number} NORMAL
       * @property {number} ADD
       * @property {number} MULTIPLY
       * @property {number} SCREEN
       * @property {number} OVERLAY
       * @property {number} DARKEN
       * @property {number} LIGHTEN
       * @property {number} COLOR_DODGE
       * @property {number} COLOR_BURN
       * @property {number} HARD_LIGHT
       * @property {number} SOFT_LIGHT
       * @property {number} DIFFERENCE
       * @property {number} EXCLUSION
       * @property {number} HUE
       * @property {number} SATURATION
       * @property {number} COLOR
       * @property {number} LUMINOSITY
       * @property {number} NORMAL_NPM
       * @property {number} ADD_NPM
       * @property {number} SCREEN_NPM
       * @property {number} NONE
       * @property {number} SRC_IN
       * @property {number} SRC_OUT
       * @property {number} SRC_ATOP
       * @property {number} DST_OVER
       * @property {number} DST_IN
       * @property {number} DST_OUT
       * @property {number} DST_ATOP
       * @property {number} SUBTRACT
       * @property {number} SRC_OVER
       * @property {number} ERASE
       * @property {number} XOR
       */


      var BLEND_MODES;

      (function (BLEND_MODES) {
        BLEND_MODES[BLEND_MODES["NORMAL"] = 0] = "NORMAL";
        BLEND_MODES[BLEND_MODES["ADD"] = 1] = "ADD";
        BLEND_MODES[BLEND_MODES["MULTIPLY"] = 2] = "MULTIPLY";
        BLEND_MODES[BLEND_MODES["SCREEN"] = 3] = "SCREEN";
        BLEND_MODES[BLEND_MODES["OVERLAY"] = 4] = "OVERLAY";
        BLEND_MODES[BLEND_MODES["DARKEN"] = 5] = "DARKEN";
        BLEND_MODES[BLEND_MODES["LIGHTEN"] = 6] = "LIGHTEN";
        BLEND_MODES[BLEND_MODES["COLOR_DODGE"] = 7] = "COLOR_DODGE";
        BLEND_MODES[BLEND_MODES["COLOR_BURN"] = 8] = "COLOR_BURN";
        BLEND_MODES[BLEND_MODES["HARD_LIGHT"] = 9] = "HARD_LIGHT";
        BLEND_MODES[BLEND_MODES["SOFT_LIGHT"] = 10] = "SOFT_LIGHT";
        BLEND_MODES[BLEND_MODES["DIFFERENCE"] = 11] = "DIFFERENCE";
        BLEND_MODES[BLEND_MODES["EXCLUSION"] = 12] = "EXCLUSION";
        BLEND_MODES[BLEND_MODES["HUE"] = 13] = "HUE";
        BLEND_MODES[BLEND_MODES["SATURATION"] = 14] = "SATURATION";
        BLEND_MODES[BLEND_MODES["COLOR"] = 15] = "COLOR";
        BLEND_MODES[BLEND_MODES["LUMINOSITY"] = 16] = "LUMINOSITY";
        BLEND_MODES[BLEND_MODES["NORMAL_NPM"] = 17] = "NORMAL_NPM";
        BLEND_MODES[BLEND_MODES["ADD_NPM"] = 18] = "ADD_NPM";
        BLEND_MODES[BLEND_MODES["SCREEN_NPM"] = 19] = "SCREEN_NPM";
        BLEND_MODES[BLEND_MODES["NONE"] = 20] = "NONE";
        BLEND_MODES[BLEND_MODES["SRC_OVER"] = 0] = "SRC_OVER";
        BLEND_MODES[BLEND_MODES["SRC_IN"] = 21] = "SRC_IN";
        BLEND_MODES[BLEND_MODES["SRC_OUT"] = 22] = "SRC_OUT";
        BLEND_MODES[BLEND_MODES["SRC_ATOP"] = 23] = "SRC_ATOP";
        BLEND_MODES[BLEND_MODES["DST_OVER"] = 24] = "DST_OVER";
        BLEND_MODES[BLEND_MODES["DST_IN"] = 25] = "DST_IN";
        BLEND_MODES[BLEND_MODES["DST_OUT"] = 26] = "DST_OUT";
        BLEND_MODES[BLEND_MODES["DST_ATOP"] = 27] = "DST_ATOP";
        BLEND_MODES[BLEND_MODES["ERASE"] = 26] = "ERASE";
        BLEND_MODES[BLEND_MODES["SUBTRACT"] = 28] = "SUBTRACT";
        BLEND_MODES[BLEND_MODES["XOR"] = 29] = "XOR";
      })(BLEND_MODES || (BLEND_MODES = {}));
      /**
       * Various webgl draw modes. These can be used to specify which GL drawMode to use
       * under certain situations and renderers.
       *
       * @memberof PIXI
       * @static
       * @name DRAW_MODES
       * @enum {number}
       * @property {number} POINTS
       * @property {number} LINES
       * @property {number} LINE_LOOP
       * @property {number} LINE_STRIP
       * @property {number} TRIANGLES
       * @property {number} TRIANGLE_STRIP
       * @property {number} TRIANGLE_FAN
       */


      var DRAW_MODES;

      (function (DRAW_MODES) {
        DRAW_MODES[DRAW_MODES["POINTS"] = 0] = "POINTS";
        DRAW_MODES[DRAW_MODES["LINES"] = 1] = "LINES";
        DRAW_MODES[DRAW_MODES["LINE_LOOP"] = 2] = "LINE_LOOP";
        DRAW_MODES[DRAW_MODES["LINE_STRIP"] = 3] = "LINE_STRIP";
        DRAW_MODES[DRAW_MODES["TRIANGLES"] = 4] = "TRIANGLES";
        DRAW_MODES[DRAW_MODES["TRIANGLE_STRIP"] = 5] = "TRIANGLE_STRIP";
        DRAW_MODES[DRAW_MODES["TRIANGLE_FAN"] = 6] = "TRIANGLE_FAN";
      })(DRAW_MODES || (DRAW_MODES = {}));
      /**
       * Various GL texture/resources formats.
       *
       * @memberof PIXI
       * @static
       * @name FORMATS
       * @enum {number}
       * @property {number} RGBA=6408
       * @property {number} RGB=6407
       * @property {number} RG=33319
       * @property {number} RED=6403
       * @property {number} RGBA_INTEGER=36249
       * @property {number} RGB_INTEGER=36248
       * @property {number} RG_INTEGER=33320
       * @property {number} RED_INTEGER=36244
       * @property {number} ALPHA=6406
       * @property {number} LUMINANCE=6409
       * @property {number} LUMINANCE_ALPHA=6410
       * @property {number} DEPTH_COMPONENT=6402
       * @property {number} DEPTH_STENCIL=34041
       */


      var FORMATS;

      (function (FORMATS) {
        FORMATS[FORMATS["RGBA"] = 6408] = "RGBA";
        FORMATS[FORMATS["RGB"] = 6407] = "RGB";
        FORMATS[FORMATS["RG"] = 33319] = "RG";
        FORMATS[FORMATS["RED"] = 6403] = "RED";
        FORMATS[FORMATS["RGBA_INTEGER"] = 36249] = "RGBA_INTEGER";
        FORMATS[FORMATS["RGB_INTEGER"] = 36248] = "RGB_INTEGER";
        FORMATS[FORMATS["RG_INTEGER"] = 33320] = "RG_INTEGER";
        FORMATS[FORMATS["RED_INTEGER"] = 36244] = "RED_INTEGER";
        FORMATS[FORMATS["ALPHA"] = 6406] = "ALPHA";
        FORMATS[FORMATS["LUMINANCE"] = 6409] = "LUMINANCE";
        FORMATS[FORMATS["LUMINANCE_ALPHA"] = 6410] = "LUMINANCE_ALPHA";
        FORMATS[FORMATS["DEPTH_COMPONENT"] = 6402] = "DEPTH_COMPONENT";
        FORMATS[FORMATS["DEPTH_STENCIL"] = 34041] = "DEPTH_STENCIL";
      })(FORMATS || (FORMATS = {}));
      /**
       * Various GL target types.
       *
       * @memberof PIXI
       * @static
       * @name TARGETS
       * @enum {number}
       * @property {number} TEXTURE_2D=3553
       * @property {number} TEXTURE_CUBE_MAP=34067
       * @property {number} TEXTURE_2D_ARRAY=35866
       * @property {number} TEXTURE_CUBE_MAP_POSITIVE_X=34069
       * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_X=34070
       * @property {number} TEXTURE_CUBE_MAP_POSITIVE_Y=34071
       * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_Y=34072
       * @property {number} TEXTURE_CUBE_MAP_POSITIVE_Z=34073
       * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_Z=34074
       */


      var TARGETS;

      (function (TARGETS) {
        TARGETS[TARGETS["TEXTURE_2D"] = 3553] = "TEXTURE_2D";
        TARGETS[TARGETS["TEXTURE_CUBE_MAP"] = 34067] = "TEXTURE_CUBE_MAP";
        TARGETS[TARGETS["TEXTURE_2D_ARRAY"] = 35866] = "TEXTURE_2D_ARRAY";
        TARGETS[TARGETS["TEXTURE_CUBE_MAP_POSITIVE_X"] = 34069] = "TEXTURE_CUBE_MAP_POSITIVE_X";
        TARGETS[TARGETS["TEXTURE_CUBE_MAP_NEGATIVE_X"] = 34070] = "TEXTURE_CUBE_MAP_NEGATIVE_X";
        TARGETS[TARGETS["TEXTURE_CUBE_MAP_POSITIVE_Y"] = 34071] = "TEXTURE_CUBE_MAP_POSITIVE_Y";
        TARGETS[TARGETS["TEXTURE_CUBE_MAP_NEGATIVE_Y"] = 34072] = "TEXTURE_CUBE_MAP_NEGATIVE_Y";
        TARGETS[TARGETS["TEXTURE_CUBE_MAP_POSITIVE_Z"] = 34073] = "TEXTURE_CUBE_MAP_POSITIVE_Z";
        TARGETS[TARGETS["TEXTURE_CUBE_MAP_NEGATIVE_Z"] = 34074] = "TEXTURE_CUBE_MAP_NEGATIVE_Z";
      })(TARGETS || (TARGETS = {}));
      /**
       * Various GL data format types.
       *
       * @memberof PIXI
       * @static
       * @name TYPES
       * @enum {number}
       * @property {number} UNSIGNED_BYTE=5121
       * @property {number} UNSIGNED_SHORT=5123
       * @property {number} UNSIGNED_SHORT_5_6_5=33635
       * @property {number} UNSIGNED_SHORT_4_4_4_4=32819
       * @property {number} UNSIGNED_SHORT_5_5_5_1=32820
       * @property {number} UNSIGNED_INT=5125
       * @property {number} UNSIGNED_INT_10F_11F_11F_REV=35899
       * @property {number} UNSIGNED_INT_2_10_10_10_REV=33640
       * @property {number} UNSIGNED_INT_24_8=34042
       * @property {number} UNSIGNED_INT_5_9_9_9_REV=35902
       * @property {number} BYTE=5120
       * @property {number} SHORT=5122
       * @property {number} INT=5124
       * @property {number} FLOAT=5126
       * @property {number} FLOAT_32_UNSIGNED_INT_24_8_REV=36269
       * @property {number} HALF_FLOAT=36193
       */


      var TYPES;

      (function (TYPES) {
        TYPES[TYPES["UNSIGNED_BYTE"] = 5121] = "UNSIGNED_BYTE";
        TYPES[TYPES["UNSIGNED_SHORT"] = 5123] = "UNSIGNED_SHORT";
        TYPES[TYPES["UNSIGNED_SHORT_5_6_5"] = 33635] = "UNSIGNED_SHORT_5_6_5";
        TYPES[TYPES["UNSIGNED_SHORT_4_4_4_4"] = 32819] = "UNSIGNED_SHORT_4_4_4_4";
        TYPES[TYPES["UNSIGNED_SHORT_5_5_5_1"] = 32820] = "UNSIGNED_SHORT_5_5_5_1";
        TYPES[TYPES["UNSIGNED_INT"] = 5125] = "UNSIGNED_INT";
        TYPES[TYPES["UNSIGNED_INT_10F_11F_11F_REV"] = 35899] = "UNSIGNED_INT_10F_11F_11F_REV";
        TYPES[TYPES["UNSIGNED_INT_2_10_10_10_REV"] = 33640] = "UNSIGNED_INT_2_10_10_10_REV";
        TYPES[TYPES["UNSIGNED_INT_24_8"] = 34042] = "UNSIGNED_INT_24_8";
        TYPES[TYPES["UNSIGNED_INT_5_9_9_9_REV"] = 35902] = "UNSIGNED_INT_5_9_9_9_REV";
        TYPES[TYPES["BYTE"] = 5120] = "BYTE";
        TYPES[TYPES["SHORT"] = 5122] = "SHORT";
        TYPES[TYPES["INT"] = 5124] = "INT";
        TYPES[TYPES["FLOAT"] = 5126] = "FLOAT";
        TYPES[TYPES["FLOAT_32_UNSIGNED_INT_24_8_REV"] = 36269] = "FLOAT_32_UNSIGNED_INT_24_8_REV";
        TYPES[TYPES["HALF_FLOAT"] = 36193] = "HALF_FLOAT";
      })(TYPES || (TYPES = {}));
      /**
       * Various sampler types. Correspond to `sampler`, `isampler`, `usampler` GLSL types respectively.
       * WebGL1 works only with FLOAT.
       *
       * @memberof PIXI
       * @static
       * @name SAMPLER_TYPES
       * @enum {number}
       * @property {number} FLOAT=0
       * @property {number} INT=1
       * @property {number} UINT=2
       */


      var SAMPLER_TYPES;

      (function (SAMPLER_TYPES) {
        SAMPLER_TYPES[SAMPLER_TYPES["FLOAT"] = 0] = "FLOAT";
        SAMPLER_TYPES[SAMPLER_TYPES["INT"] = 1] = "INT";
        SAMPLER_TYPES[SAMPLER_TYPES["UINT"] = 2] = "UINT";
      })(SAMPLER_TYPES || (SAMPLER_TYPES = {}));
      /**
       * The scale modes that are supported by pixi.
       *
       * The {@link PIXI.settings.SCALE_MODE} scale mode affects the default scaling mode of future operations.
       * It can be re-assigned to either LINEAR or NEAREST, depending upon suitability.
       *
       * @memberof PIXI
       * @static
       * @name SCALE_MODES
       * @enum {number}
       * @property {number} LINEAR Smooth scaling
       * @property {number} NEAREST Pixelating scaling
       */


      var SCALE_MODES;

      (function (SCALE_MODES) {
        SCALE_MODES[SCALE_MODES["NEAREST"] = 0] = "NEAREST";
        SCALE_MODES[SCALE_MODES["LINEAR"] = 1] = "LINEAR";
      })(SCALE_MODES || (SCALE_MODES = {}));
      /**
       * The wrap modes that are supported by pixi.
       *
       * The {@link PIXI.settings.WRAP_MODE} wrap mode affects the default wrapping mode of future operations.
       * It can be re-assigned to either CLAMP or REPEAT, depending upon suitability.
       * If the texture is non power of two then clamp will be used regardless as WebGL can
       * only use REPEAT if the texture is po2.
       *
       * This property only affects WebGL.
       *
       * @name WRAP_MODES
       * @memberof PIXI
       * @static
       * @enum {number}
       * @property {number} CLAMP - The textures uvs are clamped
       * @property {number} REPEAT - The texture uvs tile and repeat
       * @property {number} MIRRORED_REPEAT - The texture uvs tile and repeat with mirroring
       */


      var WRAP_MODES;

      (function (WRAP_MODES) {
        WRAP_MODES[WRAP_MODES["CLAMP"] = 33071] = "CLAMP";
        WRAP_MODES[WRAP_MODES["REPEAT"] = 10497] = "REPEAT";
        WRAP_MODES[WRAP_MODES["MIRRORED_REPEAT"] = 33648] = "MIRRORED_REPEAT";
      })(WRAP_MODES || (WRAP_MODES = {}));
      /**
       * Mipmap filtering modes that are supported by pixi.
       *
       * The {@link PIXI.settings.MIPMAP_TEXTURES} affects default texture filtering.
       * Mipmaps are generated for a baseTexture if its `mipmap` field is `ON`,
       * or its `POW2` and texture dimensions are powers of 2.
       * Due to platform restriction, `ON` option will work like `POW2` for webgl-1.
       *
       * This property only affects WebGL.
       *
       * @name MIPMAP_MODES
       * @memberof PIXI
       * @static
       * @enum {number}
       * @property {number} OFF - No mipmaps
       * @property {number} POW2 - Generate mipmaps if texture dimensions are pow2
       * @property {number} ON - Always generate mipmaps
       * @property {number} ON_MANUAL - Use mipmaps, but do not auto-generate them; this is used with a resource
       *   that supports buffering each level-of-detail.
       */


      var MIPMAP_MODES;

      (function (MIPMAP_MODES) {
        MIPMAP_MODES[MIPMAP_MODES["OFF"] = 0] = "OFF";
        MIPMAP_MODES[MIPMAP_MODES["POW2"] = 1] = "POW2";
        MIPMAP_MODES[MIPMAP_MODES["ON"] = 2] = "ON";
        MIPMAP_MODES[MIPMAP_MODES["ON_MANUAL"] = 3] = "ON_MANUAL";
      })(MIPMAP_MODES || (MIPMAP_MODES = {}));
      /**
       * How to treat textures with premultiplied alpha
       *
       * @name ALPHA_MODES
       * @memberof PIXI
       * @static
       * @enum {number}
       * @property {number} NO_PREMULTIPLIED_ALPHA - Source is not premultiplied, leave it like that.
       *  Option for compressed and data textures that are created from typed arrays.
       * @property {number} PREMULTIPLY_ON_UPLOAD - Source is not premultiplied, premultiply on upload.
       *  Default option, used for all loaded images.
       * @property {number} PREMULTIPLIED_ALPHA - Source is already premultiplied
       *  Example: spine atlases with `_pma` suffix.
       * @property {number} NPM - Alias for NO_PREMULTIPLIED_ALPHA.
       * @property {number} UNPACK - Default option, alias for PREMULTIPLY_ON_UPLOAD.
       * @property {number} PMA - Alias for PREMULTIPLIED_ALPHA.
       */


      var ALPHA_MODES;

      (function (ALPHA_MODES) {
        ALPHA_MODES[ALPHA_MODES["NPM"] = 0] = "NPM";
        ALPHA_MODES[ALPHA_MODES["UNPACK"] = 1] = "UNPACK";
        ALPHA_MODES[ALPHA_MODES["PMA"] = 2] = "PMA";
        ALPHA_MODES[ALPHA_MODES["NO_PREMULTIPLIED_ALPHA"] = 0] = "NO_PREMULTIPLIED_ALPHA";
        ALPHA_MODES[ALPHA_MODES["PREMULTIPLY_ON_UPLOAD"] = 1] = "PREMULTIPLY_ON_UPLOAD";
        ALPHA_MODES[ALPHA_MODES["PREMULTIPLY_ALPHA"] = 2] = "PREMULTIPLY_ALPHA";
        ALPHA_MODES[ALPHA_MODES["PREMULTIPLIED_ALPHA"] = 2] = "PREMULTIPLIED_ALPHA";
      })(ALPHA_MODES || (ALPHA_MODES = {}));
      /**
       * Configure whether filter textures are cleared after binding.
       *
       * Filter textures need not be cleared if the filter does not use pixel blending. {@link CLEAR_MODES.BLIT} will detect
       * this and skip clearing as an optimization.
       *
       * @name CLEAR_MODES
       * @memberof PIXI
       * @static
       * @enum {number}
       * @property {number} BLEND - Do not clear the filter texture. The filter's output will blend on top of the output texture.
       * @property {number} CLEAR - Always clear the filter texture.
       * @property {number} BLIT - Clear only if {@link FilterSystem.forceClear} is set or if the filter uses pixel blending.
       * @property {number} NO - Alias for BLEND, same as `false` in earlier versions
       * @property {number} YES - Alias for CLEAR, same as `true` in earlier versions
       * @property {number} AUTO - Alias for BLIT
       */


      var CLEAR_MODES;

      (function (CLEAR_MODES) {
        CLEAR_MODES[CLEAR_MODES["NO"] = 0] = "NO";
        CLEAR_MODES[CLEAR_MODES["YES"] = 1] = "YES";
        CLEAR_MODES[CLEAR_MODES["AUTO"] = 2] = "AUTO";
        CLEAR_MODES[CLEAR_MODES["BLEND"] = 0] = "BLEND";
        CLEAR_MODES[CLEAR_MODES["CLEAR"] = 1] = "CLEAR";
        CLEAR_MODES[CLEAR_MODES["BLIT"] = 2] = "BLIT";
      })(CLEAR_MODES || (CLEAR_MODES = {}));
      /**
       * The gc modes that are supported by pixi.
       *
       * The {@link PIXI.settings.GC_MODE} Garbage Collection mode for PixiJS textures is AUTO
       * If set to GC_MODE, the renderer will occasionally check textures usage. If they are not
       * used for a specified period of time they will be removed from the GPU. They will of course
       * be uploaded again when they are required. This is a silent behind the scenes process that
       * should ensure that the GPU does not  get filled up.
       *
       * Handy for mobile devices!
       * This property only affects WebGL.
       *
       * @name GC_MODES
       * @enum {number}
       * @static
       * @memberof PIXI
       * @property {number} AUTO - Garbage collection will happen periodically automatically
       * @property {number} MANUAL - Garbage collection will need to be called manually
       */


      var GC_MODES;

      (function (GC_MODES) {
        GC_MODES[GC_MODES["AUTO"] = 0] = "AUTO";
        GC_MODES[GC_MODES["MANUAL"] = 1] = "MANUAL";
      })(GC_MODES || (GC_MODES = {}));
      /**
       * Constants that specify float precision in shaders.
       *
       * @name PRECISION
       * @memberof PIXI
       * @constant
       * @static
       * @enum {string}
       * @property {string} LOW='lowp'
       * @property {string} MEDIUM='mediump'
       * @property {string} HIGH='highp'
       */


      var PRECISION;

      (function (PRECISION) {
        PRECISION["LOW"] = "lowp";
        PRECISION["MEDIUM"] = "mediump";
        PRECISION["HIGH"] = "highp";
      })(PRECISION || (PRECISION = {}));
      /**
       * Constants for mask implementations.
       * We use `type` suffix because it leads to very different behaviours
       *
       * @name MASK_TYPES
       * @memberof PIXI
       * @static
       * @enum {number}
       * @property {number} NONE - Mask is ignored
       * @property {number} SCISSOR - Scissor mask, rectangle on screen, cheap
       * @property {number} STENCIL - Stencil mask, 1-bit, medium, works only if renderer supports stencil
       * @property {number} SPRITE - Mask that uses SpriteMaskFilter, uses temporary RenderTexture
       */


      var MASK_TYPES;

      (function (MASK_TYPES) {
        MASK_TYPES[MASK_TYPES["NONE"] = 0] = "NONE";
        MASK_TYPES[MASK_TYPES["SCISSOR"] = 1] = "SCISSOR";
        MASK_TYPES[MASK_TYPES["STENCIL"] = 2] = "STENCIL";
        MASK_TYPES[MASK_TYPES["SPRITE"] = 3] = "SPRITE";
      })(MASK_TYPES || (MASK_TYPES = {}));
      /**
       * Constants for multi-sampling antialiasing.
       *
       * @see PIXI.Framebuffer#multisample
       *
       * @name MSAA_QUALITY
       * @memberof PIXI
       * @static
       * @enum {number}
       * @property {number} NONE - No multisampling for this renderTexture
       * @property {number} LOW - Try 2 samples
       * @property {number} MEDIUM - Try 4 samples
       * @property {number} HIGH - Try 8 samples
       */


      var MSAA_QUALITY;

      (function (MSAA_QUALITY) {
        MSAA_QUALITY[MSAA_QUALITY["NONE"] = 0] = "NONE";
        MSAA_QUALITY[MSAA_QUALITY["LOW"] = 2] = "LOW";
        MSAA_QUALITY[MSAA_QUALITY["MEDIUM"] = 4] = "MEDIUM";
        MSAA_QUALITY[MSAA_QUALITY["HIGH"] = 8] = "HIGH";
      })(MSAA_QUALITY || (MSAA_QUALITY = {}));
      /**
       * Constants for various buffer types in Pixi
       *
       * @see PIXI.BUFFER_TYPE
       *
       * @name BUFFER_TYPE
       * @memberof PIXI
       * @static
       * @enum {number}
       * @property {number} ELEMENT_ARRAY_BUFFER - buffer type for using as an index buffer
       * @property {number} ARRAY_BUFFER - buffer type for using attribute data
       * @property {number} UNIFORM_BUFFER - the buffer type is for uniform buffer objects
       */


      var BUFFER_TYPE;

      (function (BUFFER_TYPE) {
        BUFFER_TYPE[BUFFER_TYPE["ELEMENT_ARRAY_BUFFER"] = 34963] = "ELEMENT_ARRAY_BUFFER";
        BUFFER_TYPE[BUFFER_TYPE["ARRAY_BUFFER"] = 34962] = "ARRAY_BUFFER"; // NOT YET SUPPORTED

        BUFFER_TYPE[BUFFER_TYPE["UNIFORM_BUFFER"] = 35345] = "UNIFORM_BUFFER";
      })(BUFFER_TYPE || (BUFFER_TYPE = {}));

      function sortChildren(a, b) {
        if (a.zIndex === b.zIndex) {
          return a._lastSortedIndex - b._lastSortedIndex;
        }

        return a.zIndex - b.zIndex;
      }
      /**
       * Container is a general-purpose display object that holds children. It also adds built-in support for advanced
       * rendering features like masking and filtering.
       *
       * It is the base class of all display objects that act as a container for other objects, including Graphics
       * and Sprite.
       *
       * ```js
       * import { BlurFilter } from '@pixi/filter-blur';
       * import { Container } from '@pixi/display';
       * import { Graphics } from '@pixi/graphics';
       * import { Sprite } from '@pixi/sprite';
       *
       * let container = new Container();
       * let sprite = Sprite.from("https://s3-us-west-2.amazonaws.com/s.cdpn.io/693612/IaUrttj.png");
       *
       * sprite.width = 512;
       * sprite.height = 512;
       *
       * // Adds a sprite as a child to this container. As a result, the sprite will be rendered whenever the container
       * // is rendered.
       * container.addChild(sprite);
       *
       * // Blurs whatever is rendered by the container
       * container.filters = [new BlurFilter()];
       *
       * // Only the contents within a circle at the center should be rendered onto the screen.
       * container.mask = new Graphics()
       *  .beginFill(0xffffff)
       *  .drawCircle(sprite.width / 2, sprite.height / 2, Math.min(sprite.width, sprite.height) / 2)
       *  .endFill();
       * ```
       *
       * @class
       * @extends PIXI.DisplayObject
       * @memberof PIXI
       */


      var _Container =
      /** @class */
      function (_super) {
        __extends(Container, _super);

        function Container() {
          var _this = _super.call(this) || this;
          /**
           * The array of children of this container.
           *
           * @member {PIXI.DisplayObject[]}
           * @readonly
           */


          _this.children = [];
          /**
           * If set to true, the container will sort its children by zIndex value
           * when updateTransform() is called, or manually if sortChildren() is called.
           *
           * This actually changes the order of elements in the array, so should be treated
           * as a basic solution that is not performant compared to other solutions,
           * such as @link https://github.com/pixijs/pixi-display
           *
           * Also be aware of that this may not work nicely with the addChildAt() function,
           * as the zIndex sorting may cause the child to automatically sorted to another position.
           *
           * @see PIXI.settings.SORTABLE_CHILDREN
           *
           * @member {boolean}
           */

          _this.sortableChildren = _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.SORTABLE_CHILDREN;
          /**
           * Should children be sorted by zIndex at the next updateTransform call.
           *
           * Will get automatically set to true if a new child is added, or if a child's zIndex changes.
           *
           * @member {boolean}
           */

          _this.sortDirty = false;
          return _this;
          /**
           * Fired when a DisplayObject is added to this Container.
           *
           * @event PIXI.Container#childAdded
           * @param {PIXI.DisplayObject} child - The child added to the Container.
           * @param {PIXI.Container} container - The container that added the child.
           * @param {number} index - The children's index of the added child.
           */

          /**
           * Fired when a DisplayObject is removed from this Container.
           *
           * @event PIXI.DisplayObject#removedFrom
           * @param {PIXI.DisplayObject} child - The child removed from the Container.
           * @param {PIXI.Container} container - The container that removed removed the child.
           * @param {number} index - The former children's index of the removed child
           */
        }
        /**
         * Overridable method that can be used by Container subclasses whenever the children array is modified
         *
         * @protected
         */


        Container.prototype.onChildrenChange = function (_length) {
          /* empty */
        };
        /**
         * Adds one or more children to the container.
         *
         * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`
         *
         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container
         * @return {PIXI.DisplayObject} The first child that was added.
         */


        Container.prototype.addChild = function () {
          var arguments$1 = arguments;
          var children = [];

          for (var _i = 0; _i < arguments.length; _i++) {
            children[_i] = arguments$1[_i];
          } // if there is only one argument we can bypass looping through the them


          if (children.length > 1) {
            // loop through the array and add all children
            for (var i = 0; i < children.length; i++) {
              // eslint-disable-next-line prefer-rest-params
              this.addChild(children[i]);
            }
          } else {
            var child = children[0]; // if the child has a parent then lets remove it as PixiJS objects can only exist in one place

            if (child.parent) {
              child.parent.removeChild(child);
            }

            child.parent = this;
            this.sortDirty = true; // ensure child transform will be recalculated

            child.transform._parentID = -1;
            this.children.push(child); // ensure bounds will be recalculated

            this._boundsID++; // TODO - lets either do all callbacks or all events.. not both!

            this.onChildrenChange(this.children.length - 1);
            this.emit('childAdded', child, this, this.children.length - 1);
            child.emit('added', this);
          }

          return children[0];
        };
        /**
         * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown
         *
         * @param {PIXI.DisplayObject} child - The child to add
         * @param {number} index - The index to place the child in
         * @return {PIXI.DisplayObject} The child that was added.
         */


        Container.prototype.addChildAt = function (child, index) {
          if (index < 0 || index > this.children.length) {
            throw new Error(child + "addChildAt: The index " + index + " supplied is out of bounds " + this.children.length);
          }

          if (child.parent) {
            child.parent.removeChild(child);
          }

          child.parent = this;
          this.sortDirty = true; // ensure child transform will be recalculated

          child.transform._parentID = -1;
          this.children.splice(index, 0, child); // ensure bounds will be recalculated

          this._boundsID++; // TODO - lets either do all callbacks or all events.. not both!

          this.onChildrenChange(index);
          child.emit('added', this);
          this.emit('childAdded', child, this, index);
          return child;
        };
        /**
         * Swaps the position of 2 Display Objects within this container.
         *
         * @param {PIXI.DisplayObject} child - First display object to swap
         * @param {PIXI.DisplayObject} child2 - Second display object to swap
         */


        Container.prototype.swapChildren = function (child, child2) {
          if (child === child2) {
            return;
          }

          var index1 = this.getChildIndex(child);
          var index2 = this.getChildIndex(child2);
          this.children[index1] = child2;
          this.children[index2] = child;
          this.onChildrenChange(index1 < index2 ? index1 : index2);
        };
        /**
         * Returns the index position of a child DisplayObject instance
         *
         * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify
         * @return {number} The index position of the child display object to identify
         */


        Container.prototype.getChildIndex = function (child) {
          var index = this.children.indexOf(child);

          if (index === -1) {
            throw new Error('The supplied DisplayObject must be a child of the caller');
          }

          return index;
        };
        /**
         * Changes the position of an existing child in the display object container
         *
         * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number
         * @param {number} index - The resulting index number for the child display object
         */


        Container.prototype.setChildIndex = function (child, index) {
          if (index < 0 || index >= this.children.length) {
            throw new Error("The index " + index + " supplied is out of bounds " + this.children.length);
          }

          var currentIndex = this.getChildIndex(child);
          (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.removeItems)(this.children, currentIndex, 1); // remove from old position

          this.children.splice(index, 0, child); // add at new position

          this.onChildrenChange(index);
        };
        /**
         * Returns the child at the specified index
         *
         * @param {number} index - The index to get the child at
         * @return {PIXI.DisplayObject} The child at the given index, if any.
         */


        Container.prototype.getChildAt = function (index) {
          if (index < 0 || index >= this.children.length) {
            throw new Error("getChildAt: Index (" + index + ") does not exist.");
          }

          return this.children[index];
        };
        /**
         * Removes one or more children from the container.
         *
         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove
         * @return {PIXI.DisplayObject} The first child that was removed.
         */


        Container.prototype.removeChild = function () {
          var arguments$1 = arguments;
          var children = [];

          for (var _i = 0; _i < arguments.length; _i++) {
            children[_i] = arguments$1[_i];
          } // if there is only one argument we can bypass looping through the them


          if (children.length > 1) {
            // loop through the arguments property and remove all children
            for (var i = 0; i < children.length; i++) {
              this.removeChild(children[i]);
            }
          } else {
            var child = children[0];
            var index = this.children.indexOf(child);

            if (index === -1) {
              return null;
            }

            child.parent = null; // ensure child transform will be recalculated

            child.transform._parentID = -1;
            (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.removeItems)(this.children, index, 1); // ensure bounds will be recalculated

            this._boundsID++; // TODO - lets either do all callbacks or all events.. not both!

            this.onChildrenChange(index);
            child.emit('removed', this);
            this.emit('childRemoved', child, this, index);
          }

          return children[0];
        };
        /**
         * Removes a child from the specified index position.
         *
         * @param {number} index - The index to get the child from
         * @return {PIXI.DisplayObject} The child that was removed.
         */


        Container.prototype.removeChildAt = function (index) {
          var child = this.getChildAt(index); // ensure child transform will be recalculated..

          child.parent = null;
          child.transform._parentID = -1;
          (0, _pixi_utils__WEBPACK_IMPORTED_MODULE_2__.removeItems)(this.children, index, 1); // ensure bounds will be recalculated

          this._boundsID++; // TODO - lets either do all callbacks or all events.. not both!

          this.onChildrenChange(index);
          child.emit('removed', this);
          this.emit('childRemoved', child, this, index);
          return child;
        };
        /**
         * Removes all children from this container that are within the begin and end indexes.
         *
         * @param {number} [beginIndex=0] - The beginning position.
         * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.
         * @returns {PIXI.DisplayObject[]} List of removed children
         */


        Container.prototype.removeChildren = function (beginIndex, endIndex) {
          if (beginIndex === void 0) {
            beginIndex = 0;
          }

          if (endIndex === void 0) {
            endIndex = this.children.length;
          }

          var begin = beginIndex;
          var end = endIndex;
          var range = end - begin;
          var removed;

          if (range > 0 && range <= end) {
            removed = this.children.splice(begin, range);

            for (var i = 0; i < removed.length; ++i) {
              removed[i].parent = null;

              if (removed[i].transform) {
                removed[i].transform._parentID = -1;
              }
            }

            this._boundsID++;
            this.onChildrenChange(beginIndex);

            for (var i = 0; i < removed.length; ++i) {
              removed[i].emit('removed', this);
              this.emit('childRemoved', removed[i], this, i);
            }

            return removed;
          } else if (range === 0 && this.children.length === 0) {
            return [];
          }

          throw new RangeError('removeChildren: numeric values are outside the acceptable range.');
        };
        /**
         * Sorts children by zIndex. Previous order is maintained for 2 children with the same zIndex.
         */


        Container.prototype.sortChildren = function () {
          var sortRequired = false;

          for (var i = 0, j = this.children.length; i < j; ++i) {
            var child = this.children[i];
            child._lastSortedIndex = i;

            if (!sortRequired && child.zIndex !== 0) {
              sortRequired = true;
            }
          }

          if (sortRequired && this.children.length > 1) {
            this.children.sort(sortChildren);
          }

          this.sortDirty = false;
        };
        /**
         * Updates the transform on all children of this container for rendering
         */


        Container.prototype.updateTransform = function () {
          if (this.sortableChildren && this.sortDirty) {
            this.sortChildren();
          }

          this._boundsID++;
          this.transform.updateTransform(this.parent.transform); // TODO: check render flags, how to process stuff here

          this.worldAlpha = this.alpha * this.parent.worldAlpha;

          for (var i = 0, j = this.children.length; i < j; ++i) {
            var child = this.children[i];

            if (child.visible) {
              child.updateTransform();
            }
          }
        };
        /**
         * Recalculates the bounds of the container.
         *
         * This implementation will automatically fit the children's bounds into the calculation. Each child's bounds
         * is limited to its mask's bounds or filterArea, if any is applied.
         */


        Container.prototype.calculateBounds = function () {
          this._bounds.clear();

          this._calculateBounds();

          for (var i = 0; i < this.children.length; i++) {
            var child = this.children[i];

            if (!child.visible || !child.renderable) {
              continue;
            }

            child.calculateBounds(); // TODO: filter+mask, need to mask both somehow

            if (child._mask) {
              var maskObject = child._mask.maskObject || child._mask;
              maskObject.calculateBounds();

              this._bounds.addBoundsMask(child._bounds, maskObject._bounds);
            } else if (child.filterArea) {
              this._bounds.addBoundsArea(child._bounds, child.filterArea);
            } else {
              this._bounds.addBounds(child._bounds);
            }
          }

          this._bounds.updateID = this._boundsID;
        };
        /**
         * Retrieves the local bounds of the displayObject as a rectangle object.
         *
         * Calling `getLocalBounds` may invalidate the `_bounds` of the whole subtree below. If using it inside a render()
         * call, it is advised to call `getBounds()` immediately after to recalculate the world bounds of the subtree.
         *
         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.
         * @param {boolean} [skipChildrenUpdate=false] - Setting to `true` will stop re-calculation of children transforms,
         *  it was default behaviour of pixi 4.0-5.2 and caused many problems to users.
         * @return {PIXI.Rectangle} The rectangular bounding area.
         */


        Container.prototype.getLocalBounds = function (rect, skipChildrenUpdate) {
          if (skipChildrenUpdate === void 0) {
            skipChildrenUpdate = false;
          }

          var result = _super.prototype.getLocalBounds.call(this, rect);

          if (!skipChildrenUpdate) {
            for (var i = 0, j = this.children.length; i < j; ++i) {
              var child = this.children[i];

              if (child.visible) {
                child.updateTransform();
              }
            }
          }

          return result;
        };
        /**
         * Recalculates the content bounds of this object. This should be overriden to
         * calculate the bounds of this specific object (not including children).
         *
         * @protected
         */


        Container.prototype._calculateBounds = function () {// FILL IN//
        };
        /**
         * Renders the object using the WebGL renderer.
         *
         * The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the
         * container itself. This `render` method will invoke it, and also invoke the `render` methods of all
         * children afterward.
         *
         * If `renderable` or `visible` is false or if `worldAlpha` is not positive, this implementation will entirely
         * skip rendering. See {@link PIXI.DisplayObject} for choosing between `renderable` or `visible`. Generally,
         * setting alpha to zero is not recommended for purely skipping rendering.
         *
         * When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is
         * advised to employ **culling** to automatically skip rendering objects outside of the current screen. The
         * [@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and
         * [pixi-cull]{@link https://www.npmjs.com/package/pixi-cull} packages do this out of the box.
         *
         * The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or
         * filtering is applied on a container. This does, however, break batching and can affect performance when
         * masking and filtering is applied extensively throughout the scene graph.
         *
         * @param {PIXI.Renderer} renderer - The renderer
         */


        Container.prototype.render = function (renderer) {
          // if the object is not visible or the alpha is 0 then no need to render this element
          if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {
            return;
          } // do a quick check to see if this element has a mask or a filter.


          if (this._mask || this.filters && this.filters.length) {
            this.renderAdvanced(renderer);
          } else {
            this._render(renderer); // simple render children!


            for (var i = 0, j = this.children.length; i < j; ++i) {
              this.children[i].render(renderer);
            }
          }
        };
        /**
         * Render the object using the WebGL renderer and advanced features.
         *
         * @protected
         * @param {PIXI.Renderer} renderer - The renderer
         */


        Container.prototype.renderAdvanced = function (renderer) {
          var filters = this.filters;
          var mask = this._mask; // push filter first as we need to ensure the stencil buffer is correct for any masking

          if (filters) {
            if (!this._enabledFilters) {
              this._enabledFilters = [];
            }

            this._enabledFilters.length = 0;

            for (var i = 0; i < filters.length; i++) {
              if (filters[i].enabled) {
                this._enabledFilters.push(filters[i]);
              }
            }
          }

          var flush = filters && this._enabledFilters && this._enabledFilters.length || mask && (!mask.isMaskData || mask.enabled && (mask.autoDetect || mask.type !== MASK_TYPES.NONE));

          if (flush) {
            renderer.batch.flush();
          }

          if (filters && this._enabledFilters && this._enabledFilters.length) {
            renderer.filter.push(this, this._enabledFilters);
          }

          if (mask) {
            renderer.mask.push(this, this._mask);
          } // add this object to the batch, only rendered if it has a texture.


          this._render(renderer); // now loop through the children and make sure they get rendered


          for (var i = 0, j = this.children.length; i < j; i++) {
            this.children[i].render(renderer);
          }

          if (flush) {
            renderer.batch.flush();
          }

          if (mask) {
            renderer.mask.pop(this);
          }

          if (filters && this._enabledFilters && this._enabledFilters.length) {
            renderer.filter.pop();
          }
        };
        /**
         * To be overridden by the subclasses.
         *
         * @protected
         * @param {PIXI.Renderer} renderer - The renderer
         */


        Container.prototype._render = function (_renderer) {// this is where content itself gets rendered...
        };
        /**
         * Removes all internal references and listeners as well as removes children from the display list.
         * Do not use a Container after calling `destroy`.
         *
         * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options
         *  have been set to that value
         * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy
         *  method called as well. 'options' will be passed on to those calls.
         * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true
         *  Should it destroy the texture of the child sprite
         * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true
         *  Should it destroy the base texture of the child sprite
         */


        Container.prototype.destroy = function (options) {
          _super.prototype.destroy.call(this);

          this.sortDirty = false;
          var destroyChildren = typeof options === 'boolean' ? options : options && options.children;
          var oldChildren = this.removeChildren(0, this.children.length);

          if (destroyChildren) {
            for (var i = 0; i < oldChildren.length; ++i) {
              oldChildren[i].destroy(options);
            }
          }
        };

        Object.defineProperty(Container.prototype, "width", {
          /**
           * The width of the Container, setting this will actually modify the scale to achieve the value set
           *
           * @member {number}
           */
          get: function get() {
            return this.scale.x * this.getLocalBounds().width;
          },
          set: function set(value) {
            var width = this.getLocalBounds().width;

            if (width !== 0) {
              this.scale.x = value / width;
            } else {
              this.scale.x = 1;
            }

            this._width = value;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Container.prototype, "height", {
          /**
           * The height of the Container, setting this will actually modify the scale to achieve the value set
           *
           * @member {number}
           */
          get: function get() {
            return this.scale.y * this.getLocalBounds().height;
          },
          set: function set(value) {
            var height = this.getLocalBounds().height;

            if (height !== 0) {
              this.scale.y = value / height;
            } else {
              this.scale.y = 1;
            }

            this._height = value;
          },
          enumerable: false,
          configurable: true
        });
        return Container;
      }(_DisplayObject);
      /**
       * Container default updateTransform, does update children of container.
       * Will crash if there's no parent element.
       *
       * @memberof PIXI.Container#
       * @method containerUpdateTransform
       */


      _Container.prototype.containerUpdateTransform = _Container.prototype.updateTransform;
      /***/
    },

    /***/
    67947:
    /*!**************************************************!*\
      !*** ./node_modules/@pixi/math/dist/esm/math.js ***!
      \**************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "Circle": function Circle() {
          return (
            /* binding */
            _Circle
          );
        },

        /* harmony export */
        "DEG_TO_RAD": function DEG_TO_RAD() {
          return (
            /* binding */
            _DEG_TO_RAD
          );
        },

        /* harmony export */
        "Ellipse": function Ellipse() {
          return (
            /* binding */
            _Ellipse
          );
        },

        /* harmony export */
        "Matrix": function Matrix() {
          return (
            /* binding */
            _Matrix
          );
        },

        /* harmony export */
        "ObservablePoint": function ObservablePoint() {
          return (
            /* binding */
            _ObservablePoint
          );
        },

        /* harmony export */
        "PI_2": function PI_2() {
          return (
            /* binding */
            _PI_
          );
        },

        /* harmony export */
        "Point": function Point() {
          return (
            /* binding */
            _Point
          );
        },

        /* harmony export */
        "Polygon": function Polygon() {
          return (
            /* binding */
            _Polygon
          );
        },

        /* harmony export */
        "RAD_TO_DEG": function RAD_TO_DEG() {
          return (
            /* binding */
            _RAD_TO_DEG
          );
        },

        /* harmony export */
        "Rectangle": function Rectangle() {
          return (
            /* binding */
            _Rectangle
          );
        },

        /* harmony export */
        "RoundedRectangle": function RoundedRectangle() {
          return (
            /* binding */
            _RoundedRectangle
          );
        },

        /* harmony export */
        "SHAPES": function SHAPES() {
          return (
            /* binding */
            _SHAPES
          );
        },

        /* harmony export */
        "Transform": function Transform() {
          return (
            /* binding */
            _Transform
          );
        },

        /* harmony export */
        "groupD8": function groupD8() {
          return (
            /* binding */
            _groupD
          );
        }
        /* harmony export */

      });
      /*!
       * @pixi/math - v6.2.0
       * Compiled Mon, 01 Nov 2021 16:52:10 UTC
       *
       * @pixi/math is licensed under the MIT License.
       * http://www.opensource.org/licenses/mit-license
       */

      /**
       * Two Pi.
       *
       * @static
       * @member {number}
       * @memberof PIXI
       */


      var _PI_ = Math.PI * 2;
      /**
       * Conversion factor for converting radians to degrees.
       *
       * @static
       * @member {number} RAD_TO_DEG
       * @memberof PIXI
       */


      var _RAD_TO_DEG = 180 / Math.PI;
      /**
       * Conversion factor for converting degrees to radians.
       *
       * @static
       * @member {number}
       * @memberof PIXI
       */


      var _DEG_TO_RAD = Math.PI / 180;
      /**
       * Constants that identify shapes, mainly to prevent `instanceof` calls.
       *
       * @static
       * @memberof PIXI
       * @enum {number}
       * @property {number} POLY Polygon
       * @property {number} RECT Rectangle
       * @property {number} CIRC Circle
       * @property {number} ELIP Ellipse
       * @property {number} RREC Rounded Rectangle
       */


      var _SHAPES;

      (function (SHAPES) {
        SHAPES[SHAPES["POLY"] = 0] = "POLY";
        SHAPES[SHAPES["RECT"] = 1] = "RECT";
        SHAPES[SHAPES["CIRC"] = 2] = "CIRC";
        SHAPES[SHAPES["ELIP"] = 3] = "ELIP";
        SHAPES[SHAPES["RREC"] = 4] = "RREC";
      })(_SHAPES || (_SHAPES = {}));
      /**
       * Size object, contains width and height
       *
       * @memberof PIXI
       * @typedef {object} ISize
       * @property {number} width - Width component
       * @property {number} height - Height component
       */

      /**
       * Rectangle object is an area defined by its position, as indicated by its top-left corner
       * point (x, y) and by its width and its height.
       *
       * @class
       * @memberof PIXI
       */


      var _Rectangle =
      /** @class */
      function () {
        /**
         * @param {number} [x=0] - The X coordinate of the upper-left corner of the rectangle
         * @param {number} [y=0] - The Y coordinate of the upper-left corner of the rectangle
         * @param {number} [width=0] - The overall width of this rectangle
         * @param {number} [height=0] - The overall height of this rectangle
         */
        function Rectangle(x, y, width, height) {
          if (x === void 0) {
            x = 0;
          }

          if (y === void 0) {
            y = 0;
          }

          if (width === void 0) {
            width = 0;
          }

          if (height === void 0) {
            height = 0;
          }
          /**
           * @member {number}
           * @default 0
           */


          this.x = Number(x);
          /**
           * @member {number}
           * @default 0
           */

          this.y = Number(y);
          /**
           * @member {number}
           * @default 0
           */

          this.width = Number(width);
          /**
           * @member {number}
           * @default 0
           */

          this.height = Number(height);
          /**
           * The type of the object, mainly used to avoid `instanceof` checks
           *
           * @member {number}
           * @readOnly
           * @default PIXI.SHAPES.RECT
           * @see PIXI.SHAPES
           */

          this.type = _SHAPES.RECT;
        }

        Object.defineProperty(Rectangle.prototype, "left", {
          /**
           * returns the left edge of the rectangle
           *
           * @member {number}
           */
          get: function get() {
            return this.x;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Rectangle.prototype, "right", {
          /**
           * returns the right edge of the rectangle
           *
           * @member {number}
           */
          get: function get() {
            return this.x + this.width;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Rectangle.prototype, "top", {
          /**
           * returns the top edge of the rectangle
           *
           * @member {number}
           */
          get: function get() {
            return this.y;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Rectangle.prototype, "bottom", {
          /**
           * returns the bottom edge of the rectangle
           *
           * @member {number}
           */
          get: function get() {
            return this.y + this.height;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Rectangle, "EMPTY", {
          /**
           * A constant empty rectangle.
           *
           * @static
           * @constant
           * @member {PIXI.Rectangle}
           * @return {PIXI.Rectangle} An empty rectangle
           */
          get: function get() {
            return new Rectangle(0, 0, 0, 0);
          },
          enumerable: false,
          configurable: true
        });
        /**
         * Creates a clone of this Rectangle
         *
         * @return {PIXI.Rectangle} a copy of the rectangle
         */

        Rectangle.prototype.clone = function () {
          return new Rectangle(this.x, this.y, this.width, this.height);
        };
        /**
         * Copies another rectangle to this one.
         *
         * @param {PIXI.Rectangle} rectangle - The rectangle to copy from.
         * @return {PIXI.Rectangle} Returns itself.
         */


        Rectangle.prototype.copyFrom = function (rectangle) {
          this.x = rectangle.x;
          this.y = rectangle.y;
          this.width = rectangle.width;
          this.height = rectangle.height;
          return this;
        };
        /**
         * Copies this rectangle to another one.
         *
         * @param {PIXI.Rectangle} rectangle - The rectangle to copy to.
         * @return {PIXI.Rectangle} Returns given parameter.
         */


        Rectangle.prototype.copyTo = function (rectangle) {
          rectangle.x = this.x;
          rectangle.y = this.y;
          rectangle.width = this.width;
          rectangle.height = this.height;
          return rectangle;
        };
        /**
         * Checks whether the x and y coordinates given are contained within this Rectangle
         *
         * @param {number} x - The X coordinate of the point to test
         * @param {number} y - The Y coordinate of the point to test
         * @return {boolean} Whether the x/y coordinates are within this Rectangle
         */


        Rectangle.prototype.contains = function (x, y) {
          if (this.width <= 0 || this.height <= 0) {
            return false;
          }

          if (x >= this.x && x < this.x + this.width) {
            if (y >= this.y && y < this.y + this.height) {
              return true;
            }
          }

          return false;
        };
        /**
         * Pads the rectangle making it grow in all directions.
         * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.
         *
         * @param {number} [paddingX=0] - The horizontal padding amount.
         * @param {number} [paddingY=0] - The vertical padding amount.
         * @return {PIXI.Rectangle} Returns itself.
         */


        Rectangle.prototype.pad = function (paddingX, paddingY) {
          if (paddingX === void 0) {
            paddingX = 0;
          }

          if (paddingY === void 0) {
            paddingY = paddingX;
          }

          this.x -= paddingX;
          this.y -= paddingY;
          this.width += paddingX * 2;
          this.height += paddingY * 2;
          return this;
        };
        /**
         * Fits this rectangle around the passed one.
         *
         * @param {PIXI.Rectangle} rectangle - The rectangle to fit.
         * @return {PIXI.Rectangle} Returns itself.
         */


        Rectangle.prototype.fit = function (rectangle) {
          var x1 = Math.max(this.x, rectangle.x);
          var x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);
          var y1 = Math.max(this.y, rectangle.y);
          var y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);
          this.x = x1;
          this.width = Math.max(x2 - x1, 0);
          this.y = y1;
          this.height = Math.max(y2 - y1, 0);
          return this;
        };
        /**
         * Enlarges rectangle that way its corners lie on grid
         *
         * @param {number} [resolution=1] - resolution
         * @param {number} [eps=0.001] - precision
         * @return {PIXI.Rectangle} Returns itself.
         */


        Rectangle.prototype.ceil = function (resolution, eps) {
          if (resolution === void 0) {
            resolution = 1;
          }

          if (eps === void 0) {
            eps = 0.001;
          }

          var x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;
          var y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;
          this.x = Math.floor((this.x + eps) * resolution) / resolution;
          this.y = Math.floor((this.y + eps) * resolution) / resolution;
          this.width = x2 - this.x;
          this.height = y2 - this.y;
          return this;
        };
        /**
         * Enlarges this rectangle to include the passed rectangle.
         *
         * @param {PIXI.Rectangle} rectangle - The rectangle to include.
         * @return {PIXI.Rectangle} Returns itself.
         */


        Rectangle.prototype.enlarge = function (rectangle) {
          var x1 = Math.min(this.x, rectangle.x);
          var x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);
          var y1 = Math.min(this.y, rectangle.y);
          var y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);
          this.x = x1;
          this.width = x2 - x1;
          this.y = y1;
          this.height = y2 - y1;
          return this;
        };

        Rectangle.prototype.toString = function () {
          return "[@pixi/math:Rectangle x=" + this.x + " y=" + this.y + " width=" + this.width + " height=" + this.height + "]";
        };

        return Rectangle;
      }();
      /**
       * The Circle object is used to help draw graphics and can also be used to specify a hit area for displayObjects.
       *
       * @memberof PIXI
       */


      var _Circle =
      /** @class */
      function () {
        /**
         * @param x - The X coordinate of the center of this circle
         * @param y - The Y coordinate of the center of this circle
         * @param radius - The radius of the circle
         */
        function Circle(x, y, radius) {
          if (x === void 0) {
            x = 0;
          }

          if (y === void 0) {
            y = 0;
          }

          if (radius === void 0) {
            radius = 0;
          }

          this.x = x;
          this.y = y;
          this.radius = radius;
          this.type = _SHAPES.CIRC;
        }
        /**
         * Creates a clone of this Circle instance
         *
         * @return A copy of the Circle
         */


        Circle.prototype.clone = function () {
          return new Circle(this.x, this.y, this.radius);
        };
        /**
         * Checks whether the x and y coordinates given are contained within this circle
         *
         * @param x - The X coordinate of the point to test
         * @param y - The Y coordinate of the point to test
         * @return Whether the x/y coordinates are within this Circle
         */


        Circle.prototype.contains = function (x, y) {
          if (this.radius <= 0) {
            return false;
          }

          var r2 = this.radius * this.radius;
          var dx = this.x - x;
          var dy = this.y - y;
          dx *= dx;
          dy *= dy;
          return dx + dy <= r2;
        };
        /**
        * Returns the framing rectangle of the circle as a Rectangle object
        *
        * @return The framing rectangle
        */


        Circle.prototype.getBounds = function () {
          return new _Rectangle(this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);
        };

        Circle.prototype.toString = function () {
          return "[@pixi/math:Circle x=" + this.x + " y=" + this.y + " radius=" + this.radius + "]";
        };

        return Circle;
      }();
      /**
       * The Ellipse object is used to help draw graphics and can also be used to specify a hit area for displayObjects.
       *
       * @memberof PIXI
       */


      var _Ellipse =
      /** @class */
      function () {
        /**
         * @param x - The X coordinate of the center of this ellipse
         * @param y - The Y coordinate of the center of this ellipse
         * @param halfWidth - The half width of this ellipse
         * @param halfHeight - The half height of this ellipse
         */
        function Ellipse(x, y, halfWidth, halfHeight) {
          if (x === void 0) {
            x = 0;
          }

          if (y === void 0) {
            y = 0;
          }

          if (halfWidth === void 0) {
            halfWidth = 0;
          }

          if (halfHeight === void 0) {
            halfHeight = 0;
          }

          this.x = x;
          this.y = y;
          this.width = halfWidth;
          this.height = halfHeight;
          this.type = _SHAPES.ELIP;
        }
        /**
         * Creates a clone of this Ellipse instance
         *
         * @return {PIXI.Ellipse} A copy of the ellipse
         */


        Ellipse.prototype.clone = function () {
          return new Ellipse(this.x, this.y, this.width, this.height);
        };
        /**
         * Checks whether the x and y coordinates given are contained within this ellipse
         *
         * @param x - The X coordinate of the point to test
         * @param y - The Y coordinate of the point to test
         * @return Whether the x/y coords are within this ellipse
         */


        Ellipse.prototype.contains = function (x, y) {
          if (this.width <= 0 || this.height <= 0) {
            return false;
          } // normalize the coords to an ellipse with center 0,0


          var normx = (x - this.x) / this.width;
          var normy = (y - this.y) / this.height;
          normx *= normx;
          normy *= normy;
          return normx + normy <= 1;
        };
        /**
         * Returns the framing rectangle of the ellipse as a Rectangle object
         *
         * @return The framing rectangle
         */


        Ellipse.prototype.getBounds = function () {
          return new _Rectangle(this.x - this.width, this.y - this.height, this.width, this.height);
        };

        Ellipse.prototype.toString = function () {
          return "[@pixi/math:Ellipse x=" + this.x + " y=" + this.y + " width=" + this.width + " height=" + this.height + "]";
        };

        return Ellipse;
      }();
      /**
       * A class to define a shape via user defined coordinates.
       *
       * @class
       * @memberof PIXI
       */


      var _Polygon =
      /** @class */
      function () {
        /**
         * @param {PIXI.IPointData[]|number[]} points - This can be an array of Points
         *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or
         *  the arguments passed can be all the points of the polygon e.g.
         *  `new PIXI.Polygon(new PIXI.Point(), new PIXI.Point(), ...)`, or the arguments passed can be flat
         *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.
         */
        function Polygon() {
          var arguments$1 = arguments;
          var points = [];

          for (var _i = 0; _i < arguments.length; _i++) {
            points[_i] = arguments$1[_i];
          }

          var flat = Array.isArray(points[0]) ? points[0] : points; // if this is an array of points, convert it to a flat array of numbers

          if (typeof flat[0] !== 'number') {
            var p = [];

            for (var i = 0, il = flat.length; i < il; i++) {
              p.push(flat[i].x, flat[i].y);
            }

            flat = p;
          }
          /**
           * An array of the points of this polygon
           *
           * @member {number[]}
           */


          this.points = flat;
          /**
           * The type of the object, mainly used to avoid `instanceof` checks
           *
           * @member {number}
           * @readOnly
           * @default PIXI.SHAPES.POLY
           * @see PIXI.SHAPES
           */

          this.type = _SHAPES.POLY;
          /**
           * `false` after moveTo, `true` after `closePath`. In all other cases it is `true`.
           * @member {boolean}
           * @default true
           */

          this.closeStroke = true;
        }
        /**
         * Creates a clone of this polygon
         *
         * @return {PIXI.Polygon} a copy of the polygon
         */


        Polygon.prototype.clone = function () {
          var points = this.points.slice();
          var polygon = new Polygon(points);
          polygon.closeStroke = this.closeStroke;
          return polygon;
        };
        /**
         * Checks whether the x and y coordinates passed to this function are contained within this polygon
         *
         * @param {number} x - The X coordinate of the point to test
         * @param {number} y - The Y coordinate of the point to test
         * @return {boolean} Whether the x/y coordinates are within this polygon
         */


        Polygon.prototype.contains = function (x, y) {
          var inside = false; // use some raycasting to test hits
          // https://github.com/substack/point-in-polygon/blob/master/index.js

          var length = this.points.length / 2;

          for (var i = 0, j = length - 1; i < length; j = i++) {
            var xi = this.points[i * 2];
            var yi = this.points[i * 2 + 1];
            var xj = this.points[j * 2];
            var yj = this.points[j * 2 + 1];
            var intersect = yi > y !== yj > y && x < (xj - xi) * ((y - yi) / (yj - yi)) + xi;

            if (intersect) {
              inside = !inside;
            }
          }

          return inside;
        };

        Polygon.prototype.toString = function () {
          return "[@pixi/math:Polygon" + ("closeStroke=" + this.closeStroke) + ("points=" + this.points.reduce(function (pointsDesc, currentPoint) {
            return pointsDesc + ", " + currentPoint;
          }, '') + "]");
        };

        return Polygon;
      }();
      /**
       * The Rounded Rectangle object is an area that has nice rounded corners, as indicated by its
       * top-left corner point (x, y) and by its width and its height and its radius.
       *
       * @class
       * @memberof PIXI
       */


      var _RoundedRectangle =
      /** @class */
      function () {
        /**
         * @param {number} [x=0] - The X coordinate of the upper-left corner of the rounded rectangle
         * @param {number} [y=0] - The Y coordinate of the upper-left corner of the rounded rectangle
         * @param {number} [width=0] - The overall width of this rounded rectangle
         * @param {number} [height=0] - The overall height of this rounded rectangle
         * @param {number} [radius=20] - Controls the radius of the rounded corners
         */
        function RoundedRectangle(x, y, width, height, radius) {
          if (x === void 0) {
            x = 0;
          }

          if (y === void 0) {
            y = 0;
          }

          if (width === void 0) {
            width = 0;
          }

          if (height === void 0) {
            height = 0;
          }

          if (radius === void 0) {
            radius = 20;
          }
          /**
           * @member {number}
           * @default 0
           */


          this.x = x;
          /**
           * @member {number}
           * @default 0
           */

          this.y = y;
          /**
           * @member {number}
           * @default 0
           */

          this.width = width;
          /**
           * @member {number}
           * @default 0
           */

          this.height = height;
          /**
           * @member {number}
           * @default 20
           */

          this.radius = radius;
          /**
           * The type of the object, mainly used to avoid `instanceof` checks
           *
           * @member {number}
           * @readonly
           * @default PIXI.SHAPES.RREC
           * @see PIXI.SHAPES
           */

          this.type = _SHAPES.RREC;
        }
        /**
         * Creates a clone of this Rounded Rectangle
         *
         * @return {PIXI.RoundedRectangle} a copy of the rounded rectangle
         */


        RoundedRectangle.prototype.clone = function () {
          return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);
        };
        /**
         * Checks whether the x and y coordinates given are contained within this Rounded Rectangle
         *
         * @param {number} x - The X coordinate of the point to test
         * @param {number} y - The Y coordinate of the point to test
         * @return {boolean} Whether the x/y coordinates are within this Rounded Rectangle
         */


        RoundedRectangle.prototype.contains = function (x, y) {
          if (this.width <= 0 || this.height <= 0) {
            return false;
          }

          if (x >= this.x && x <= this.x + this.width) {
            if (y >= this.y && y <= this.y + this.height) {
              if (y >= this.y + this.radius && y <= this.y + this.height - this.radius || x >= this.x + this.radius && x <= this.x + this.width - this.radius) {
                return true;
              }

              var dx = x - (this.x + this.radius);
              var dy = y - (this.y + this.radius);
              var radius2 = this.radius * this.radius;

              if (dx * dx + dy * dy <= radius2) {
                return true;
              }

              dx = x - (this.x + this.width - this.radius);

              if (dx * dx + dy * dy <= radius2) {
                return true;
              }

              dy = y - (this.y + this.height - this.radius);

              if (dx * dx + dy * dy <= radius2) {
                return true;
              }

              dx = x - (this.x + this.radius);

              if (dx * dx + dy * dy <= radius2) {
                return true;
              }
            }
          }

          return false;
        };

        RoundedRectangle.prototype.toString = function () {
          return "[@pixi/math:RoundedRectangle x=" + this.x + " y=" + this.y + ("width=" + this.width + " height=" + this.height + " radius=" + this.radius + "]");
        };

        return RoundedRectangle;
      }();
      /**
       * The Point object represents a location in a two-dimensional coordinate system, where `x` represents
       * the position on the horizontal axis and `y` represents the position on the vertical axis
       *
       * @class
       * @memberof PIXI
       * @implements IPoint
       */


      var _Point =
      /** @class */
      function () {
        /** Creates a new `Point`
         * @param {number} [x=0] - position of the point on the x axis
         * @param {number} [y=0] - position of the point on the y axis
         */
        function Point(x, y) {
          if (x === void 0) {
            x = 0;
          }

          if (y === void 0) {
            y = 0;
          }
          /** Position of the point on the x axis */


          this.x = 0;
          /** Position of the point on the y axis */

          this.y = 0;
          this.x = x;
          this.y = y;
        }
        /** Creates a clone of this point
         * @returns A clone of this point
         */


        Point.prototype.clone = function () {
          return new Point(this.x, this.y);
        };
        /**
         * Copies `x` and `y` from the given point into this point
         *
         * @param p - The point to copy from
         * @returns The point instance itself
         */


        Point.prototype.copyFrom = function (p) {
          this.set(p.x, p.y);
          return this;
        };
        /**
         * Copies this point's x and y into the given point (`p`).
         *
         * @param p - The point to copy to. Can be any of type that is or extends `IPointData`
         * @returns The point (`p`) with values updated
         */


        Point.prototype.copyTo = function (p) {
          p.set(this.x, this.y);
          return p;
        };
        /**
         * Accepts another point (`p`) and returns `true` if the given point is equal to this point
         *
         * @param p - The point to check
         * @returns Returns `true` if both `x` and `y` are equal
         */


        Point.prototype.equals = function (p) {
          return p.x === this.x && p.y === this.y;
        };
        /**
         * Sets the point to a new `x` and `y` position.
         * If `y` is omitted, both `x` and `y` will be set to `x`.
         *
         * @param {number} [x=0] - position of the point on the `x` axis
         * @param {number} [y=x] - position of the point on the `y` axis
         * @returns The point instance itself
         */


        Point.prototype.set = function (x, y) {
          if (x === void 0) {
            x = 0;
          }

          if (y === void 0) {
            y = x;
          }

          this.x = x;
          this.y = y;
          return this;
        };

        Point.prototype.toString = function () {
          return "[@pixi/math:Point x=" + this.x + " y=" + this.y + "]";
        };

        return Point;
      }();
      /**
       * The ObservablePoint object represents a location in a two-dimensional coordinate system, where `x` represents
       * the position on the horizontal axis and `y` represents the position on the vertical axis.
       *
       * An `ObservablePoint` is a point that triggers a callback when the point's position is changed.
       *
       * @memberof PIXI
       */


      var _ObservablePoint =
      /** @class */
      function () {
        /**
         * Creates a new `ObservablePoint`
         *
         * @param cb - callback function triggered when `x` and/or `y` are changed
         * @param scope - owner of callback
         * @param {number} [x=0] - position of the point on the x axis
         * @param {number} [y=0] - position of the point on the y axis
        */
        function ObservablePoint(cb, scope, x, y) {
          if (x === void 0) {
            x = 0;
          }

          if (y === void 0) {
            y = 0;
          }

          this._x = x;
          this._y = y;
          this.cb = cb;
          this.scope = scope;
        }
        /**
         * Creates a clone of this point.
         * The callback and scope params can be overridden otherwise they will default
         * to the clone object's values.
         *
         * @override
         * @param cb - The callback function triggered when `x` and/or `y` are changed
         * @param scope - The owner of the callback
         * @return a copy of this observable point
         */


        ObservablePoint.prototype.clone = function (cb, scope) {
          if (cb === void 0) {
            cb = this.cb;
          }

          if (scope === void 0) {
            scope = this.scope;
          }

          return new ObservablePoint(cb, scope, this._x, this._y);
        };
        /**
         * Sets the point to a new `x` and `y` position.
         * If `y` is omitted, both `x` and `y` will be set to `x`.
         *
         * @param {number} [x=0] - position of the point on the x axis
         * @param {number} [y=x] - position of the point on the y axis
         * @returns The observable point instance itself
         */


        ObservablePoint.prototype.set = function (x, y) {
          if (x === void 0) {
            x = 0;
          }

          if (y === void 0) {
            y = x;
          }

          if (this._x !== x || this._y !== y) {
            this._x = x;
            this._y = y;
            this.cb.call(this.scope);
          }

          return this;
        };
        /**
         * Copies x and y from the given point (`p`)
         *
         * @param p - The point to copy from. Can be any of type that is or extends `IPointData`
         * @returns The observable point instance itself
         */


        ObservablePoint.prototype.copyFrom = function (p) {
          if (this._x !== p.x || this._y !== p.y) {
            this._x = p.x;
            this._y = p.y;
            this.cb.call(this.scope);
          }

          return this;
        };
        /**
         * Copies this point's x and y into that of the given point (`p`)
         *
         * @param p - The point to copy to. Can be any of type that is or extends `IPointData`
         * @returns The point (`p`) with values updated
         */


        ObservablePoint.prototype.copyTo = function (p) {
          p.set(this._x, this._y);
          return p;
        };
        /**
         * Accepts another point (`p`) and returns `true` if the given point is equal to this point
         *
         * @param p - The point to check
         * @returns Returns `true` if both `x` and `y` are equal
         */


        ObservablePoint.prototype.equals = function (p) {
          return p.x === this._x && p.y === this._y;
        };

        ObservablePoint.prototype.toString = function () {
          return "[@pixi/math:ObservablePoint x=" + 0 + " y=" + 0 + " scope=" + this.scope + "]";
        };

        Object.defineProperty(ObservablePoint.prototype, "x", {
          /** Position of the observable point on the x axis. */
          get: function get() {
            return this._x;
          },
          set: function set(value) {
            if (this._x !== value) {
              this._x = value;
              this.cb.call(this.scope);
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(ObservablePoint.prototype, "y", {
          /** Position of the observable point on the y axis. */
          get: function get() {
            return this._y;
          },
          set: function set(value) {
            if (this._y !== value) {
              this._y = value;
              this.cb.call(this.scope);
            }
          },
          enumerable: false,
          configurable: true
        });
        return ObservablePoint;
      }();
      /**
       * The PixiJS Matrix as a class makes it a lot faster.
       *
       * Here is a representation of it:
       * ```js
       * | a | c | tx|
       * | b | d | ty|
       * | 0 | 0 | 1 |
       * ```
       *
       * @memberof PIXI
       */


      var _Matrix =
      /** @class */
      function () {
        /**
         * @param a - x scale
         * @param b - y skew
         * @param c - x skew
         * @param d - y scale
         * @param tx - x translation
         * @param ty - y translation
         */
        function Matrix(a, b, c, d, tx, ty) {
          if (a === void 0) {
            a = 1;
          }

          if (b === void 0) {
            b = 0;
          }

          if (c === void 0) {
            c = 0;
          }

          if (d === void 0) {
            d = 1;
          }

          if (tx === void 0) {
            tx = 0;
          }

          if (ty === void 0) {
            ty = 0;
          }

          this.array = null;
          this.a = a;
          this.b = b;
          this.c = c;
          this.d = d;
          this.tx = tx;
          this.ty = ty;
        }
        /**
         * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:
         *
         * a = array[0]
         * b = array[1]
         * c = array[3]
         * d = array[4]
         * tx = array[2]
         * ty = array[5]
         *
         * @param array - The array that the matrix will be populated from.
         */


        Matrix.prototype.fromArray = function (array) {
          this.a = array[0];
          this.b = array[1];
          this.c = array[3];
          this.d = array[4];
          this.tx = array[2];
          this.ty = array[5];
        };
        /**
         * Sets the matrix properties.
         *
         * @param a - Matrix component
         * @param b - Matrix component
         * @param c - Matrix component
         * @param d - Matrix component
         * @param tx - Matrix component
         * @param ty - Matrix component
         * @return This matrix. Good for chaining method calls.
         */


        Matrix.prototype.set = function (a, b, c, d, tx, ty) {
          this.a = a;
          this.b = b;
          this.c = c;
          this.d = d;
          this.tx = tx;
          this.ty = ty;
          return this;
        };
        /**
         * Creates an array from the current Matrix object.
         *
         * @param transpose - Whether we need to transpose the matrix or not
         * @param [out=new Float32Array(9)] - If provided the array will be assigned to out
         * @return The newly created array which contains the matrix
         */


        Matrix.prototype.toArray = function (transpose, out) {
          if (!this.array) {
            this.array = new Float32Array(9);
          }

          var array = out || this.array;

          if (transpose) {
            array[0] = this.a;
            array[1] = this.b;
            array[2] = 0;
            array[3] = this.c;
            array[4] = this.d;
            array[5] = 0;
            array[6] = this.tx;
            array[7] = this.ty;
            array[8] = 1;
          } else {
            array[0] = this.a;
            array[1] = this.c;
            array[2] = this.tx;
            array[3] = this.b;
            array[4] = this.d;
            array[5] = this.ty;
            array[6] = 0;
            array[7] = 0;
            array[8] = 1;
          }

          return array;
        };
        /**
         * Get a new position with the current transformation applied.
         * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)
         *
         * @param pos - The origin
         * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)
         * @return {PIXI.Point} The new point, transformed through this matrix
         */


        Matrix.prototype.apply = function (pos, newPos) {
          newPos = newPos || new _Point();
          var x = pos.x;
          var y = pos.y;
          newPos.x = this.a * x + this.c * y + this.tx;
          newPos.y = this.b * x + this.d * y + this.ty;
          return newPos;
        };
        /**
         * Get a new position with the inverse of the current transformation applied.
         * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)
         *
         * @param pos - The origin
         * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)
         * @return {PIXI.Point} The new point, inverse-transformed through this matrix
         */


        Matrix.prototype.applyInverse = function (pos, newPos) {
          newPos = newPos || new _Point();
          var id = 1 / (this.a * this.d + this.c * -this.b);
          var x = pos.x;
          var y = pos.y;
          newPos.x = this.d * id * x + -this.c * id * y + (this.ty * this.c - this.tx * this.d) * id;
          newPos.y = this.a * id * y + -this.b * id * x + (-this.ty * this.a + this.tx * this.b) * id;
          return newPos;
        };
        /**
         * Translates the matrix on the x and y.
         *
         * @param x - How much to translate x by
         * @param y - How much to translate y by
         * @return This matrix. Good for chaining method calls.
         */


        Matrix.prototype.translate = function (x, y) {
          this.tx += x;
          this.ty += y;
          return this;
        };
        /**
         * Applies a scale transformation to the matrix.
         *
         * @param x - The amount to scale horizontally
         * @param y - The amount to scale vertically
         * @return This matrix. Good for chaining method calls.
         */


        Matrix.prototype.scale = function (x, y) {
          this.a *= x;
          this.d *= y;
          this.c *= x;
          this.b *= y;
          this.tx *= x;
          this.ty *= y;
          return this;
        };
        /**
         * Applies a rotation transformation to the matrix.
         *
         * @param angle - The angle in radians.
         * @return This matrix. Good for chaining method calls.
         */


        Matrix.prototype.rotate = function (angle) {
          var cos = Math.cos(angle);
          var sin = Math.sin(angle);
          var a1 = this.a;
          var c1 = this.c;
          var tx1 = this.tx;
          this.a = a1 * cos - this.b * sin;
          this.b = a1 * sin + this.b * cos;
          this.c = c1 * cos - this.d * sin;
          this.d = c1 * sin + this.d * cos;
          this.tx = tx1 * cos - this.ty * sin;
          this.ty = tx1 * sin + this.ty * cos;
          return this;
        };
        /**
         * Appends the given Matrix to this Matrix.
         *
         * @param matrix - The matrix to append.
         * @return This matrix. Good for chaining method calls.
         */


        Matrix.prototype.append = function (matrix) {
          var a1 = this.a;
          var b1 = this.b;
          var c1 = this.c;
          var d1 = this.d;
          this.a = matrix.a * a1 + matrix.b * c1;
          this.b = matrix.a * b1 + matrix.b * d1;
          this.c = matrix.c * a1 + matrix.d * c1;
          this.d = matrix.c * b1 + matrix.d * d1;
          this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;
          this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;
          return this;
        };
        /**
         * Sets the matrix based on all the available properties
         *
         * @param x - Position on the x axis
         * @param y - Position on the y axis
         * @param pivotX - Pivot on the x axis
         * @param pivotY - Pivot on the y axis
         * @param scaleX - Scale on the x axis
         * @param scaleY - Scale on the y axis
         * @param rotation - Rotation in radians
         * @param skewX - Skew on the x axis
         * @param skewY - Skew on the y axis
         * @return This matrix. Good for chaining method calls.
         */


        Matrix.prototype.setTransform = function (x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) {
          this.a = Math.cos(rotation + skewY) * scaleX;
          this.b = Math.sin(rotation + skewY) * scaleX;
          this.c = -Math.sin(rotation - skewX) * scaleY;
          this.d = Math.cos(rotation - skewX) * scaleY;
          this.tx = x - (pivotX * this.a + pivotY * this.c);
          this.ty = y - (pivotX * this.b + pivotY * this.d);
          return this;
        };
        /**
         * Prepends the given Matrix to this Matrix.
         *
         * @param matrix - The matrix to prepend
         * @return This matrix. Good for chaining method calls.
         */


        Matrix.prototype.prepend = function (matrix) {
          var tx1 = this.tx;

          if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {
            var a1 = this.a;
            var c1 = this.c;
            this.a = a1 * matrix.a + this.b * matrix.c;
            this.b = a1 * matrix.b + this.b * matrix.d;
            this.c = c1 * matrix.a + this.d * matrix.c;
            this.d = c1 * matrix.b + this.d * matrix.d;
          }

          this.tx = tx1 * matrix.a + this.ty * matrix.c + matrix.tx;
          this.ty = tx1 * matrix.b + this.ty * matrix.d + matrix.ty;
          return this;
        };
        /**
         * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.
         *
         * @param transform - The transform to apply the properties to.
         * @return The transform with the newly applied properties
         */


        Matrix.prototype.decompose = function (transform) {
          // sort out rotation / skew..
          var a = this.a;
          var b = this.b;
          var c = this.c;
          var d = this.d;
          var pivot = transform.pivot;
          var skewX = -Math.atan2(-c, d);
          var skewY = Math.atan2(b, a);
          var delta = Math.abs(skewX + skewY);

          if (delta < 0.00001 || Math.abs(_PI_ - delta) < 0.00001) {
            transform.rotation = skewY;
            transform.skew.x = transform.skew.y = 0;
          } else {
            transform.rotation = 0;
            transform.skew.x = skewX;
            transform.skew.y = skewY;
          } // next set scale


          transform.scale.x = Math.sqrt(a * a + b * b);
          transform.scale.y = Math.sqrt(c * c + d * d); // next set position

          transform.position.x = this.tx + (pivot.x * a + pivot.y * c);
          transform.position.y = this.ty + (pivot.x * b + pivot.y * d);
          return transform;
        };
        /**
         * Inverts this matrix
         *
         * @return This matrix. Good for chaining method calls.
         */


        Matrix.prototype.invert = function () {
          var a1 = this.a;
          var b1 = this.b;
          var c1 = this.c;
          var d1 = this.d;
          var tx1 = this.tx;
          var n = a1 * d1 - b1 * c1;
          this.a = d1 / n;
          this.b = -b1 / n;
          this.c = -c1 / n;
          this.d = a1 / n;
          this.tx = (c1 * this.ty - d1 * tx1) / n;
          this.ty = -(a1 * this.ty - b1 * tx1) / n;
          return this;
        };
        /**
         * Resets this Matrix to an identity (default) matrix.
         *
         * @return This matrix. Good for chaining method calls.
         */


        Matrix.prototype.identity = function () {
          this.a = 1;
          this.b = 0;
          this.c = 0;
          this.d = 1;
          this.tx = 0;
          this.ty = 0;
          return this;
        };
        /**
         * Creates a new Matrix object with the same values as this one.
         *
         * @return A copy of this matrix. Good for chaining method calls.
         */


        Matrix.prototype.clone = function () {
          var matrix = new Matrix();
          matrix.a = this.a;
          matrix.b = this.b;
          matrix.c = this.c;
          matrix.d = this.d;
          matrix.tx = this.tx;
          matrix.ty = this.ty;
          return matrix;
        };
        /**
         * Changes the values of the given matrix to be the same as the ones in this matrix
         *
         * @param matrix - The matrix to copy to.
         * @return The matrix given in parameter with its values updated.
         */


        Matrix.prototype.copyTo = function (matrix) {
          matrix.a = this.a;
          matrix.b = this.b;
          matrix.c = this.c;
          matrix.d = this.d;
          matrix.tx = this.tx;
          matrix.ty = this.ty;
          return matrix;
        };
        /**
         * Changes the values of the matrix to be the same as the ones in given matrix
         *
         * @param {PIXI.Matrix} matrix - The matrix to copy from.
         * @return {PIXI.Matrix} this
         */


        Matrix.prototype.copyFrom = function (matrix) {
          this.a = matrix.a;
          this.b = matrix.b;
          this.c = matrix.c;
          this.d = matrix.d;
          this.tx = matrix.tx;
          this.ty = matrix.ty;
          return this;
        };

        Matrix.prototype.toString = function () {
          return "[@pixi/math:Matrix a=" + this.a + " b=" + this.b + " c=" + this.c + " d=" + this.d + " tx=" + this.tx + " ty=" + this.ty + "]";
        };

        Object.defineProperty(Matrix, "IDENTITY", {
          /**
           * A default (identity) matrix
           *
           * @readonly
           */
          get: function get() {
            return new Matrix();
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Matrix, "TEMP_MATRIX", {
          /**
           * A temp matrix
           *
           * @readonly
           */
          get: function get() {
            return new Matrix();
          },
          enumerable: false,
          configurable: true
        });
        return Matrix;
      }(); // Your friendly neighbour https://en.wikipedia.org/wiki/Dihedral_group

      /*
       * Transform matrix for operation n is:
       * | ux | vx |
       * | uy | vy |
       */


      var ux = [1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1];
      var uy = [0, 1, 1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1];
      var vx = [0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1];
      var vy = [1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, 1, 1, 1, 0, -1];
      /**
       * [Cayley Table]{@link https://en.wikipedia.org/wiki/Cayley_table}
       * for the composition of each rotation in the dihederal group D8.
       *
       * @type number[][]
       * @private
       */

      var rotationCayley = [];
      /**
       * Matrices for each `GD8Symmetry` rotation.
       *
       * @type Matrix[]
       * @private
       */

      var rotationMatrices = [];
      /*
       * Alias for {@code Math.sign}.
       */

      var signum = Math.sign;
      /*
       * Initializes `rotationCayley` and `rotationMatrices`. It is called
       * only once below.
       */

      function init() {
        for (var i = 0; i < 16; i++) {
          var row = [];
          rotationCayley.push(row);

          for (var j = 0; j < 16; j++) {
            /* Multiplies rotation matrices i and j. */
            var _ux = signum(ux[i] * ux[j] + vx[i] * uy[j]);

            var _uy = signum(uy[i] * ux[j] + vy[i] * uy[j]);

            var _vx = signum(ux[i] * vx[j] + vx[i] * vy[j]);

            var _vy = signum(uy[i] * vx[j] + vy[i] * vy[j]);
            /* Finds rotation matrix matching the product and pushes it. */


            for (var k = 0; k < 16; k++) {
              if (ux[k] === _ux && uy[k] === _uy && vx[k] === _vx && vy[k] === _vy) {
                row.push(k);
                break;
              }
            }
          }
        }

        for (var i = 0; i < 16; i++) {
          var mat = new _Matrix();
          mat.set(ux[i], uy[i], vx[i], vy[i], 0, 0);
          rotationMatrices.push(mat);
        }
      }

      init();
      /**
       * @memberof PIXI
       * @typedef {number} GD8Symmetry
       * @see PIXI.groupD8
       */

      /**
       * Implements the dihedral group D8, which is similar to
       * [group D4]{@link http://mathworld.wolfram.com/DihedralGroupD4.html};
       * D8 is the same but with diagonals, and it is used for texture
       * rotations.
       *
       * The directions the U- and V- axes after rotation
       * of an angle of `a: GD8Constant` are the vectors `(uX(a), uY(a))`
       * and `(vX(a), vY(a))`. These aren't necessarily unit vectors.
       *
       * **Origin:**<br>
       *  This is the small part of gameofbombs.com portal system. It works.
       *
       * @see PIXI.groupD8.E
       * @see PIXI.groupD8.SE
       * @see PIXI.groupD8.S
       * @see PIXI.groupD8.SW
       * @see PIXI.groupD8.W
       * @see PIXI.groupD8.NW
       * @see PIXI.groupD8.N
       * @see PIXI.groupD8.NE
       * @author Ivan @ivanpopelyshev
       * @namespace PIXI.groupD8
       * @memberof PIXI
       */

      var _groupD = {
        /**
         * | Rotation | Direction |
         * |----------|-----------|
         * | 0°       | East      |
         *
         * @memberof PIXI.groupD8
         * @constant {PIXI.GD8Symmetry}
         */
        E: 0,

        /**
         * | Rotation | Direction |
         * |----------|-----------|
         * | 45°↻     | Southeast |
         *
         * @memberof PIXI.groupD8
         * @constant {PIXI.GD8Symmetry}
         */
        SE: 1,

        /**
         * | Rotation | Direction |
         * |----------|-----------|
         * | 90°↻     | South     |
         *
         * @memberof PIXI.groupD8
         * @constant {PIXI.GD8Symmetry}
         */
        S: 2,

        /**
         * | Rotation | Direction |
         * |----------|-----------|
         * | 135°↻    | Southwest |
         *
         * @memberof PIXI.groupD8
         * @constant {PIXI.GD8Symmetry}
         */
        SW: 3,

        /**
         * | Rotation | Direction |
         * |----------|-----------|
         * | 180°     | West      |
         *
         * @memberof PIXI.groupD8
         * @constant {PIXI.GD8Symmetry}
         */
        W: 4,

        /**
         * | Rotation    | Direction    |
         * |-------------|--------------|
         * | -135°/225°↻ | Northwest    |
         *
         * @memberof PIXI.groupD8
         * @constant {PIXI.GD8Symmetry}
         */
        NW: 5,

        /**
         * | Rotation    | Direction    |
         * |-------------|--------------|
         * | -90°/270°↻  | North        |
         *
         * @memberof PIXI.groupD8
         * @constant {PIXI.GD8Symmetry}
         */
        N: 6,

        /**
         * | Rotation    | Direction    |
         * |-------------|--------------|
         * | -45°/315°↻  | Northeast    |
         *
         * @memberof PIXI.groupD8
         * @constant {PIXI.GD8Symmetry}
         */
        NE: 7,

        /**
         * Reflection about Y-axis.
         *
         * @memberof PIXI.groupD8
         * @constant {PIXI.GD8Symmetry}
         */
        MIRROR_VERTICAL: 8,

        /**
         * Reflection about the main diagonal.
         *
         * @memberof PIXI.groupD8
         * @constant {PIXI.GD8Symmetry}
         */
        MAIN_DIAGONAL: 10,

        /**
         * Reflection about X-axis.
         *
         * @memberof PIXI.groupD8
         * @constant {PIXI.GD8Symmetry}
         */
        MIRROR_HORIZONTAL: 12,

        /**
         * Reflection about reverse diagonal.
         *
         * @memberof PIXI.groupD8
         * @constant {PIXI.GD8Symmetry}
         */
        REVERSE_DIAGONAL: 14,

        /**
         * @memberof PIXI.groupD8
         * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.
         * @return {PIXI.GD8Symmetry} The X-component of the U-axis
         *    after rotating the axes.
         */
        uX: function uX(ind) {
          return ux[ind];
        },

        /**
         * @memberof PIXI.groupD8
         * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.
         * @return {PIXI.GD8Symmetry} The Y-component of the U-axis
         *    after rotating the axes.
         */
        uY: function uY(ind) {
          return uy[ind];
        },

        /**
         * @memberof PIXI.groupD8
         * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.
         * @return {PIXI.GD8Symmetry} The X-component of the V-axis
         *    after rotating the axes.
         */
        vX: function vX(ind) {
          return vx[ind];
        },

        /**
         * @memberof PIXI.groupD8
         * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.
         * @return {PIXI.GD8Symmetry} The Y-component of the V-axis
         *    after rotating the axes.
         */
        vY: function vY(ind) {
          return vy[ind];
        },

        /**
         * @memberof PIXI.groupD8
         * @param {PIXI.GD8Symmetry} rotation - symmetry whose opposite
         *   is needed. Only rotations have opposite symmetries while
         *   reflections don't.
         * @return {PIXI.GD8Symmetry} The opposite symmetry of `rotation`
         */
        inv: function inv(rotation) {
          if (rotation & 8) // true only if between 8 & 15 (reflections)
            {
              return rotation & 15; // or rotation % 16
            }

          return -rotation & 7; // or (8 - rotation) % 8
        },

        /**
         * Composes the two D8 operations.
         *
         * Taking `^` as reflection:
         *
         * |       | E=0 | S=2 | W=4 | N=6 | E^=8 | S^=10 | W^=12 | N^=14 |
         * |-------|-----|-----|-----|-----|------|-------|-------|-------|
         * | E=0   | E   | S   | W   | N   | E^   | S^    | W^    | N^    |
         * | S=2   | S   | W   | N   | E   | S^   | W^    | N^    | E^    |
         * | W=4   | W   | N   | E   | S   | W^   | N^    | E^    | S^    |
         * | N=6   | N   | E   | S   | W   | N^   | E^    | S^    | W^    |
         * | E^=8  | E^  | N^  | W^  | S^  | E    | N     | W     | S     |
         * | S^=10 | S^  | E^  | N^  | W^  | S    | E     | N     | W     |
         * | W^=12 | W^  | S^  | E^  | N^  | W    | S     | E     | N     |
         * | N^=14 | N^  | W^  | S^  | E^  | N    | W     | S     | E     |
         *
         * [This is a Cayley table]{@link https://en.wikipedia.org/wiki/Cayley_table}
         * @memberof PIXI.groupD8
         * @param {PIXI.GD8Symmetry} rotationSecond - Second operation, which
         *   is the row in the above cayley table.
         * @param {PIXI.GD8Symmetry} rotationFirst - First operation, which
         *   is the column in the above cayley table.
         * @return {PIXI.GD8Symmetry} Composed operation
         */
        add: function add(rotationSecond, rotationFirst) {
          return rotationCayley[rotationSecond][rotationFirst];
        },

        /**
         * Reverse of `add`.
         *
         * @memberof PIXI.groupD8
         * @param {PIXI.GD8Symmetry} rotationSecond - Second operation
         * @param {PIXI.GD8Symmetry} rotationFirst - First operation
         * @return {PIXI.GD8Symmetry} Result
         */
        sub: function sub(rotationSecond, rotationFirst) {
          return rotationCayley[rotationSecond][_groupD.inv(rotationFirst)];
        },

        /**
         * Adds 180 degrees to rotation, which is a commutative
         * operation.
         *
         * @memberof PIXI.groupD8
         * @param {number} rotation - The number to rotate.
         * @returns {number} Rotated number
         */
        rotate180: function rotate180(rotation) {
          return rotation ^ 4;
        },

        /**
         * Checks if the rotation angle is vertical, i.e. south
         * or north. It doesn't work for reflections.
         *
         * @memberof PIXI.groupD8
         * @param {PIXI.GD8Symmetry} rotation - The number to check.
         * @returns {boolean} Whether or not the direction is vertical
         */
        isVertical: function isVertical(rotation) {
          return (rotation & 3) === 2;
        },

        /**
         * Approximates the vector `V(dx,dy)` into one of the
         * eight directions provided by `groupD8`.
         *
         * @memberof PIXI.groupD8
         * @param {number} dx - X-component of the vector
         * @param {number} dy - Y-component of the vector
         * @return {PIXI.GD8Symmetry} Approximation of the vector into
         *  one of the eight symmetries.
         */
        byDirection: function byDirection(dx, dy) {
          if (Math.abs(dx) * 2 <= Math.abs(dy)) {
            if (dy >= 0) {
              return _groupD.S;
            }

            return _groupD.N;
          } else if (Math.abs(dy) * 2 <= Math.abs(dx)) {
            if (dx > 0) {
              return _groupD.E;
            }

            return _groupD.W;
          } else if (dy > 0) {
            if (dx > 0) {
              return _groupD.SE;
            }

            return _groupD.SW;
          } else if (dx > 0) {
            return _groupD.NE;
          }

          return _groupD.NW;
        },

        /**
         * Helps sprite to compensate texture packer rotation.
         *
         * @memberof PIXI.groupD8
         * @param {PIXI.Matrix} matrix - sprite world matrix
         * @param {PIXI.GD8Symmetry} rotation - The rotation factor to use.
         * @param {number} tx - sprite anchoring
         * @param {number} ty - sprite anchoring
         */
        matrixAppendRotationInv: function matrixAppendRotationInv(matrix, rotation, tx, ty) {
          if (tx === void 0) {
            tx = 0;
          }

          if (ty === void 0) {
            ty = 0;
          } // Packer used "rotation", we use "inv(rotation)"


          var mat = rotationMatrices[_groupD.inv(rotation)];

          mat.tx = tx;
          mat.ty = ty;
          matrix.append(mat);
        }
      };
      /**
       * Transform that takes care about its versions.
       *
       * @memberof PIXI
       */

      var _Transform =
      /** @class */
      function () {
        function Transform() {
          this.worldTransform = new _Matrix();
          this.localTransform = new _Matrix();
          this.position = new _ObservablePoint(this.onChange, this, 0, 0);
          this.scale = new _ObservablePoint(this.onChange, this, 1, 1);
          this.pivot = new _ObservablePoint(this.onChange, this, 0, 0);
          this.skew = new _ObservablePoint(this.updateSkew, this, 0, 0);
          this._rotation = 0;
          this._cx = 1;
          this._sx = 0;
          this._cy = 0;
          this._sy = 1;
          this._localID = 0;
          this._currentLocalID = 0;
          this._worldID = 0;
          this._parentID = 0;
        }
        /** Called when a value changes. */


        Transform.prototype.onChange = function () {
          this._localID++;
        };
        /** Called when the skew or the rotation changes. */


        Transform.prototype.updateSkew = function () {
          this._cx = Math.cos(this._rotation + this.skew.y);
          this._sx = Math.sin(this._rotation + this.skew.y);
          this._cy = -Math.sin(this._rotation - this.skew.x); // cos, added PI/2

          this._sy = Math.cos(this._rotation - this.skew.x); // sin, added PI/2

          this._localID++;
        };

        Transform.prototype.toString = function () {
          return "[@pixi/math:Transform " + ("position=(" + this.position.x + ", " + this.position.y + ") ") + ("rotation=" + this.rotation + " ") + ("scale=(" + this.scale.x + ", " + this.scale.y + ") ") + ("skew=(" + this.skew.x + ", " + this.skew.y + ") ") + "]";
        };
        /** Updates the local transformation matrix. */


        Transform.prototype.updateLocalTransform = function () {
          var lt = this.localTransform;

          if (this._localID !== this._currentLocalID) {
            // get the matrix values of the displayobject based on its transform properties..
            lt.a = this._cx * this.scale.x;
            lt.b = this._sx * this.scale.x;
            lt.c = this._cy * this.scale.y;
            lt.d = this._sy * this.scale.y;
            lt.tx = this.position.x - (this.pivot.x * lt.a + this.pivot.y * lt.c);
            lt.ty = this.position.y - (this.pivot.x * lt.b + this.pivot.y * lt.d);
            this._currentLocalID = this._localID; // force an update..

            this._parentID = -1;
          }
        };
        /**
         * Updates the local and the world transformation matrices.
         *
         * @param parentTransform - The parent transform
         */


        Transform.prototype.updateTransform = function (parentTransform) {
          var lt = this.localTransform;

          if (this._localID !== this._currentLocalID) {
            // get the matrix values of the displayobject based on its transform properties..
            lt.a = this._cx * this.scale.x;
            lt.b = this._sx * this.scale.x;
            lt.c = this._cy * this.scale.y;
            lt.d = this._sy * this.scale.y;
            lt.tx = this.position.x - (this.pivot.x * lt.a + this.pivot.y * lt.c);
            lt.ty = this.position.y - (this.pivot.x * lt.b + this.pivot.y * lt.d);
            this._currentLocalID = this._localID; // force an update..

            this._parentID = -1;
          }

          if (this._parentID !== parentTransform._worldID) {
            // concat the parent matrix with the objects transform.
            var pt = parentTransform.worldTransform;
            var wt = this.worldTransform;
            wt.a = lt.a * pt.a + lt.b * pt.c;
            wt.b = lt.a * pt.b + lt.b * pt.d;
            wt.c = lt.c * pt.a + lt.d * pt.c;
            wt.d = lt.c * pt.b + lt.d * pt.d;
            wt.tx = lt.tx * pt.a + lt.ty * pt.c + pt.tx;
            wt.ty = lt.tx * pt.b + lt.ty * pt.d + pt.ty;
            this._parentID = parentTransform._worldID; // update the id of the transform..

            this._worldID++;
          }
        };
        /**
         * Decomposes a matrix and sets the transforms properties based on it.
         *
         * @param matrix - The matrix to decompose
         */


        Transform.prototype.setFromMatrix = function (matrix) {
          matrix.decompose(this);
          this._localID++;
        };

        Object.defineProperty(Transform.prototype, "rotation", {
          /** The rotation of the object in radians. */
          get: function get() {
            return this._rotation;
          },
          set: function set(value) {
            if (this._rotation !== value) {
              this._rotation = value;
              this.updateSkew();
            }
          },
          enumerable: false,
          configurable: true
        });
        /** A default (identity) transform. */

        Transform.IDENTITY = new Transform();
        return Transform;
      }();
      /***/

    },

    /***/
    81579:
    /*!******************************************************!*\
      !*** ./node_modules/@pixi/runner/dist/esm/runner.js ***!
      \******************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "Runner": function Runner() {
          return (
            /* binding */
            _Runner
          );
        }
        /* harmony export */

      });
      /*!
       * @pixi/runner - v6.2.0
       * Compiled Mon, 01 Nov 2021 16:52:10 UTC
       *
       * @pixi/runner is licensed under the MIT License.
       * http://www.opensource.org/licenses/mit-license
       */

      /**
       * A Runner is a highly performant and simple alternative to signals. Best used in situations
       * where events are dispatched to many objects at high frequency (say every frame!)
       *
       *
       * like a signal..
       * ```
       * import { Runner } from '@pixi/runner';
       *
       * const myObject = {
       *     loaded: new Runner('loaded')
       * }
       *
       * const listener = {
       *     loaded: function(){
       *         // thin
       *     }
       * }
       *
       * myObject.loaded.add(listener);
       *
       * myObject.loaded.emit();
       * ```
       *
       * Or for handling calling the same function on many items
       * ```
       * import { Runner } from '@pixi/runner';
       *
       * const myGame = {
       *     update: new Runner('update')
       * }
       *
       * const gameObject = {
       *     update: function(time){
       *         // update my gamey state
       *     }
       * }
       *
       * myGame.update.add(gameObject);
       *
       * myGame.update.emit(time);
       * ```
       *
       * @memberof PIXI
       */


      var _Runner =
      /** @class */
      function () {
        /**
         * @param name - The function name that will be executed on the listeners added to this Runner.
         */
        function Runner(name) {
          this.items = [];
          this._name = name;
          this._aliasCount = 0;
        }
        /**
         * Dispatch/Broadcast Runner to all listeners added to the queue.
         *
         * @param {...any} params - (optional) parameters to pass to each listener
         */


        Runner.prototype.emit = function (a0, a1, a2, a3, a4, a5, a6, a7) {
          if (arguments.length > 8) {
            throw new Error('max arguments reached');
          }

          var _a = this,
              name = _a.name,
              items = _a.items;

          this._aliasCount++;

          for (var i = 0, len = items.length; i < len; i++) {
            items[i][name](a0, a1, a2, a3, a4, a5, a6, a7);
          }

          if (items === this.items) {
            this._aliasCount--;
          }

          return this;
        };

        Runner.prototype.ensureNonAliasedItems = function () {
          if (this._aliasCount > 0 && this.items.length > 1) {
            this._aliasCount = 0;
            this.items = this.items.slice(0);
          }
        };
        /**
         * Add a listener to the Runner
         *
         * Runners do not need to have scope or functions passed to them.
         * All that is required is to pass the listening object and ensure that it has contains a function that has the same name
         * as the name provided to the Runner when it was created.
         *
         * Eg A listener passed to this Runner will require a 'complete' function.
         *
         * ```
         * import { Runner } from '@pixi/runner';
         *
         * const complete = new Runner('complete');
         * ```
         *
         * The scope used will be the object itself.
         *
         * @param {any} item - The object that will be listening.
         */


        Runner.prototype.add = function (item) {
          if (item[this._name]) {
            this.ensureNonAliasedItems();
            this.remove(item);
            this.items.push(item);
          }

          return this;
        };
        /**
         * Remove a single listener from the dispatch queue.
         *
         * @param {any} item - The listener that you would like to remove.
         */


        Runner.prototype.remove = function (item) {
          var index = this.items.indexOf(item);

          if (index !== -1) {
            this.ensureNonAliasedItems();
            this.items.splice(index, 1);
          }

          return this;
        };
        /**
         * Check to see if the listener is already in the Runner
         *
         * @param {any} item - The listener that you would like to check.
         */


        Runner.prototype.contains = function (item) {
          return this.items.indexOf(item) !== -1;
        };
        /** Remove all listeners from the Runner */


        Runner.prototype.removeAll = function () {
          this.ensureNonAliasedItems();
          this.items.length = 0;
          return this;
        };
        /** Remove all references, don't use after this. */


        Runner.prototype.destroy = function () {
          this.removeAll();
          this.items = null;
          this._name = null;
        };

        Object.defineProperty(Runner.prototype, "empty", {
          /**
           * `true` if there are no this Runner contains no listeners
           *
           * @readonly
           */
          get: function get() {
            return this.items.length === 0;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Runner.prototype, "name", {
          /**
           * The name of the runner.
           *
           * @readonly
           */
          get: function get() {
            return this._name;
          },
          enumerable: false,
          configurable: true
        });
        return Runner;
      }();

      Object.defineProperties(_Runner.prototype, {
        /**
         * Alias for `emit`
         * @memberof PIXI.Runner#
         * @method dispatch
         * @see PIXI.Runner#emit
         */
        dispatch: {
          value: _Runner.prototype.emit
        },

        /**
         * Alias for `emit`
         * @memberof PIXI.Runner#
         * @method run
         * @see PIXI.Runner#emit
         */
        run: {
          value: _Runner.prototype.emit
        }
      });
      /***/
    },

    /***/
    87703:
    /*!**********************************************************!*\
      !*** ./node_modules/@pixi/settings/dist/esm/settings.js ***!
      \**********************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "isMobile": function isMobile() {
          return (
            /* binding */
            _isMobile
          );
        },

        /* harmony export */
        "settings": function settings() {
          return (
            /* binding */
            _settings
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var ismobilejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ismobilejs */
      50190);
      /*!
       * @pixi/settings - v6.2.0
       * Compiled Mon, 01 Nov 2021 16:52:10 UTC
       *
       * @pixi/settings is licensed under the MIT License.
       * http://www.opensource.org/licenses/mit-license
       */
      // The ESM/CJS versions of ismobilejs only


      var _isMobile = (0, ismobilejs__WEBPACK_IMPORTED_MODULE_0__["default"])(self.navigator);
      /**
       * The maximum recommended texture units to use.
       * In theory the bigger the better, and for desktop we'll use as many as we can.
       * But some mobile devices slow down if there is to many branches in the shader.
       * So in practice there seems to be a sweet spot size that varies depending on the device.
       *
       * In v4, all mobile devices were limited to 4 texture units because for this.
       * In v5, we allow all texture units to be used on modern Apple or Android devices.
       *
       * @private
       * @param {number} max
       * @returns {number}
       */


      function maxRecommendedTextures(max) {
        var allowMax = true;

        if (_isMobile.tablet || _isMobile.phone) {
          if (_isMobile.apple.device) {
            var match = navigator.userAgent.match(/OS (\d+)_(\d+)?/);

            if (match) {
              var majorVersion = parseInt(match[1], 10); // Limit texture units on devices below iOS 11, which will be older hardware

              if (majorVersion < 11) {
                allowMax = false;
              }
            }
          }

          if (_isMobile.android.device) {
            var match = navigator.userAgent.match(/Android\s([0-9.]*)/);

            if (match) {
              var majorVersion = parseInt(match[1], 10); // Limit texture units on devices below Android 7 (Nougat), which will be older hardware

              if (majorVersion < 7) {
                allowMax = false;
              }
            }
          }
        }

        return allowMax ? max : 4;
      }
      /**
       * Uploading the same buffer multiple times in a single frame can cause performance issues.
       * Apparent on iOS so only check for that at the moment
       * This check may become more complex if this issue pops up elsewhere.
       *
       * @private
       * @returns {boolean}
       */


      function canUploadSameBuffer() {
        return !_isMobile.apple.device;
      }
      /*!
       * @pixi/constants - v6.2.0
       * Compiled Mon, 01 Nov 2021 16:52:10 UTC
       *
       * @pixi/constants is licensed under the MIT License.
       * http://www.opensource.org/licenses/mit-license
       */

      /**
       * Different types of environments for WebGL.
       *
       * @static
       * @memberof PIXI
       * @name ENV
       * @enum {number}
       * @property {number} WEBGL_LEGACY - Used for older v1 WebGL devices. PixiJS will aim to ensure compatibility
       *  with older / less advanced devices. If you experience unexplained flickering prefer this environment.
       * @property {number} WEBGL - Version 1 of WebGL
       * @property {number} WEBGL2 - Version 2 of WebGL
       */


      var ENV;

      (function (ENV) {
        ENV[ENV["WEBGL_LEGACY"] = 0] = "WEBGL_LEGACY";
        ENV[ENV["WEBGL"] = 1] = "WEBGL";
        ENV[ENV["WEBGL2"] = 2] = "WEBGL2";
      })(ENV || (ENV = {}));
      /**
       * Constant to identify the Renderer Type.
       *
       * @static
       * @memberof PIXI
       * @name RENDERER_TYPE
       * @enum {number}
       * @property {number} UNKNOWN - Unknown render type.
       * @property {number} WEBGL - WebGL render type.
       * @property {number} CANVAS - Canvas render type.
       */


      var RENDERER_TYPE;

      (function (RENDERER_TYPE) {
        RENDERER_TYPE[RENDERER_TYPE["UNKNOWN"] = 0] = "UNKNOWN";
        RENDERER_TYPE[RENDERER_TYPE["WEBGL"] = 1] = "WEBGL";
        RENDERER_TYPE[RENDERER_TYPE["CANVAS"] = 2] = "CANVAS";
      })(RENDERER_TYPE || (RENDERER_TYPE = {}));
      /**
       * Bitwise OR of masks that indicate the buffers to be cleared.
       *
       * @static
       * @memberof PIXI
       * @name BUFFER_BITS
       * @enum {number}
       * @property {number} COLOR - Indicates the buffers currently enabled for color writing.
       * @property {number} DEPTH - Indicates the depth buffer.
       * @property {number} STENCIL - Indicates the stencil buffer.
       */


      var BUFFER_BITS;

      (function (BUFFER_BITS) {
        BUFFER_BITS[BUFFER_BITS["COLOR"] = 16384] = "COLOR";
        BUFFER_BITS[BUFFER_BITS["DEPTH"] = 256] = "DEPTH";
        BUFFER_BITS[BUFFER_BITS["STENCIL"] = 1024] = "STENCIL";
      })(BUFFER_BITS || (BUFFER_BITS = {}));
      /**
       * Various blend modes supported by PIXI.
       *
       * IMPORTANT - The WebGL renderer only supports the NORMAL, ADD, MULTIPLY and SCREEN blend modes.
       * Anything else will silently act like NORMAL.
       *
       * @memberof PIXI
       * @name BLEND_MODES
       * @enum {number}
       * @property {number} NORMAL
       * @property {number} ADD
       * @property {number} MULTIPLY
       * @property {number} SCREEN
       * @property {number} OVERLAY
       * @property {number} DARKEN
       * @property {number} LIGHTEN
       * @property {number} COLOR_DODGE
       * @property {number} COLOR_BURN
       * @property {number} HARD_LIGHT
       * @property {number} SOFT_LIGHT
       * @property {number} DIFFERENCE
       * @property {number} EXCLUSION
       * @property {number} HUE
       * @property {number} SATURATION
       * @property {number} COLOR
       * @property {number} LUMINOSITY
       * @property {number} NORMAL_NPM
       * @property {number} ADD_NPM
       * @property {number} SCREEN_NPM
       * @property {number} NONE
       * @property {number} SRC_IN
       * @property {number} SRC_OUT
       * @property {number} SRC_ATOP
       * @property {number} DST_OVER
       * @property {number} DST_IN
       * @property {number} DST_OUT
       * @property {number} DST_ATOP
       * @property {number} SUBTRACT
       * @property {number} SRC_OVER
       * @property {number} ERASE
       * @property {number} XOR
       */


      var BLEND_MODES;

      (function (BLEND_MODES) {
        BLEND_MODES[BLEND_MODES["NORMAL"] = 0] = "NORMAL";
        BLEND_MODES[BLEND_MODES["ADD"] = 1] = "ADD";
        BLEND_MODES[BLEND_MODES["MULTIPLY"] = 2] = "MULTIPLY";
        BLEND_MODES[BLEND_MODES["SCREEN"] = 3] = "SCREEN";
        BLEND_MODES[BLEND_MODES["OVERLAY"] = 4] = "OVERLAY";
        BLEND_MODES[BLEND_MODES["DARKEN"] = 5] = "DARKEN";
        BLEND_MODES[BLEND_MODES["LIGHTEN"] = 6] = "LIGHTEN";
        BLEND_MODES[BLEND_MODES["COLOR_DODGE"] = 7] = "COLOR_DODGE";
        BLEND_MODES[BLEND_MODES["COLOR_BURN"] = 8] = "COLOR_BURN";
        BLEND_MODES[BLEND_MODES["HARD_LIGHT"] = 9] = "HARD_LIGHT";
        BLEND_MODES[BLEND_MODES["SOFT_LIGHT"] = 10] = "SOFT_LIGHT";
        BLEND_MODES[BLEND_MODES["DIFFERENCE"] = 11] = "DIFFERENCE";
        BLEND_MODES[BLEND_MODES["EXCLUSION"] = 12] = "EXCLUSION";
        BLEND_MODES[BLEND_MODES["HUE"] = 13] = "HUE";
        BLEND_MODES[BLEND_MODES["SATURATION"] = 14] = "SATURATION";
        BLEND_MODES[BLEND_MODES["COLOR"] = 15] = "COLOR";
        BLEND_MODES[BLEND_MODES["LUMINOSITY"] = 16] = "LUMINOSITY";
        BLEND_MODES[BLEND_MODES["NORMAL_NPM"] = 17] = "NORMAL_NPM";
        BLEND_MODES[BLEND_MODES["ADD_NPM"] = 18] = "ADD_NPM";
        BLEND_MODES[BLEND_MODES["SCREEN_NPM"] = 19] = "SCREEN_NPM";
        BLEND_MODES[BLEND_MODES["NONE"] = 20] = "NONE";
        BLEND_MODES[BLEND_MODES["SRC_OVER"] = 0] = "SRC_OVER";
        BLEND_MODES[BLEND_MODES["SRC_IN"] = 21] = "SRC_IN";
        BLEND_MODES[BLEND_MODES["SRC_OUT"] = 22] = "SRC_OUT";
        BLEND_MODES[BLEND_MODES["SRC_ATOP"] = 23] = "SRC_ATOP";
        BLEND_MODES[BLEND_MODES["DST_OVER"] = 24] = "DST_OVER";
        BLEND_MODES[BLEND_MODES["DST_IN"] = 25] = "DST_IN";
        BLEND_MODES[BLEND_MODES["DST_OUT"] = 26] = "DST_OUT";
        BLEND_MODES[BLEND_MODES["DST_ATOP"] = 27] = "DST_ATOP";
        BLEND_MODES[BLEND_MODES["ERASE"] = 26] = "ERASE";
        BLEND_MODES[BLEND_MODES["SUBTRACT"] = 28] = "SUBTRACT";
        BLEND_MODES[BLEND_MODES["XOR"] = 29] = "XOR";
      })(BLEND_MODES || (BLEND_MODES = {}));
      /**
       * Various webgl draw modes. These can be used to specify which GL drawMode to use
       * under certain situations and renderers.
       *
       * @memberof PIXI
       * @static
       * @name DRAW_MODES
       * @enum {number}
       * @property {number} POINTS
       * @property {number} LINES
       * @property {number} LINE_LOOP
       * @property {number} LINE_STRIP
       * @property {number} TRIANGLES
       * @property {number} TRIANGLE_STRIP
       * @property {number} TRIANGLE_FAN
       */


      var DRAW_MODES;

      (function (DRAW_MODES) {
        DRAW_MODES[DRAW_MODES["POINTS"] = 0] = "POINTS";
        DRAW_MODES[DRAW_MODES["LINES"] = 1] = "LINES";
        DRAW_MODES[DRAW_MODES["LINE_LOOP"] = 2] = "LINE_LOOP";
        DRAW_MODES[DRAW_MODES["LINE_STRIP"] = 3] = "LINE_STRIP";
        DRAW_MODES[DRAW_MODES["TRIANGLES"] = 4] = "TRIANGLES";
        DRAW_MODES[DRAW_MODES["TRIANGLE_STRIP"] = 5] = "TRIANGLE_STRIP";
        DRAW_MODES[DRAW_MODES["TRIANGLE_FAN"] = 6] = "TRIANGLE_FAN";
      })(DRAW_MODES || (DRAW_MODES = {}));
      /**
       * Various GL texture/resources formats.
       *
       * @memberof PIXI
       * @static
       * @name FORMATS
       * @enum {number}
       * @property {number} RGBA=6408
       * @property {number} RGB=6407
       * @property {number} RG=33319
       * @property {number} RED=6403
       * @property {number} RGBA_INTEGER=36249
       * @property {number} RGB_INTEGER=36248
       * @property {number} RG_INTEGER=33320
       * @property {number} RED_INTEGER=36244
       * @property {number} ALPHA=6406
       * @property {number} LUMINANCE=6409
       * @property {number} LUMINANCE_ALPHA=6410
       * @property {number} DEPTH_COMPONENT=6402
       * @property {number} DEPTH_STENCIL=34041
       */


      var FORMATS;

      (function (FORMATS) {
        FORMATS[FORMATS["RGBA"] = 6408] = "RGBA";
        FORMATS[FORMATS["RGB"] = 6407] = "RGB";
        FORMATS[FORMATS["RG"] = 33319] = "RG";
        FORMATS[FORMATS["RED"] = 6403] = "RED";
        FORMATS[FORMATS["RGBA_INTEGER"] = 36249] = "RGBA_INTEGER";
        FORMATS[FORMATS["RGB_INTEGER"] = 36248] = "RGB_INTEGER";
        FORMATS[FORMATS["RG_INTEGER"] = 33320] = "RG_INTEGER";
        FORMATS[FORMATS["RED_INTEGER"] = 36244] = "RED_INTEGER";
        FORMATS[FORMATS["ALPHA"] = 6406] = "ALPHA";
        FORMATS[FORMATS["LUMINANCE"] = 6409] = "LUMINANCE";
        FORMATS[FORMATS["LUMINANCE_ALPHA"] = 6410] = "LUMINANCE_ALPHA";
        FORMATS[FORMATS["DEPTH_COMPONENT"] = 6402] = "DEPTH_COMPONENT";
        FORMATS[FORMATS["DEPTH_STENCIL"] = 34041] = "DEPTH_STENCIL";
      })(FORMATS || (FORMATS = {}));
      /**
       * Various GL target types.
       *
       * @memberof PIXI
       * @static
       * @name TARGETS
       * @enum {number}
       * @property {number} TEXTURE_2D=3553
       * @property {number} TEXTURE_CUBE_MAP=34067
       * @property {number} TEXTURE_2D_ARRAY=35866
       * @property {number} TEXTURE_CUBE_MAP_POSITIVE_X=34069
       * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_X=34070
       * @property {number} TEXTURE_CUBE_MAP_POSITIVE_Y=34071
       * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_Y=34072
       * @property {number} TEXTURE_CUBE_MAP_POSITIVE_Z=34073
       * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_Z=34074
       */


      var TARGETS;

      (function (TARGETS) {
        TARGETS[TARGETS["TEXTURE_2D"] = 3553] = "TEXTURE_2D";
        TARGETS[TARGETS["TEXTURE_CUBE_MAP"] = 34067] = "TEXTURE_CUBE_MAP";
        TARGETS[TARGETS["TEXTURE_2D_ARRAY"] = 35866] = "TEXTURE_2D_ARRAY";
        TARGETS[TARGETS["TEXTURE_CUBE_MAP_POSITIVE_X"] = 34069] = "TEXTURE_CUBE_MAP_POSITIVE_X";
        TARGETS[TARGETS["TEXTURE_CUBE_MAP_NEGATIVE_X"] = 34070] = "TEXTURE_CUBE_MAP_NEGATIVE_X";
        TARGETS[TARGETS["TEXTURE_CUBE_MAP_POSITIVE_Y"] = 34071] = "TEXTURE_CUBE_MAP_POSITIVE_Y";
        TARGETS[TARGETS["TEXTURE_CUBE_MAP_NEGATIVE_Y"] = 34072] = "TEXTURE_CUBE_MAP_NEGATIVE_Y";
        TARGETS[TARGETS["TEXTURE_CUBE_MAP_POSITIVE_Z"] = 34073] = "TEXTURE_CUBE_MAP_POSITIVE_Z";
        TARGETS[TARGETS["TEXTURE_CUBE_MAP_NEGATIVE_Z"] = 34074] = "TEXTURE_CUBE_MAP_NEGATIVE_Z";
      })(TARGETS || (TARGETS = {}));
      /**
       * Various GL data format types.
       *
       * @memberof PIXI
       * @static
       * @name TYPES
       * @enum {number}
       * @property {number} UNSIGNED_BYTE=5121
       * @property {number} UNSIGNED_SHORT=5123
       * @property {number} UNSIGNED_SHORT_5_6_5=33635
       * @property {number} UNSIGNED_SHORT_4_4_4_4=32819
       * @property {number} UNSIGNED_SHORT_5_5_5_1=32820
       * @property {number} UNSIGNED_INT=5125
       * @property {number} UNSIGNED_INT_10F_11F_11F_REV=35899
       * @property {number} UNSIGNED_INT_2_10_10_10_REV=33640
       * @property {number} UNSIGNED_INT_24_8=34042
       * @property {number} UNSIGNED_INT_5_9_9_9_REV=35902
       * @property {number} BYTE=5120
       * @property {number} SHORT=5122
       * @property {number} INT=5124
       * @property {number} FLOAT=5126
       * @property {number} FLOAT_32_UNSIGNED_INT_24_8_REV=36269
       * @property {number} HALF_FLOAT=36193
       */


      var TYPES;

      (function (TYPES) {
        TYPES[TYPES["UNSIGNED_BYTE"] = 5121] = "UNSIGNED_BYTE";
        TYPES[TYPES["UNSIGNED_SHORT"] = 5123] = "UNSIGNED_SHORT";
        TYPES[TYPES["UNSIGNED_SHORT_5_6_5"] = 33635] = "UNSIGNED_SHORT_5_6_5";
        TYPES[TYPES["UNSIGNED_SHORT_4_4_4_4"] = 32819] = "UNSIGNED_SHORT_4_4_4_4";
        TYPES[TYPES["UNSIGNED_SHORT_5_5_5_1"] = 32820] = "UNSIGNED_SHORT_5_5_5_1";
        TYPES[TYPES["UNSIGNED_INT"] = 5125] = "UNSIGNED_INT";
        TYPES[TYPES["UNSIGNED_INT_10F_11F_11F_REV"] = 35899] = "UNSIGNED_INT_10F_11F_11F_REV";
        TYPES[TYPES["UNSIGNED_INT_2_10_10_10_REV"] = 33640] = "UNSIGNED_INT_2_10_10_10_REV";
        TYPES[TYPES["UNSIGNED_INT_24_8"] = 34042] = "UNSIGNED_INT_24_8";
        TYPES[TYPES["UNSIGNED_INT_5_9_9_9_REV"] = 35902] = "UNSIGNED_INT_5_9_9_9_REV";
        TYPES[TYPES["BYTE"] = 5120] = "BYTE";
        TYPES[TYPES["SHORT"] = 5122] = "SHORT";
        TYPES[TYPES["INT"] = 5124] = "INT";
        TYPES[TYPES["FLOAT"] = 5126] = "FLOAT";
        TYPES[TYPES["FLOAT_32_UNSIGNED_INT_24_8_REV"] = 36269] = "FLOAT_32_UNSIGNED_INT_24_8_REV";
        TYPES[TYPES["HALF_FLOAT"] = 36193] = "HALF_FLOAT";
      })(TYPES || (TYPES = {}));
      /**
       * Various sampler types. Correspond to `sampler`, `isampler`, `usampler` GLSL types respectively.
       * WebGL1 works only with FLOAT.
       *
       * @memberof PIXI
       * @static
       * @name SAMPLER_TYPES
       * @enum {number}
       * @property {number} FLOAT=0
       * @property {number} INT=1
       * @property {number} UINT=2
       */


      var SAMPLER_TYPES;

      (function (SAMPLER_TYPES) {
        SAMPLER_TYPES[SAMPLER_TYPES["FLOAT"] = 0] = "FLOAT";
        SAMPLER_TYPES[SAMPLER_TYPES["INT"] = 1] = "INT";
        SAMPLER_TYPES[SAMPLER_TYPES["UINT"] = 2] = "UINT";
      })(SAMPLER_TYPES || (SAMPLER_TYPES = {}));
      /**
       * The scale modes that are supported by pixi.
       *
       * The {@link PIXI.settings.SCALE_MODE} scale mode affects the default scaling mode of future operations.
       * It can be re-assigned to either LINEAR or NEAREST, depending upon suitability.
       *
       * @memberof PIXI
       * @static
       * @name SCALE_MODES
       * @enum {number}
       * @property {number} LINEAR Smooth scaling
       * @property {number} NEAREST Pixelating scaling
       */


      var SCALE_MODES;

      (function (SCALE_MODES) {
        SCALE_MODES[SCALE_MODES["NEAREST"] = 0] = "NEAREST";
        SCALE_MODES[SCALE_MODES["LINEAR"] = 1] = "LINEAR";
      })(SCALE_MODES || (SCALE_MODES = {}));
      /**
       * The wrap modes that are supported by pixi.
       *
       * The {@link PIXI.settings.WRAP_MODE} wrap mode affects the default wrapping mode of future operations.
       * It can be re-assigned to either CLAMP or REPEAT, depending upon suitability.
       * If the texture is non power of two then clamp will be used regardless as WebGL can
       * only use REPEAT if the texture is po2.
       *
       * This property only affects WebGL.
       *
       * @name WRAP_MODES
       * @memberof PIXI
       * @static
       * @enum {number}
       * @property {number} CLAMP - The textures uvs are clamped
       * @property {number} REPEAT - The texture uvs tile and repeat
       * @property {number} MIRRORED_REPEAT - The texture uvs tile and repeat with mirroring
       */


      var WRAP_MODES;

      (function (WRAP_MODES) {
        WRAP_MODES[WRAP_MODES["CLAMP"] = 33071] = "CLAMP";
        WRAP_MODES[WRAP_MODES["REPEAT"] = 10497] = "REPEAT";
        WRAP_MODES[WRAP_MODES["MIRRORED_REPEAT"] = 33648] = "MIRRORED_REPEAT";
      })(WRAP_MODES || (WRAP_MODES = {}));
      /**
       * Mipmap filtering modes that are supported by pixi.
       *
       * The {@link PIXI.settings.MIPMAP_TEXTURES} affects default texture filtering.
       * Mipmaps are generated for a baseTexture if its `mipmap` field is `ON`,
       * or its `POW2` and texture dimensions are powers of 2.
       * Due to platform restriction, `ON` option will work like `POW2` for webgl-1.
       *
       * This property only affects WebGL.
       *
       * @name MIPMAP_MODES
       * @memberof PIXI
       * @static
       * @enum {number}
       * @property {number} OFF - No mipmaps
       * @property {number} POW2 - Generate mipmaps if texture dimensions are pow2
       * @property {number} ON - Always generate mipmaps
       * @property {number} ON_MANUAL - Use mipmaps, but do not auto-generate them; this is used with a resource
       *   that supports buffering each level-of-detail.
       */


      var MIPMAP_MODES;

      (function (MIPMAP_MODES) {
        MIPMAP_MODES[MIPMAP_MODES["OFF"] = 0] = "OFF";
        MIPMAP_MODES[MIPMAP_MODES["POW2"] = 1] = "POW2";
        MIPMAP_MODES[MIPMAP_MODES["ON"] = 2] = "ON";
        MIPMAP_MODES[MIPMAP_MODES["ON_MANUAL"] = 3] = "ON_MANUAL";
      })(MIPMAP_MODES || (MIPMAP_MODES = {}));
      /**
       * How to treat textures with premultiplied alpha
       *
       * @name ALPHA_MODES
       * @memberof PIXI
       * @static
       * @enum {number}
       * @property {number} NO_PREMULTIPLIED_ALPHA - Source is not premultiplied, leave it like that.
       *  Option for compressed and data textures that are created from typed arrays.
       * @property {number} PREMULTIPLY_ON_UPLOAD - Source is not premultiplied, premultiply on upload.
       *  Default option, used for all loaded images.
       * @property {number} PREMULTIPLIED_ALPHA - Source is already premultiplied
       *  Example: spine atlases with `_pma` suffix.
       * @property {number} NPM - Alias for NO_PREMULTIPLIED_ALPHA.
       * @property {number} UNPACK - Default option, alias for PREMULTIPLY_ON_UPLOAD.
       * @property {number} PMA - Alias for PREMULTIPLIED_ALPHA.
       */


      var ALPHA_MODES;

      (function (ALPHA_MODES) {
        ALPHA_MODES[ALPHA_MODES["NPM"] = 0] = "NPM";
        ALPHA_MODES[ALPHA_MODES["UNPACK"] = 1] = "UNPACK";
        ALPHA_MODES[ALPHA_MODES["PMA"] = 2] = "PMA";
        ALPHA_MODES[ALPHA_MODES["NO_PREMULTIPLIED_ALPHA"] = 0] = "NO_PREMULTIPLIED_ALPHA";
        ALPHA_MODES[ALPHA_MODES["PREMULTIPLY_ON_UPLOAD"] = 1] = "PREMULTIPLY_ON_UPLOAD";
        ALPHA_MODES[ALPHA_MODES["PREMULTIPLY_ALPHA"] = 2] = "PREMULTIPLY_ALPHA";
        ALPHA_MODES[ALPHA_MODES["PREMULTIPLIED_ALPHA"] = 2] = "PREMULTIPLIED_ALPHA";
      })(ALPHA_MODES || (ALPHA_MODES = {}));
      /**
       * Configure whether filter textures are cleared after binding.
       *
       * Filter textures need not be cleared if the filter does not use pixel blending. {@link CLEAR_MODES.BLIT} will detect
       * this and skip clearing as an optimization.
       *
       * @name CLEAR_MODES
       * @memberof PIXI
       * @static
       * @enum {number}
       * @property {number} BLEND - Do not clear the filter texture. The filter's output will blend on top of the output texture.
       * @property {number} CLEAR - Always clear the filter texture.
       * @property {number} BLIT - Clear only if {@link FilterSystem.forceClear} is set or if the filter uses pixel blending.
       * @property {number} NO - Alias for BLEND, same as `false` in earlier versions
       * @property {number} YES - Alias for CLEAR, same as `true` in earlier versions
       * @property {number} AUTO - Alias for BLIT
       */


      var CLEAR_MODES;

      (function (CLEAR_MODES) {
        CLEAR_MODES[CLEAR_MODES["NO"] = 0] = "NO";
        CLEAR_MODES[CLEAR_MODES["YES"] = 1] = "YES";
        CLEAR_MODES[CLEAR_MODES["AUTO"] = 2] = "AUTO";
        CLEAR_MODES[CLEAR_MODES["BLEND"] = 0] = "BLEND";
        CLEAR_MODES[CLEAR_MODES["CLEAR"] = 1] = "CLEAR";
        CLEAR_MODES[CLEAR_MODES["BLIT"] = 2] = "BLIT";
      })(CLEAR_MODES || (CLEAR_MODES = {}));
      /**
       * The gc modes that are supported by pixi.
       *
       * The {@link PIXI.settings.GC_MODE} Garbage Collection mode for PixiJS textures is AUTO
       * If set to GC_MODE, the renderer will occasionally check textures usage. If they are not
       * used for a specified period of time they will be removed from the GPU. They will of course
       * be uploaded again when they are required. This is a silent behind the scenes process that
       * should ensure that the GPU does not  get filled up.
       *
       * Handy for mobile devices!
       * This property only affects WebGL.
       *
       * @name GC_MODES
       * @enum {number}
       * @static
       * @memberof PIXI
       * @property {number} AUTO - Garbage collection will happen periodically automatically
       * @property {number} MANUAL - Garbage collection will need to be called manually
       */


      var GC_MODES;

      (function (GC_MODES) {
        GC_MODES[GC_MODES["AUTO"] = 0] = "AUTO";
        GC_MODES[GC_MODES["MANUAL"] = 1] = "MANUAL";
      })(GC_MODES || (GC_MODES = {}));
      /**
       * Constants that specify float precision in shaders.
       *
       * @name PRECISION
       * @memberof PIXI
       * @constant
       * @static
       * @enum {string}
       * @property {string} LOW='lowp'
       * @property {string} MEDIUM='mediump'
       * @property {string} HIGH='highp'
       */


      var PRECISION;

      (function (PRECISION) {
        PRECISION["LOW"] = "lowp";
        PRECISION["MEDIUM"] = "mediump";
        PRECISION["HIGH"] = "highp";
      })(PRECISION || (PRECISION = {}));
      /**
       * Constants for mask implementations.
       * We use `type` suffix because it leads to very different behaviours
       *
       * @name MASK_TYPES
       * @memberof PIXI
       * @static
       * @enum {number}
       * @property {number} NONE - Mask is ignored
       * @property {number} SCISSOR - Scissor mask, rectangle on screen, cheap
       * @property {number} STENCIL - Stencil mask, 1-bit, medium, works only if renderer supports stencil
       * @property {number} SPRITE - Mask that uses SpriteMaskFilter, uses temporary RenderTexture
       */


      var MASK_TYPES;

      (function (MASK_TYPES) {
        MASK_TYPES[MASK_TYPES["NONE"] = 0] = "NONE";
        MASK_TYPES[MASK_TYPES["SCISSOR"] = 1] = "SCISSOR";
        MASK_TYPES[MASK_TYPES["STENCIL"] = 2] = "STENCIL";
        MASK_TYPES[MASK_TYPES["SPRITE"] = 3] = "SPRITE";
      })(MASK_TYPES || (MASK_TYPES = {}));
      /**
       * Constants for multi-sampling antialiasing.
       *
       * @see PIXI.Framebuffer#multisample
       *
       * @name MSAA_QUALITY
       * @memberof PIXI
       * @static
       * @enum {number}
       * @property {number} NONE - No multisampling for this renderTexture
       * @property {number} LOW - Try 2 samples
       * @property {number} MEDIUM - Try 4 samples
       * @property {number} HIGH - Try 8 samples
       */


      var MSAA_QUALITY;

      (function (MSAA_QUALITY) {
        MSAA_QUALITY[MSAA_QUALITY["NONE"] = 0] = "NONE";
        MSAA_QUALITY[MSAA_QUALITY["LOW"] = 2] = "LOW";
        MSAA_QUALITY[MSAA_QUALITY["MEDIUM"] = 4] = "MEDIUM";
        MSAA_QUALITY[MSAA_QUALITY["HIGH"] = 8] = "HIGH";
      })(MSAA_QUALITY || (MSAA_QUALITY = {}));
      /**
       * Constants for various buffer types in Pixi
       *
       * @see PIXI.BUFFER_TYPE
       *
       * @name BUFFER_TYPE
       * @memberof PIXI
       * @static
       * @enum {number}
       * @property {number} ELEMENT_ARRAY_BUFFER - buffer type for using as an index buffer
       * @property {number} ARRAY_BUFFER - buffer type for using attribute data
       * @property {number} UNIFORM_BUFFER - the buffer type is for uniform buffer objects
       */


      var BUFFER_TYPE;

      (function (BUFFER_TYPE) {
        BUFFER_TYPE[BUFFER_TYPE["ELEMENT_ARRAY_BUFFER"] = 34963] = "ELEMENT_ARRAY_BUFFER";
        BUFFER_TYPE[BUFFER_TYPE["ARRAY_BUFFER"] = 34962] = "ARRAY_BUFFER"; // NOT YET SUPPORTED

        BUFFER_TYPE[BUFFER_TYPE["UNIFORM_BUFFER"] = 35345] = "UNIFORM_BUFFER";
      })(BUFFER_TYPE || (BUFFER_TYPE = {}));
      /**
       * User's customizable globals for overriding the default PIXI settings, such
       * as a renderer's default resolution, framerate, float precision, etc.
       * @example
       * // Use the native window resolution as the default resolution
       * // will support high-density displays when rendering
       * PIXI.settings.RESOLUTION = window.devicePixelRatio;
       *
       * // Disable interpolation when scaling, will make texture be pixelated
       * PIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST;
       * @namespace PIXI.settings
       */


      var _settings = {
        /**
         * If set to true WebGL will attempt make textures mimpaped by default.
         * Mipmapping will only succeed if the base texture uploaded has power of two dimensions.
         *
         * @static
         * @name MIPMAP_TEXTURES
         * @memberof PIXI.settings
         * @type {PIXI.MIPMAP_MODES}
         * @default PIXI.MIPMAP_MODES.POW2
         */
        MIPMAP_TEXTURES: MIPMAP_MODES.POW2,

        /**
         * Default anisotropic filtering level of textures.
         * Usually from 0 to 16
         *
         * @static
         * @name ANISOTROPIC_LEVEL
         * @memberof PIXI.settings
         * @type {number}
         * @default 0
         */
        ANISOTROPIC_LEVEL: 0,

        /**
         * Default resolution / device pixel ratio of the renderer.
         *
         * @static
         * @name RESOLUTION
         * @memberof PIXI.settings
         * @type {number}
         * @default 1
         */
        RESOLUTION: 1,

        /**
         * Default filter resolution.
         *
         * @static
         * @name FILTER_RESOLUTION
         * @memberof PIXI.settings
         * @type {number}
         * @default 1
         */
        FILTER_RESOLUTION: 1,

        /**
         * Default filter samples.
         *
         * @static
         * @name FILTER_MULTISAMPLE
         * @memberof PIXI.settings
         * @type {PIXI.MSAA_QUALITY}
         * @default PIXI.MSAA_QUALITY.NONE
         */
        FILTER_MULTISAMPLE: MSAA_QUALITY.NONE,

        /**
         * The maximum textures that this device supports.
         *
         * @static
         * @name SPRITE_MAX_TEXTURES
         * @memberof PIXI.settings
         * @type {number}
         * @default 32
         */
        SPRITE_MAX_TEXTURES: maxRecommendedTextures(32),
        // TODO: maybe change to SPRITE.BATCH_SIZE: 2000
        // TODO: maybe add PARTICLE.BATCH_SIZE: 15000

        /**
         * The default sprite batch size.
         *
         * The default aims to balance desktop and mobile devices.
         *
         * @static
         * @name SPRITE_BATCH_SIZE
         * @memberof PIXI.settings
         * @type {number}
         * @default 4096
         */
        SPRITE_BATCH_SIZE: 4096,

        /**
         * The default render options if none are supplied to {@link PIXI.Renderer}
         * or {@link PIXI.CanvasRenderer}.
         *
         * @static
         * @name RENDER_OPTIONS
         * @memberof PIXI.settings
         * @type {object}
         * @property {HTMLCanvasElement} view=null
         * @property {boolean} antialias=false
         * @property {boolean} autoDensity=false
         * @property {boolean} useContextAlpha=true
         * @property {number} backgroundColor=0x000000
         * @property {number} backgroundAlpha=1
         * @property {boolean} clearBeforeRender=true
         * @property {boolean} preserveDrawingBuffer=false
         * @property {number} width=800
         * @property {number} height=600
         * @property {boolean} legacy=false
         */
        RENDER_OPTIONS: {
          view: null,
          antialias: false,
          autoDensity: false,
          backgroundColor: 0x000000,
          backgroundAlpha: 1,
          useContextAlpha: true,
          clearBeforeRender: true,
          preserveDrawingBuffer: false,
          width: 800,
          height: 600,
          legacy: false
        },

        /**
         * Default Garbage Collection mode.
         *
         * @static
         * @name GC_MODE
         * @memberof PIXI.settings
         * @type {PIXI.GC_MODES}
         * @default PIXI.GC_MODES.AUTO
         */
        GC_MODE: GC_MODES.AUTO,

        /**
         * Default Garbage Collection max idle.
         *
         * @static
         * @name GC_MAX_IDLE
         * @memberof PIXI.settings
         * @type {number}
         * @default 3600
         */
        GC_MAX_IDLE: 60 * 60,

        /**
         * Default Garbage Collection maximum check count.
         *
         * @static
         * @name GC_MAX_CHECK_COUNT
         * @memberof PIXI.settings
         * @type {number}
         * @default 600
         */
        GC_MAX_CHECK_COUNT: 60 * 10,

        /**
         * Default wrap modes that are supported by pixi.
         *
         * @static
         * @name WRAP_MODE
         * @memberof PIXI.settings
         * @type {PIXI.WRAP_MODES}
         * @default PIXI.WRAP_MODES.CLAMP
         */
        WRAP_MODE: WRAP_MODES.CLAMP,

        /**
         * Default scale mode for textures.
         *
         * @static
         * @name SCALE_MODE
         * @memberof PIXI.settings
         * @type {PIXI.SCALE_MODES}
         * @default PIXI.SCALE_MODES.LINEAR
         */
        SCALE_MODE: SCALE_MODES.LINEAR,

        /**
         * Default specify float precision in vertex shader.
         *
         * @static
         * @name PRECISION_VERTEX
         * @memberof PIXI.settings
         * @type {PIXI.PRECISION}
         * @default PIXI.PRECISION.HIGH
         */
        PRECISION_VERTEX: PRECISION.HIGH,

        /**
         * Default specify float precision in fragment shader.
         * iOS is best set at highp due to https://github.com/pixijs/pixi.js/issues/3742
         *
         * @static
         * @name PRECISION_FRAGMENT
         * @memberof PIXI.settings
         * @type {PIXI.PRECISION}
         * @default PIXI.PRECISION.MEDIUM
         */
        PRECISION_FRAGMENT: _isMobile.apple.device ? PRECISION.HIGH : PRECISION.MEDIUM,

        /**
         * Can we upload the same buffer in a single frame?
         *
         * @static
         * @name CAN_UPLOAD_SAME_BUFFER
         * @memberof PIXI.settings
         * @type {boolean}
         */
        CAN_UPLOAD_SAME_BUFFER: canUploadSameBuffer(),

        /**
         * Enables bitmap creation before image load. This feature is experimental.
         *
         * @static
         * @name CREATE_IMAGE_BITMAP
         * @memberof PIXI.settings
         * @type {boolean}
         * @default false
         */
        CREATE_IMAGE_BITMAP: false,

        /**
         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.
         * Advantages can include sharper image quality (like text) and faster rendering on canvas.
         * The main disadvantage is movement of objects may appear less smooth.
         *
         * @static
         * @constant
         * @memberof PIXI.settings
         * @type {boolean}
         * @default false
         */
        ROUND_PIXELS: false
      };
      /***/
    },

    /***/
    96385:
    /*!******************************************************!*\
      !*** ./node_modules/@pixi/ticker/dist/esm/ticker.js ***!
      \******************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "Ticker": function Ticker() {
          return (
            /* binding */
            _Ticker
          );
        },

        /* harmony export */
        "TickerPlugin": function TickerPlugin() {
          return (
            /* binding */
            _TickerPlugin
          );
        },

        /* harmony export */
        "UPDATE_PRIORITY": function UPDATE_PRIORITY() {
          return (
            /* binding */
            _UPDATE_PRIORITY
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _pixi_settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @pixi/settings */
      87703);
      /*!
       * @pixi/ticker - v6.2.0
       * Compiled Mon, 01 Nov 2021 16:52:10 UTC
       *
       * @pixi/ticker is licensed under the MIT License.
       * http://www.opensource.org/licenses/mit-license
       */

      /**
       * Target frames per millisecond.
       *
       * @static
       * @name TARGET_FPMS
       * @memberof PIXI.settings
       * @type {number}
       * @default 0.06
       */


      _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.TARGET_FPMS = 0.06;
      /**
       * Represents the update priorities used by internal PIXI classes when registered with
       * the {@link PIXI.Ticker} object. Higher priority items are updated first and lower
       * priority items, such as render, should go later.
       *
       * @static
       * @constant
       * @name UPDATE_PRIORITY
       * @memberof PIXI
       * @enum {number}
       * @property {number} INTERACTION=50 Highest priority, used for {@link PIXI.InteractionManager}
       * @property {number} HIGH=25 High priority updating, {@link PIXI.VideoBaseTexture} and {@link PIXI.AnimatedSprite}
       * @property {number} NORMAL=0 Default priority for ticker events, see {@link PIXI.Ticker#add}.
       * @property {number} LOW=-25 Low priority used for {@link PIXI.Application} rendering.
       * @property {number} UTILITY=-50 Lowest priority used for {@link PIXI.BasePrepare} utility.
       */

      var _UPDATE_PRIORITY;

      (function (UPDATE_PRIORITY) {
        UPDATE_PRIORITY[UPDATE_PRIORITY["INTERACTION"] = 50] = "INTERACTION";
        UPDATE_PRIORITY[UPDATE_PRIORITY["HIGH"] = 25] = "HIGH";
        UPDATE_PRIORITY[UPDATE_PRIORITY["NORMAL"] = 0] = "NORMAL";
        UPDATE_PRIORITY[UPDATE_PRIORITY["LOW"] = -25] = "LOW";
        UPDATE_PRIORITY[UPDATE_PRIORITY["UTILITY"] = -50] = "UTILITY";
      })(_UPDATE_PRIORITY || (_UPDATE_PRIORITY = {}));
      /**
       * Internal class for handling the priority sorting of ticker handlers.
       *
       * @private
       * @class
       * @memberof PIXI
       */


      var TickerListener =
      /** @class */
      function () {
        /**
         * Constructor
         * @private
         * @param fn - The listener function to be added for one update
         * @param context - The listener context
         * @param priority - The priority for emitting
         * @param once - If the handler should fire once
         */
        function TickerListener(fn, context, priority, once) {
          if (context === void 0) {
            context = null;
          }

          if (priority === void 0) {
            priority = 0;
          }

          if (once === void 0) {
            once = false;
          }
          /** The next item in chain. */


          this.next = null;
          /** The previous item in chain. */

          this.previous = null;
          /** `true` if this listener has been destroyed already. */

          this._destroyed = false;
          this.fn = fn;
          this.context = context;
          this.priority = priority;
          this.once = once;
        }
        /**
         * Simple compare function to figure out if a function and context match.
         * @private
         * @param fn - The listener function to be added for one update
         * @param context - The listener context
         * @return `true` if the listener match the arguments
         */


        TickerListener.prototype.match = function (fn, context) {
          if (context === void 0) {
            context = null;
          }

          return this.fn === fn && this.context === context;
        };
        /**
         * Emit by calling the current function.
         * @private
         * @param deltaTime - time since the last emit.
         * @return Next ticker
         */


        TickerListener.prototype.emit = function (deltaTime) {
          if (this.fn) {
            if (this.context) {
              this.fn.call(this.context, deltaTime);
            } else {
              this.fn(deltaTime);
            }
          }

          var redirect = this.next;

          if (this.once) {
            this.destroy(true);
          } // Soft-destroying should remove
          // the next reference


          if (this._destroyed) {
            this.next = null;
          }

          return redirect;
        };
        /**
         * Connect to the list.
         * @private
         * @param previous - Input node, previous listener
         */


        TickerListener.prototype.connect = function (previous) {
          this.previous = previous;

          if (previous.next) {
            previous.next.previous = this;
          }

          this.next = previous.next;
          previous.next = this;
        };
        /**
         * Destroy and don't use after this.
         * @private
         * @param hard - `true` to remove the `next` reference, this
         *        is considered a hard destroy. Soft destroy maintains the next reference.
         * @return The listener to redirect while emitting or removing.
         */


        TickerListener.prototype.destroy = function (hard) {
          if (hard === void 0) {
            hard = false;
          }

          this._destroyed = true;
          this.fn = null;
          this.context = null; // Disconnect, hook up next and previous

          if (this.previous) {
            this.previous.next = this.next;
          }

          if (this.next) {
            this.next.previous = this.previous;
          } // Redirect to the next item


          var redirect = this.next; // Remove references

          this.next = hard ? null : redirect;
          this.previous = null;
          return redirect;
        };

        return TickerListener;
      }();
      /**
       * A Ticker class that runs an update loop that other objects listen to.
       *
       * This class is composed around listeners meant for execution on the next requested animation frame.
       * Animation frames are requested only when necessary, e.g. When the ticker is started and the emitter has listeners.
       *
       * @class
       * @memberof PIXI
       */


      var _Ticker =
      /** @class */
      function () {
        function Ticker() {
          var _this = this;
          /**
           * Whether or not this ticker should invoke the method
           * {@link PIXI.Ticker#start} automatically
           * when a listener is added.
           */


          this.autoStart = false;
          /**
           * Scalar time value from last frame to this frame.
           * This value is capped by setting {@link PIXI.Ticker#minFPS}
           * and is scaled with {@link PIXI.Ticker#speed}.
           * **Note:** The cap may be exceeded by scaling.
           */

          this.deltaTime = 1;
          /**
           * The last time {@link PIXI.Ticker#update} was invoked.
           * This value is also reset internally outside of invoking
           * update, but only when a new animation frame is requested.
           * If the platform supports DOMHighResTimeStamp,
           * this value will have a precision of 1 µs.
           */

          this.lastTime = -1;
          /**
           * Factor of current {@link PIXI.Ticker#deltaTime}.
           * @example
           * // Scales ticker.deltaTime to what would be
           * // the equivalent of approximately 120 FPS
           * ticker.speed = 2;
           */

          this.speed = 1;
          /**
           * Whether or not this ticker has been started.
           * `true` if {@link PIXI.Ticker#start} has been called.
           * `false` if {@link PIXI.Ticker#stop} has been called.
           * While `false`, this value may change to `true` in the
           * event of {@link PIXI.Ticker#autoStart} being `true`
           * and a listener is added.
           */

          this.started = false;
          /** Internal current frame request ID */

          this._requestId = null;
          /**
           * Internal value managed by minFPS property setter and getter.
           * This is the maximum allowed milliseconds between updates.
           */

          this._maxElapsedMS = 100;
          /**
           * Internal value managed by minFPS property setter and getter.
           * This is the maximum allowed milliseconds between updates.
           */

          this._minElapsedMS = 0;
          /** If enabled, deleting is disabled.*/

          this._protected = false;
          /**
           * The last time keyframe was executed.
           * Maintains a relatively fixed interval with the previous value.
           */

          this._lastFrame = -1;
          this._head = new TickerListener(null, null, Infinity);
          this.deltaMS = 1 / _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.TARGET_FPMS;
          this.elapsedMS = 1 / _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.TARGET_FPMS;

          this._tick = function (time) {
            _this._requestId = null;

            if (_this.started) {
              // Invoke listeners now
              _this.update(time); // Listener side effects may have modified ticker state.


              if (_this.started && _this._requestId === null && _this._head.next) {
                _this._requestId = requestAnimationFrame(_this._tick);
              }
            }
          };
        }
        /**
         * Conditionally requests a new animation frame.
         * If a frame has not already been requested, and if the internal
         * emitter has listeners, a new frame is requested.
         *
         * @private
         */


        Ticker.prototype._requestIfNeeded = function () {
          if (this._requestId === null && this._head.next) {
            // ensure callbacks get correct delta
            this.lastTime = performance.now();
            this._lastFrame = this.lastTime;
            this._requestId = requestAnimationFrame(this._tick);
          }
        };
        /**
         * Conditionally cancels a pending animation frame.
         * @private
         */


        Ticker.prototype._cancelIfNeeded = function () {
          if (this._requestId !== null) {
            cancelAnimationFrame(this._requestId);
            this._requestId = null;
          }
        };
        /**
         * Conditionally requests a new animation frame.
         * If the ticker has been started it checks if a frame has not already
         * been requested, and if the internal emitter has listeners. If these
         * conditions are met, a new frame is requested. If the ticker has not
         * been started, but autoStart is `true`, then the ticker starts now,
         * and continues with the previous conditions to request a new frame.
         *
         * @private
         */


        Ticker.prototype._startIfPossible = function () {
          if (this.started) {
            this._requestIfNeeded();
          } else if (this.autoStart) {
            this.start();
          }
        };
        /**
         * Register a handler for tick events. Calls continuously unless
         * it is removed or the ticker is stopped.
         *
         * @param fn - The listener function to be added for updates
         * @param context - The listener context
         * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting
         * @returns This instance of a ticker
         */


        Ticker.prototype.add = function (fn, context, priority) {
          if (priority === void 0) {
            priority = _UPDATE_PRIORITY.NORMAL;
          }

          return this._addListener(new TickerListener(fn, context, priority));
        };
        /**
         * Add a handler for the tick event which is only execute once.
         *
         * @param fn - The listener function to be added for one update
         * @param context - The listener context
         * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting
         * @returns This instance of a ticker
         */


        Ticker.prototype.addOnce = function (fn, context, priority) {
          if (priority === void 0) {
            priority = _UPDATE_PRIORITY.NORMAL;
          }

          return this._addListener(new TickerListener(fn, context, priority, true));
        };
        /**
         * Internally adds the event handler so that it can be sorted by priority.
         * Priority allows certain handler (user, AnimatedSprite, Interaction) to be run
         * before the rendering.
         *
         * @private
         * @param listener - Current listener being added.
         * @returns This instance of a ticker
         */


        Ticker.prototype._addListener = function (listener) {
          // For attaching to head
          var current = this._head.next;
          var previous = this._head; // Add the first item

          if (!current) {
            listener.connect(previous);
          } else {
            // Go from highest to lowest priority
            while (current) {
              if (listener.priority > current.priority) {
                listener.connect(previous);
                break;
              }

              previous = current;
              current = current.next;
            } // Not yet connected


            if (!listener.previous) {
              listener.connect(previous);
            }
          }

          this._startIfPossible();

          return this;
        };
        /**
         * Removes any handlers matching the function and context parameters.
         * If no handlers are left after removing, then it cancels the animation frame.
         *
         * @param fn - The listener function to be removed
         * @param context - The listener context to be removed
         * @returns This instance of a ticker
         */


        Ticker.prototype.remove = function (fn, context) {
          var listener = this._head.next;

          while (listener) {
            // We found a match, lets remove it
            // no break to delete all possible matches
            // incase a listener was added 2+ times
            if (listener.match(fn, context)) {
              listener = listener.destroy();
            } else {
              listener = listener.next;
            }
          }

          if (!this._head.next) {
            this._cancelIfNeeded();
          }

          return this;
        };

        Object.defineProperty(Ticker.prototype, "count", {
          /**
           * The number of listeners on this ticker, calculated by walking through linked list
           *
           * @readonly
           * @member {number}
           */
          get: function get() {
            if (!this._head) {
              return 0;
            }

            var count = 0;
            var current = this._head;

            while (current = current.next) {
              count++;
            }

            return count;
          },
          enumerable: false,
          configurable: true
        });
        /**
         * Starts the ticker. If the ticker has listeners
         * a new animation frame is requested at this point.
         */

        Ticker.prototype.start = function () {
          if (!this.started) {
            this.started = true;

            this._requestIfNeeded();
          }
        };
        /**
         * Stops the ticker. If the ticker has requested
         * an animation frame it is canceled at this point.
         */


        Ticker.prototype.stop = function () {
          if (this.started) {
            this.started = false;

            this._cancelIfNeeded();
          }
        };
        /**
         * Destroy the ticker and don't use after this. Calling
         * this method removes all references to internal events.
         */


        Ticker.prototype.destroy = function () {
          if (!this._protected) {
            this.stop();
            var listener = this._head.next;

            while (listener) {
              listener = listener.destroy(true);
            }

            this._head.destroy();

            this._head = null;
          }
        };
        /**
         * Triggers an update. An update entails setting the
         * current {@link PIXI.Ticker#elapsedMS},
         * the current {@link PIXI.Ticker#deltaTime},
         * invoking all listeners with current deltaTime,
         * and then finally setting {@link PIXI.Ticker#lastTime}
         * with the value of currentTime that was provided.
         * This method will be called automatically by animation
         * frame callbacks if the ticker instance has been started
         * and listeners are added.
         *
         * @param {number} [currentTime=performance.now()] - the current time of execution
         */


        Ticker.prototype.update = function (currentTime) {
          if (currentTime === void 0) {
            currentTime = performance.now();
          }

          var elapsedMS; // If the difference in time is zero or negative, we ignore most of the work done here.
          // If there is no valid difference, then should be no reason to let anyone know about it.
          // A zero delta, is exactly that, nothing should update.
          //
          // The difference in time can be negative, and no this does not mean time traveling.
          // This can be the result of a race condition between when an animation frame is requested
          // on the current JavaScript engine event loop, and when the ticker's start method is invoked
          // (which invokes the internal _requestIfNeeded method). If a frame is requested before
          // _requestIfNeeded is invoked, then the callback for the animation frame the ticker requests,
          // can receive a time argument that can be less than the lastTime value that was set within
          // _requestIfNeeded. This difference is in microseconds, but this is enough to cause problems.
          //
          // This check covers this browser engine timing issue, as well as if consumers pass an invalid
          // currentTime value. This may happen if consumers opt-out of the autoStart, and update themselves.

          if (currentTime > this.lastTime) {
            // Save uncapped elapsedMS for measurement
            elapsedMS = this.elapsedMS = currentTime - this.lastTime; // cap the milliseconds elapsed used for deltaTime

            if (elapsedMS > this._maxElapsedMS) {
              elapsedMS = this._maxElapsedMS;
            }

            elapsedMS *= this.speed; // If not enough time has passed, exit the function.
            // Get ready for next frame by setting _lastFrame, but based on _minElapsedMS
            // adjustment to ensure a relatively stable interval.

            if (this._minElapsedMS) {
              var delta = currentTime - this._lastFrame | 0;

              if (delta < this._minElapsedMS) {
                return;
              }

              this._lastFrame = currentTime - delta % this._minElapsedMS;
            }

            this.deltaMS = elapsedMS;
            this.deltaTime = this.deltaMS * _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.TARGET_FPMS; // Cache a local reference, in-case ticker is destroyed
            // during the emit, we can still check for head.next

            var head = this._head; // Invoke listeners added to internal emitter

            var listener = head.next;

            while (listener) {
              listener = listener.emit(this.deltaTime);
            }

            if (!head.next) {
              this._cancelIfNeeded();
            }
          } else {
            this.deltaTime = this.deltaMS = this.elapsedMS = 0;
          }

          this.lastTime = currentTime;
        };

        Object.defineProperty(Ticker.prototype, "FPS", {
          /**
           * The frames per second at which this ticker is running.
           * The default is approximately 60 in most modern browsers.
           * **Note:** This does not factor in the value of
           * {@link PIXI.Ticker#speed}, which is specific
           * to scaling {@link PIXI.Ticker#deltaTime}.
           *
           * @member {number}
           * @readonly
           */
          get: function get() {
            return 1000 / this.elapsedMS;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Ticker.prototype, "minFPS", {
          /**
           * Manages the maximum amount of milliseconds allowed to
           * elapse between invoking {@link PIXI.Ticker#update}.
           * This value is used to cap {@link PIXI.Ticker#deltaTime},
           * but does not effect the measured value of {@link PIXI.Ticker#FPS}.
           * When setting this property it is clamped to a value between
           * `0` and `PIXI.settings.TARGET_FPMS * 1000`.
           *
           * @member {number}
           * @default 10
           */
          get: function get() {
            return 1000 / this._maxElapsedMS;
          },
          set: function set(fps) {
            // Minimum must be below the maxFPS
            var minFPS = Math.min(this.maxFPS, fps); // Must be at least 0, but below 1 / settings.TARGET_FPMS

            var minFPMS = Math.min(Math.max(0, minFPS) / 1000, _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.TARGET_FPMS);
            this._maxElapsedMS = 1 / minFPMS;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Ticker.prototype, "maxFPS", {
          /**
           * Manages the minimum amount of milliseconds required to
           * elapse between invoking {@link PIXI.Ticker#update}.
           * This will effect the measured value of {@link PIXI.Ticker#FPS}.
           * If it is set to `0`, then there is no limit; PixiJS will render as many frames as it can.
           * Otherwise it will be at least `minFPS`
           *
           * @member {number}
           * @default 0
           */
          get: function get() {
            if (this._minElapsedMS) {
              return Math.round(1000 / this._minElapsedMS);
            }

            return 0;
          },
          set: function set(fps) {
            if (fps === 0) {
              this._minElapsedMS = 0;
            } else {
              // Max must be at least the minFPS
              var maxFPS = Math.max(this.minFPS, fps);
              this._minElapsedMS = 1 / (maxFPS / 1000);
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Ticker, "shared", {
          /**
           * The shared ticker instance used by {@link PIXI.AnimatedSprite} and by
           * {@link PIXI.VideoResource} to update animation frames / video textures.
           *
           * It may also be used by {@link PIXI.Application} if created with the `sharedTicker` option property set to true.
           *
           * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.
           * Please follow the examples for usage, including how to opt-out of auto-starting the shared ticker.
           *
           * @example
           * let ticker = PIXI.Ticker.shared;
           * // Set this to prevent starting this ticker when listeners are added.
           * // By default this is true only for the PIXI.Ticker.shared instance.
           * ticker.autoStart = false;
           * // FYI, call this to ensure the ticker is stopped. It should be stopped
           * // if you have not attempted to render anything yet.
           * ticker.stop();
           * // Call this when you are ready for a running shared ticker.
           * ticker.start();
           *
           * @example
           * // You may use the shared ticker to render...
           * let renderer = PIXI.autoDetectRenderer();
           * let stage = new PIXI.Container();
           * document.body.appendChild(renderer.view);
           * ticker.add(function (time) {
           *     renderer.render(stage);
           * });
           *
           * @example
           * // Or you can just update it manually.
           * ticker.autoStart = false;
           * ticker.stop();
           * function animate(time) {
           *     ticker.update(time);
           *     renderer.render(stage);
           *     requestAnimationFrame(animate);
           * }
           * animate(performance.now());
           *
           * @member {PIXI.Ticker}
           * @static
           */
          get: function get() {
            if (!Ticker._shared) {
              var shared = Ticker._shared = new Ticker();
              shared.autoStart = true;
              shared._protected = true;
            }

            return Ticker._shared;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Ticker, "system", {
          /**
           * The system ticker instance used by {@link PIXI.InteractionManager} and by
           * {@link PIXI.BasePrepare} for core timing functionality that shouldn't usually need to be paused,
           * unlike the `shared` ticker which drives visual animations and rendering which may want to be paused.
           *
           * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.
           *
           * @member {PIXI.Ticker}
           * @static
           */
          get: function get() {
            if (!Ticker._system) {
              var system = Ticker._system = new Ticker();
              system.autoStart = true;
              system._protected = true;
            }

            return Ticker._system;
          },
          enumerable: false,
          configurable: true
        });
        return Ticker;
      }();
      /**
       * Middleware for for Application Ticker.
       *
       * @example
       * import {TickerPlugin} from '@pixi/ticker';
       * import {Application} from '@pixi/app';
       * Application.registerPlugin(TickerPlugin);
       *
       * @class
       * @memberof PIXI
       */


      var _TickerPlugin =
      /** @class */
      function () {
        function TickerPlugin() {}
        /**
         * Initialize the plugin with scope of application instance
         *
         * @static
         * @private
         * @param {object} [options] - See application options
         */


        TickerPlugin.init = function (options) {
          var _this = this; // Set default


          options = Object.assign({
            autoStart: true,
            sharedTicker: false
          }, options); // Create ticker setter

          Object.defineProperty(this, 'ticker', {
            set: function set(ticker) {
              if (this._ticker) {
                this._ticker.remove(this.render, this);
              }

              this._ticker = ticker;

              if (ticker) {
                ticker.add(this.render, this, _UPDATE_PRIORITY.LOW);
              }
            },
            get: function get() {
              return this._ticker;
            }
          });
          /**
           * Convenience method for stopping the render.
           *
           * @method
           * @memberof PIXI.Application
           * @instance
           */

          this.stop = function () {
            _this._ticker.stop();
          };
          /**
           * Convenience method for starting the render.
           *
           * @method
           * @memberof PIXI.Application
           * @instance
           */


          this.start = function () {
            _this._ticker.start();
          };
          /**
           * Internal reference to the ticker.
           *
           * @type {PIXI.Ticker}
           * @name _ticker
           * @memberof PIXI.Application#
           * @private
           */


          this._ticker = null;
          /**
           * Ticker for doing render updates.
           *
           * @type {PIXI.Ticker}
           * @name ticker
           * @memberof PIXI.Application#
           * @default PIXI.Ticker.shared
           */

          this.ticker = options.sharedTicker ? _Ticker.shared : new _Ticker(); // Start the rendering

          if (options.autoStart) {
            this.start();
          }
        };
        /**
         * Clean up the ticker, scoped to application.
         *
         * @static
         * @private
         */


        TickerPlugin.destroy = function () {
          if (this._ticker) {
            var oldTicker = this._ticker;
            this.ticker = null;
            oldTicker.destroy();
          }
        };

        return TickerPlugin;
      }();
      /***/

    },

    /***/
    47300:
    /*!****************************************************!*\
      !*** ./node_modules/@pixi/utils/dist/esm/utils.js ***!
      \****************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "isMobile": function isMobile() {
          return (
            /* reexport safe */
            _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.isMobile
          );
        },

        /* harmony export */
        "EventEmitter": function EventEmitter() {
          return (
            /* reexport default from dynamic */
            eventemitter3__WEBPACK_IMPORTED_MODULE_1___default.a
          );
        },

        /* harmony export */
        "earcut": function earcut() {
          return (
            /* reexport default from dynamic */
            earcut__WEBPACK_IMPORTED_MODULE_2___default.a
          );
        },

        /* harmony export */
        "BaseTextureCache": function BaseTextureCache() {
          return (
            /* binding */
            _BaseTextureCache
          );
        },

        /* harmony export */
        "CanvasRenderTarget": function CanvasRenderTarget() {
          return (
            /* binding */
            _CanvasRenderTarget
          );
        },

        /* harmony export */
        "DATA_URI": function DATA_URI() {
          return (
            /* binding */
            _DATA_URI
          );
        },

        /* harmony export */
        "ProgramCache": function ProgramCache() {
          return (
            /* binding */
            _ProgramCache
          );
        },

        /* harmony export */
        "TextureCache": function TextureCache() {
          return (
            /* binding */
            _TextureCache
          );
        },

        /* harmony export */
        "clearTextureCache": function clearTextureCache() {
          return (
            /* binding */
            _clearTextureCache
          );
        },

        /* harmony export */
        "correctBlendMode": function correctBlendMode() {
          return (
            /* binding */
            _correctBlendMode
          );
        },

        /* harmony export */
        "createIndicesForQuads": function createIndicesForQuads() {
          return (
            /* binding */
            _createIndicesForQuads
          );
        },

        /* harmony export */
        "decomposeDataUri": function decomposeDataUri() {
          return (
            /* binding */
            _decomposeDataUri
          );
        },

        /* harmony export */
        "deprecation": function deprecation() {
          return (
            /* binding */
            _deprecation
          );
        },

        /* harmony export */
        "destroyTextureCache": function destroyTextureCache() {
          return (
            /* binding */
            _destroyTextureCache
          );
        },

        /* harmony export */
        "determineCrossOrigin": function determineCrossOrigin() {
          return (
            /* binding */
            _determineCrossOrigin
          );
        },

        /* harmony export */
        "getBufferType": function getBufferType() {
          return (
            /* binding */
            _getBufferType
          );
        },

        /* harmony export */
        "getResolutionOfUrl": function getResolutionOfUrl() {
          return (
            /* binding */
            _getResolutionOfUrl
          );
        },

        /* harmony export */
        "hex2rgb": function hex2rgb() {
          return (
            /* binding */
            _hex2rgb
          );
        },

        /* harmony export */
        "hex2string": function hex2string() {
          return (
            /* binding */
            _hex2string
          );
        },

        /* harmony export */
        "interleaveTypedArrays": function interleaveTypedArrays() {
          return (
            /* binding */
            _interleaveTypedArrays
          );
        },

        /* harmony export */
        "isPow2": function isPow2() {
          return (
            /* binding */
            _isPow
          );
        },

        /* harmony export */
        "isWebGLSupported": function isWebGLSupported() {
          return (
            /* binding */
            _isWebGLSupported
          );
        },

        /* harmony export */
        "log2": function log2() {
          return (
            /* binding */
            _log
          );
        },

        /* harmony export */
        "nextPow2": function nextPow2() {
          return (
            /* binding */
            _nextPow
          );
        },

        /* harmony export */
        "premultiplyBlendMode": function premultiplyBlendMode() {
          return (
            /* binding */
            _premultiplyBlendMode
          );
        },

        /* harmony export */
        "premultiplyRgba": function premultiplyRgba() {
          return (
            /* binding */
            _premultiplyRgba
          );
        },

        /* harmony export */
        "premultiplyTint": function premultiplyTint() {
          return (
            /* binding */
            _premultiplyTint
          );
        },

        /* harmony export */
        "premultiplyTintToRgba": function premultiplyTintToRgba() {
          return (
            /* binding */
            _premultiplyTintToRgba
          );
        },

        /* harmony export */
        "removeItems": function removeItems() {
          return (
            /* binding */
            _removeItems
          );
        },

        /* harmony export */
        "rgb2hex": function rgb2hex() {
          return (
            /* binding */
            _rgb2hex
          );
        },

        /* harmony export */
        "sayHello": function sayHello() {
          return (
            /* binding */
            _sayHello
          );
        },

        /* harmony export */
        "sign": function sign() {
          return (
            /* binding */
            _sign
          );
        },

        /* harmony export */
        "skipHello": function skipHello() {
          return (
            /* binding */
            _skipHello
          );
        },

        /* harmony export */
        "string2hex": function string2hex() {
          return (
            /* binding */
            _string2hex
          );
        },

        /* harmony export */
        "trimCanvas": function trimCanvas() {
          return (
            /* binding */
            _trimCanvas
          );
        },

        /* harmony export */
        "uid": function uid() {
          return (
            /* binding */
            _uid
          );
        },

        /* harmony export */
        "url": function url() {
          return (
            /* binding */
            _url
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _pixi_settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @pixi/settings */
      87703);
      /* harmony import */


      var eventemitter3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! eventemitter3 */
      97697);
      /* harmony import */


      var eventemitter3__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(eventemitter3__WEBPACK_IMPORTED_MODULE_1__);
      /* harmony import */


      var earcut__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! earcut */
      9205);
      /* harmony import */


      var earcut__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(earcut__WEBPACK_IMPORTED_MODULE_2__);
      /* harmony import */


      var url__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! url */
      55627);
      /* harmony import */


      var _pixi_constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @pixi/constants */
      29878);
      /*!
       * @pixi/utils - v6.2.0
       * Compiled Mon, 01 Nov 2021 16:52:10 UTC
       *
       * @pixi/utils is licensed under the MIT License.
       * http://www.opensource.org/licenses/mit-license
       */

      /**
       * This file contains redeclared types for Node `url` and `querystring` modules. These modules
       * don't provide their own typings but instead are a part of the full Node typings. The purpose of
       * this file is to redeclare the required types to avoid having the whole Node types as a
       * dependency.
       */


      var _url = {
        parse: url__WEBPACK_IMPORTED_MODULE_3__.parse,
        format: url__WEBPACK_IMPORTED_MODULE_3__.format,
        resolve: url__WEBPACK_IMPORTED_MODULE_3__.resolve
      };
      /**
       * The prefix that denotes a URL is for a retina asset.
       *
       * @static
       * @name RETINA_PREFIX
       * @memberof PIXI.settings
       * @type {RegExp}
       * @default /@([0-9\.]+)x/
       * @example `@2x`
       */

      _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.RETINA_PREFIX = /@([0-9\.]+)x/;
      /**
       * Should the `failIfMajorPerformanceCaveat` flag be enabled as a context option used in the `isWebGLSupported` function.
       * If set to true, a WebGL renderer can fail to be created if the browser thinks there could be performance issues when
       * using WebGL.
       *
       * In PixiJS v6 this has changed from true to false by default, to allow WebGL to work in as many scenarios as possible.
       * However, some users may have a poor experience, for example, if a user has a gpu or driver version blacklisted by the
       * browser.
       *
       * If your application requires high performance rendering, you may wish to set this to false.
       * We recommend one of two options if you decide to set this flag to false:
       *
       * 1: Use the `pixi.js-legacy` package, which includes a Canvas renderer as a fallback in case high performance WebGL is
       *    not supported.
       *
       * 2: Call `isWebGLSupported` (which if found in the PIXI.utils package) in your code before attempting to create a PixiJS
       *    renderer, and show an error message to the user if the function returns false, explaining that their device & browser
       *    combination does not support high performance WebGL.
       *    This is a much better strategy than trying to create a PixiJS renderer and finding it then fails.
       *
       * @static
       * @name FAIL_IF_MAJOR_PERFORMANCE_CAVEAT
       * @memberof PIXI.settings
       * @type {boolean}
       * @default false
       */

      _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.FAIL_IF_MAJOR_PERFORMANCE_CAVEAT = false;
      var saidHello = false;
      var VERSION = '6.2.0';
      /**
       * Skips the hello message of renderers that are created after this is run.
       *
       * @function skipHello
       * @memberof PIXI.utils
       */

      function _skipHello() {
        saidHello = true;
      }
      /**
       * Logs out the version and renderer information for this running instance of PIXI.
       * If you don't want to see this message you can run `PIXI.utils.skipHello()` before
       * creating your renderer. Keep in mind that doing that will forever make you a jerk face.
       *
       * @static
       * @function sayHello
       * @memberof PIXI.utils
       * @param {string} type - The string renderer type to log.
       */


      function _sayHello(type) {
        var _a;

        if (saidHello) {
          return;
        }

        if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {
          var args = ["\n %c %c %c PixiJS " + VERSION + " - \u2730 " + type + " \u2730  %c  %c  http://www.pixijs.com/  %c %c \u2665%c\u2665%c\u2665 \n\n", 'background: #ff66a5; padding:5px 0;', 'background: #ff66a5; padding:5px 0;', 'color: #ff66a5; background: #030307; padding:5px 0;', 'background: #ff66a5; padding:5px 0;', 'background: #ffc3dc; padding:5px 0;', 'background: #ff66a5; padding:5px 0;', 'color: #ff2424; background: #fff; padding:5px 0;', 'color: #ff2424; background: #fff; padding:5px 0;', 'color: #ff2424; background: #fff; padding:5px 0;'];

          (_a = self.console).log.apply(_a, args);
        } else if (self.console) {
          self.console.log("PixiJS " + VERSION + " - " + type + " - http://www.pixijs.com/");
        }

        saidHello = true;
      }

      var supported;
      /**
       * Helper for checking for WebGL support.
       *
       * @memberof PIXI.utils
       * @function isWebGLSupported
       * @return {boolean} Is WebGL supported.
       */

      function _isWebGLSupported() {
        if (typeof supported === 'undefined') {
          supported = function supported() {
            var contextOptions = {
              stencil: true,
              failIfMajorPerformanceCaveat: _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.FAIL_IF_MAJOR_PERFORMANCE_CAVEAT
            };

            try {
              if (!self.WebGLRenderingContext) {
                return false;
              }

              var canvas = document.createElement('canvas');
              var gl = canvas.getContext('webgl', contextOptions) || canvas.getContext('experimental-webgl', contextOptions);
              var success = !!(gl && gl.getContextAttributes().stencil);

              if (gl) {
                var loseContext = gl.getExtension('WEBGL_lose_context');

                if (loseContext) {
                  loseContext.loseContext();
                }
              }

              gl = null;
              return success;
            } catch (e) {
              return false;
            }
          }();
        }

        return supported;
      }

      var aliceblue = "#f0f8ff";
      var antiquewhite = "#faebd7";
      var aqua = "#00ffff";
      var aquamarine = "#7fffd4";
      var azure = "#f0ffff";
      var beige = "#f5f5dc";
      var bisque = "#ffe4c4";
      var black = "#000000";
      var blanchedalmond = "#ffebcd";
      var blue = "#0000ff";
      var blueviolet = "#8a2be2";
      var brown = "#a52a2a";
      var burlywood = "#deb887";
      var cadetblue = "#5f9ea0";
      var chartreuse = "#7fff00";
      var chocolate = "#d2691e";
      var coral = "#ff7f50";
      var cornflowerblue = "#6495ed";
      var cornsilk = "#fff8dc";
      var crimson = "#dc143c";
      var cyan = "#00ffff";
      var darkblue = "#00008b";
      var darkcyan = "#008b8b";
      var darkgoldenrod = "#b8860b";
      var darkgray = "#a9a9a9";
      var darkgreen = "#006400";
      var darkgrey = "#a9a9a9";
      var darkkhaki = "#bdb76b";
      var darkmagenta = "#8b008b";
      var darkolivegreen = "#556b2f";
      var darkorange = "#ff8c00";
      var darkorchid = "#9932cc";
      var darkred = "#8b0000";
      var darksalmon = "#e9967a";
      var darkseagreen = "#8fbc8f";
      var darkslateblue = "#483d8b";
      var darkslategray = "#2f4f4f";
      var darkslategrey = "#2f4f4f";
      var darkturquoise = "#00ced1";
      var darkviolet = "#9400d3";
      var deeppink = "#ff1493";
      var deepskyblue = "#00bfff";
      var dimgray = "#696969";
      var dimgrey = "#696969";
      var dodgerblue = "#1e90ff";
      var firebrick = "#b22222";
      var floralwhite = "#fffaf0";
      var forestgreen = "#228b22";
      var fuchsia = "#ff00ff";
      var gainsboro = "#dcdcdc";
      var ghostwhite = "#f8f8ff";
      var goldenrod = "#daa520";
      var gold = "#ffd700";
      var gray = "#808080";
      var green = "#008000";
      var greenyellow = "#adff2f";
      var grey = "#808080";
      var honeydew = "#f0fff0";
      var hotpink = "#ff69b4";
      var indianred = "#cd5c5c";
      var indigo = "#4b0082";
      var ivory = "#fffff0";
      var khaki = "#f0e68c";
      var lavenderblush = "#fff0f5";
      var lavender = "#e6e6fa";
      var lawngreen = "#7cfc00";
      var lemonchiffon = "#fffacd";
      var lightblue = "#add8e6";
      var lightcoral = "#f08080";
      var lightcyan = "#e0ffff";
      var lightgoldenrodyellow = "#fafad2";
      var lightgray = "#d3d3d3";
      var lightgreen = "#90ee90";
      var lightgrey = "#d3d3d3";
      var lightpink = "#ffb6c1";
      var lightsalmon = "#ffa07a";
      var lightseagreen = "#20b2aa";
      var lightskyblue = "#87cefa";
      var lightslategray = "#778899";
      var lightslategrey = "#778899";
      var lightsteelblue = "#b0c4de";
      var lightyellow = "#ffffe0";
      var lime = "#00ff00";
      var limegreen = "#32cd32";
      var linen = "#faf0e6";
      var magenta = "#ff00ff";
      var maroon = "#800000";
      var mediumaquamarine = "#66cdaa";
      var mediumblue = "#0000cd";
      var mediumorchid = "#ba55d3";
      var mediumpurple = "#9370db";
      var mediumseagreen = "#3cb371";
      var mediumslateblue = "#7b68ee";
      var mediumspringgreen = "#00fa9a";
      var mediumturquoise = "#48d1cc";
      var mediumvioletred = "#c71585";
      var midnightblue = "#191970";
      var mintcream = "#f5fffa";
      var mistyrose = "#ffe4e1";
      var moccasin = "#ffe4b5";
      var navajowhite = "#ffdead";
      var navy = "#000080";
      var oldlace = "#fdf5e6";
      var olive = "#808000";
      var olivedrab = "#6b8e23";
      var orange = "#ffa500";
      var orangered = "#ff4500";
      var orchid = "#da70d6";
      var palegoldenrod = "#eee8aa";
      var palegreen = "#98fb98";
      var paleturquoise = "#afeeee";
      var palevioletred = "#db7093";
      var papayawhip = "#ffefd5";
      var peachpuff = "#ffdab9";
      var peru = "#cd853f";
      var pink = "#ffc0cb";
      var plum = "#dda0dd";
      var powderblue = "#b0e0e6";
      var purple = "#800080";
      var rebeccapurple = "#663399";
      var red = "#ff0000";
      var rosybrown = "#bc8f8f";
      var royalblue = "#4169e1";
      var saddlebrown = "#8b4513";
      var salmon = "#fa8072";
      var sandybrown = "#f4a460";
      var seagreen = "#2e8b57";
      var seashell = "#fff5ee";
      var sienna = "#a0522d";
      var silver = "#c0c0c0";
      var skyblue = "#87ceeb";
      var slateblue = "#6a5acd";
      var slategray = "#708090";
      var slategrey = "#708090";
      var snow = "#fffafa";
      var springgreen = "#00ff7f";
      var steelblue = "#4682b4";
      var tan = "#d2b48c";
      var teal = "#008080";
      var thistle = "#d8bfd8";
      var tomato = "#ff6347";
      var turquoise = "#40e0d0";
      var violet = "#ee82ee";
      var wheat = "#f5deb3";
      var white = "#ffffff";
      var whitesmoke = "#f5f5f5";
      var yellow = "#ffff00";
      var yellowgreen = "#9acd32";
      var cssColorNames = {
        aliceblue: aliceblue,
        antiquewhite: antiquewhite,
        aqua: aqua,
        aquamarine: aquamarine,
        azure: azure,
        beige: beige,
        bisque: bisque,
        black: black,
        blanchedalmond: blanchedalmond,
        blue: blue,
        blueviolet: blueviolet,
        brown: brown,
        burlywood: burlywood,
        cadetblue: cadetblue,
        chartreuse: chartreuse,
        chocolate: chocolate,
        coral: coral,
        cornflowerblue: cornflowerblue,
        cornsilk: cornsilk,
        crimson: crimson,
        cyan: cyan,
        darkblue: darkblue,
        darkcyan: darkcyan,
        darkgoldenrod: darkgoldenrod,
        darkgray: darkgray,
        darkgreen: darkgreen,
        darkgrey: darkgrey,
        darkkhaki: darkkhaki,
        darkmagenta: darkmagenta,
        darkolivegreen: darkolivegreen,
        darkorange: darkorange,
        darkorchid: darkorchid,
        darkred: darkred,
        darksalmon: darksalmon,
        darkseagreen: darkseagreen,
        darkslateblue: darkslateblue,
        darkslategray: darkslategray,
        darkslategrey: darkslategrey,
        darkturquoise: darkturquoise,
        darkviolet: darkviolet,
        deeppink: deeppink,
        deepskyblue: deepskyblue,
        dimgray: dimgray,
        dimgrey: dimgrey,
        dodgerblue: dodgerblue,
        firebrick: firebrick,
        floralwhite: floralwhite,
        forestgreen: forestgreen,
        fuchsia: fuchsia,
        gainsboro: gainsboro,
        ghostwhite: ghostwhite,
        goldenrod: goldenrod,
        gold: gold,
        gray: gray,
        green: green,
        greenyellow: greenyellow,
        grey: grey,
        honeydew: honeydew,
        hotpink: hotpink,
        indianred: indianred,
        indigo: indigo,
        ivory: ivory,
        khaki: khaki,
        lavenderblush: lavenderblush,
        lavender: lavender,
        lawngreen: lawngreen,
        lemonchiffon: lemonchiffon,
        lightblue: lightblue,
        lightcoral: lightcoral,
        lightcyan: lightcyan,
        lightgoldenrodyellow: lightgoldenrodyellow,
        lightgray: lightgray,
        lightgreen: lightgreen,
        lightgrey: lightgrey,
        lightpink: lightpink,
        lightsalmon: lightsalmon,
        lightseagreen: lightseagreen,
        lightskyblue: lightskyblue,
        lightslategray: lightslategray,
        lightslategrey: lightslategrey,
        lightsteelblue: lightsteelblue,
        lightyellow: lightyellow,
        lime: lime,
        limegreen: limegreen,
        linen: linen,
        magenta: magenta,
        maroon: maroon,
        mediumaquamarine: mediumaquamarine,
        mediumblue: mediumblue,
        mediumorchid: mediumorchid,
        mediumpurple: mediumpurple,
        mediumseagreen: mediumseagreen,
        mediumslateblue: mediumslateblue,
        mediumspringgreen: mediumspringgreen,
        mediumturquoise: mediumturquoise,
        mediumvioletred: mediumvioletred,
        midnightblue: midnightblue,
        mintcream: mintcream,
        mistyrose: mistyrose,
        moccasin: moccasin,
        navajowhite: navajowhite,
        navy: navy,
        oldlace: oldlace,
        olive: olive,
        olivedrab: olivedrab,
        orange: orange,
        orangered: orangered,
        orchid: orchid,
        palegoldenrod: palegoldenrod,
        palegreen: palegreen,
        paleturquoise: paleturquoise,
        palevioletred: palevioletred,
        papayawhip: papayawhip,
        peachpuff: peachpuff,
        peru: peru,
        pink: pink,
        plum: plum,
        powderblue: powderblue,
        purple: purple,
        rebeccapurple: rebeccapurple,
        red: red,
        rosybrown: rosybrown,
        royalblue: royalblue,
        saddlebrown: saddlebrown,
        salmon: salmon,
        sandybrown: sandybrown,
        seagreen: seagreen,
        seashell: seashell,
        sienna: sienna,
        silver: silver,
        skyblue: skyblue,
        slateblue: slateblue,
        slategray: slategray,
        slategrey: slategrey,
        snow: snow,
        springgreen: springgreen,
        steelblue: steelblue,
        tan: tan,
        teal: teal,
        thistle: thistle,
        tomato: tomato,
        turquoise: turquoise,
        violet: violet,
        wheat: wheat,
        white: white,
        whitesmoke: whitesmoke,
        yellow: yellow,
        yellowgreen: yellowgreen
      };
      /**
       * Converts a hexadecimal color number to an [R, G, B] array of normalized floats (numbers from 0.0 to 1.0).
       *
       * @example
       * PIXI.utils.hex2rgb(0xffffff); // returns [1, 1, 1]
       * @memberof PIXI.utils
       * @function hex2rgb
       * @param {number} hex - The hexadecimal number to convert
       * @param  {number[]} [out=[]] - If supplied, this array will be used rather than returning a new one
       * @return {number[]} An array representing the [R, G, B] of the color where all values are floats.
       */

      function _hex2rgb(hex, out) {
        if (out === void 0) {
          out = [];
        }

        out[0] = (hex >> 16 & 0xFF) / 255;
        out[1] = (hex >> 8 & 0xFF) / 255;
        out[2] = (hex & 0xFF) / 255;
        return out;
      }
      /**
       * Converts a hexadecimal color number to a string.
       *
       * @example
       * PIXI.utils.hex2string(0xffffff); // returns "#ffffff"
       * @memberof PIXI.utils
       * @function hex2string
       * @param {number} hex - Number in hex (e.g., `0xffffff`)
       * @return {string} The string color (e.g., `"#ffffff"`).
       */


      function _hex2string(hex) {
        var hexString = hex.toString(16);
        hexString = '000000'.substr(0, 6 - hexString.length) + hexString;
        return "#" + hexString;
      }
      /**
       * Converts a string to a hexadecimal color number.
       * It can handle:
       *  hex strings starting with #: "#ffffff"
       *  hex strings starting with 0x: "0xffffff"
       *  hex strings without prefix: "ffffff"
       *  css colors: "black"
       *
       * @example
       * PIXI.utils.string2hex("#ffffff"); // returns 0xffffff
       * @memberof PIXI.utils
       * @function string2hex
       * @param {string} string - The string color (e.g., `"#ffffff"`)
       * @return {number} Number in hexadecimal.
       */


      function _string2hex(string) {
        if (typeof string === 'string') {
          string = cssColorNames[string.toLowerCase()] || string;

          if (string[0] === '#') {
            string = string.substr(1);
          }
        }

        return parseInt(string, 16);
      }
      /**
       * Converts a color as an [R, G, B] array of normalized floats to a hexadecimal number.
       *
       * @example
       * PIXI.utils.rgb2hex([1, 1, 1]); // returns 0xffffff
       * @memberof PIXI.utils
       * @function rgb2hex
       * @param {number[]} rgb - Array of numbers where all values are normalized floats from 0.0 to 1.0.
       * @return {number} Number in hexadecimal.
       */


      function _rgb2hex(rgb) {
        return (rgb[0] * 255 << 16) + (rgb[1] * 255 << 8) + (rgb[2] * 255 | 0);
      }
      /**
       * Corrects PixiJS blend, takes premultiplied alpha into account
       *
       * @memberof PIXI.utils
       * @function mapPremultipliedBlendModes
       * @private
       * @return {Array<number[]>} Mapped modes.
       */


      function mapPremultipliedBlendModes() {
        var pm = [];
        var npm = [];

        for (var i = 0; i < 32; i++) {
          pm[i] = i;
          npm[i] = i;
        }

        pm[_pixi_constants__WEBPACK_IMPORTED_MODULE_4__.BLEND_MODES.NORMAL_NPM] = _pixi_constants__WEBPACK_IMPORTED_MODULE_4__.BLEND_MODES.NORMAL;
        pm[_pixi_constants__WEBPACK_IMPORTED_MODULE_4__.BLEND_MODES.ADD_NPM] = _pixi_constants__WEBPACK_IMPORTED_MODULE_4__.BLEND_MODES.ADD;
        pm[_pixi_constants__WEBPACK_IMPORTED_MODULE_4__.BLEND_MODES.SCREEN_NPM] = _pixi_constants__WEBPACK_IMPORTED_MODULE_4__.BLEND_MODES.SCREEN;
        npm[_pixi_constants__WEBPACK_IMPORTED_MODULE_4__.BLEND_MODES.NORMAL] = _pixi_constants__WEBPACK_IMPORTED_MODULE_4__.BLEND_MODES.NORMAL_NPM;
        npm[_pixi_constants__WEBPACK_IMPORTED_MODULE_4__.BLEND_MODES.ADD] = _pixi_constants__WEBPACK_IMPORTED_MODULE_4__.BLEND_MODES.ADD_NPM;
        npm[_pixi_constants__WEBPACK_IMPORTED_MODULE_4__.BLEND_MODES.SCREEN] = _pixi_constants__WEBPACK_IMPORTED_MODULE_4__.BLEND_MODES.SCREEN_NPM;
        var array = [];
        array.push(npm);
        array.push(pm);
        return array;
      }
      /**
       * maps premultiply flag and blendMode to adjusted blendMode
       * @memberof PIXI.utils
       * @const premultiplyBlendMode
       * @type {Array<number[]>}
       */


      var _premultiplyBlendMode = mapPremultipliedBlendModes();
      /**
       * changes blendMode according to texture format
       *
       * @memberof PIXI.utils
       * @function correctBlendMode
       * @param {number} blendMode - supposed blend mode
       * @param {boolean} premultiplied - whether source is premultiplied
       * @returns {number} true blend mode for this texture
       */


      function _correctBlendMode(blendMode, premultiplied) {
        return _premultiplyBlendMode[premultiplied ? 1 : 0][blendMode];
      }
      /**
       * combines rgb and alpha to out array
       *
       * @memberof PIXI.utils
       * @function premultiplyRgba
       * @param {Float32Array|number[]} rgb - input rgb
       * @param {number} alpha - alpha param
       * @param {Float32Array} [out] - output
       * @param {boolean} [premultiply=true] - do premultiply it
       * @returns {Float32Array} vec4 rgba
       */


      function _premultiplyRgba(rgb, alpha, out, premultiply) {
        out = out || new Float32Array(4);

        if (premultiply || premultiply === undefined) {
          out[0] = rgb[0] * alpha;
          out[1] = rgb[1] * alpha;
          out[2] = rgb[2] * alpha;
        } else {
          out[0] = rgb[0];
          out[1] = rgb[1];
          out[2] = rgb[2];
        }

        out[3] = alpha;
        return out;
      }
      /**
       * premultiplies tint
       *
       * @memberof PIXI.utils
       * @function premultiplyTint
       * @param {number} tint - integer RGB
       * @param {number} alpha - floating point alpha (0.0-1.0)
       * @returns {number} tint multiplied by alpha
       */


      function _premultiplyTint(tint, alpha) {
        if (alpha === 1.0) {
          return (alpha * 255 << 24) + tint;
        }

        if (alpha === 0.0) {
          return 0;
        }

        var R = tint >> 16 & 0xFF;
        var G = tint >> 8 & 0xFF;
        var B = tint & 0xFF;
        R = R * alpha + 0.5 | 0;
        G = G * alpha + 0.5 | 0;
        B = B * alpha + 0.5 | 0;
        return (alpha * 255 << 24) + (R << 16) + (G << 8) + B;
      }
      /**
       * converts integer tint and float alpha to vec4 form, premultiplies by default
       *
       * @memberof PIXI.utils
       * @function premultiplyTintToRgba
       * @param {number} tint - input tint
       * @param {number} alpha - alpha param
       * @param {Float32Array} [out] - output
       * @param {boolean} [premultiply=true] - do premultiply it
       * @returns {Float32Array} vec4 rgba
       */


      function _premultiplyTintToRgba(tint, alpha, out, premultiply) {
        out = out || new Float32Array(4);
        out[0] = (tint >> 16 & 0xFF) / 255.0;
        out[1] = (tint >> 8 & 0xFF) / 255.0;
        out[2] = (tint & 0xFF) / 255.0;

        if (premultiply || premultiply === undefined) {
          out[0] *= alpha;
          out[1] *= alpha;
          out[2] *= alpha;
        }

        out[3] = alpha;
        return out;
      }
      /**
       * Generic Mask Stack data structure
       *
       * @memberof PIXI.utils
       * @function createIndicesForQuads
       * @param {number} size - Number of quads
       * @param {Uint16Array|Uint32Array} [outBuffer] - Buffer for output, length has to be `6 * size`
       * @return {Uint16Array|Uint32Array} - Resulting index buffer
       */


      function _createIndicesForQuads(size, outBuffer) {
        if (outBuffer === void 0) {
          outBuffer = null;
        } // the total number of indices in our array, there are 6 points per quad.


        var totalIndices = size * 6;
        outBuffer = outBuffer || new Uint16Array(totalIndices);

        if (outBuffer.length !== totalIndices) {
          throw new Error("Out buffer length is incorrect, got " + outBuffer.length + " and expected " + totalIndices);
        } // fill the indices with the quads to draw


        for (var i = 0, j = 0; i < totalIndices; i += 6, j += 4) {
          outBuffer[i + 0] = j + 0;
          outBuffer[i + 1] = j + 1;
          outBuffer[i + 2] = j + 2;
          outBuffer[i + 3] = j + 0;
          outBuffer[i + 4] = j + 2;
          outBuffer[i + 5] = j + 3;
        }

        return outBuffer;
      }

      function _getBufferType(array) {
        if (array.BYTES_PER_ELEMENT === 4) {
          if (array instanceof Float32Array) {
            return 'Float32Array';
          } else if (array instanceof Uint32Array) {
            return 'Uint32Array';
          }

          return 'Int32Array';
        } else if (array.BYTES_PER_ELEMENT === 2) {
          if (array instanceof Uint16Array) {
            return 'Uint16Array';
          }
        } else if (array.BYTES_PER_ELEMENT === 1) {
          if (array instanceof Uint8Array) {
            return 'Uint8Array';
          }
        } // TODO map out the rest of the array elements!


        return null;
      }
      /* eslint-disable object-shorthand */


      var map = {
        Float32Array: Float32Array,
        Uint32Array: Uint32Array,
        Int32Array: Int32Array,
        Uint8Array: Uint8Array
      };

      function _interleaveTypedArrays(arrays, sizes) {
        var outSize = 0;
        var stride = 0;
        var views = {};

        for (var i = 0; i < arrays.length; i++) {
          stride += sizes[i];
          outSize += arrays[i].length;
        }

        var buffer = new ArrayBuffer(outSize * 4);
        var out = null;
        var littleOffset = 0;

        for (var i = 0; i < arrays.length; i++) {
          var size = sizes[i];
          var array = arrays[i];
          /*
          @todo This is unsafe casting but consistent with how the code worked previously. Should it stay this way
                or should and `getBufferTypeUnsafe` function be exposed that throws an Error if unsupported type is passed?
           */

          var type = _getBufferType(array);

          if (!views[type]) {
            views[type] = new map[type](buffer);
          }

          out = views[type];

          for (var j = 0; j < array.length; j++) {
            var indexStart = (j / size | 0) * stride + littleOffset;
            var index = j % size;
            out[indexStart + index] = array[j];
          }

          littleOffset += size;
        }

        return new Float32Array(buffer);
      } // Taken from the bit-twiddle package

      /**
       * Rounds to next power of two.
       *
       * @function nextPow2
       * @memberof PIXI.utils
       * @param {number} v - input value
       * @return {number}
       */


      function _nextPow(v) {
        v += v === 0 ? 1 : 0;
        --v;
        v |= v >>> 1;
        v |= v >>> 2;
        v |= v >>> 4;
        v |= v >>> 8;
        v |= v >>> 16;
        return v + 1;
      }
      /**
       * Checks if a number is a power of two.
       *
       * @function isPow2
       * @memberof PIXI.utils
       * @param {number} v - input value
       * @return {boolean} `true` if value is power of two
       */


      function _isPow(v) {
        return !(v & v - 1) && !!v;
      }
      /**
       * Computes ceil of log base 2
       *
       * @function log2
       * @memberof PIXI.utils
       * @param {number} v - input value
       * @return {number} logarithm base 2
       */


      function _log(v) {
        var r = (v > 0xFFFF ? 1 : 0) << 4;
        v >>>= r;
        var shift = (v > 0xFF ? 1 : 0) << 3;
        v >>>= shift;
        r |= shift;
        shift = (v > 0xF ? 1 : 0) << 2;
        v >>>= shift;
        r |= shift;
        shift = (v > 0x3 ? 1 : 0) << 1;
        v >>>= shift;
        r |= shift;
        return r | v >> 1;
      }
      /**
       * Remove items from a javascript array without generating garbage
       *
       * @function removeItems
       * @memberof PIXI.utils
       * @param {Array<any>} arr - Array to remove elements from
       * @param {number} startIdx - starting index
       * @param {number} removeCount - how many to remove
       */


      function _removeItems(arr, startIdx, removeCount) {
        var length = arr.length;
        var i;

        if (startIdx >= length || removeCount === 0) {
          return;
        }

        removeCount = startIdx + removeCount > length ? length - startIdx : removeCount;
        var len = length - removeCount;

        for (i = startIdx; i < len; ++i) {
          arr[i] = arr[i + removeCount];
        }

        arr.length = len;
      }
      /**
       * Returns sign of number
       *
       * @memberof PIXI.utils
       * @function sign
       * @param {number} n - the number to check the sign of
       * @returns {number} 0 if `n` is 0, -1 if `n` is negative, 1 if `n` is positive
       */


      function _sign(n) {
        if (n === 0) {
          return 0;
        }

        return n < 0 ? -1 : 1;
      }

      var nextUid = 0;
      /**
       * Gets the next unique identifier
       *
       * @memberof PIXI.utils
       * @function uid
       * @return {number} The next unique identifier to use.
       */

      function _uid() {
        return ++nextUid;
      } // A map of warning messages already fired


      var warnings = {};
      /**
       * Helper for warning developers about deprecated features & settings.
       * A stack track for warnings is given; useful for tracking-down where
       * deprecated methods/properties/classes are being used within the code.
       *
       * @memberof PIXI.utils
       * @function deprecation
       * @param {string} version - The version where the feature became deprecated
       * @param {string} message - Message should include what is deprecated, where, and the new solution
       * @param {number} [ignoreDepth=3] - The number of steps to ignore at the top of the error stack
       *        this is mostly to ignore internal deprecation calls.
       */

      function _deprecation(version, message, ignoreDepth) {
        if (ignoreDepth === void 0) {
          ignoreDepth = 3;
        } // Ignore duplicat


        if (warnings[message]) {
          return;
        }
        /* eslint-disable no-console */


        var stack = new Error().stack; // Handle IE < 10 and Safari < 6

        if (typeof stack === 'undefined') {
          console.warn('PixiJS Deprecation Warning: ', message + "\nDeprecated since v" + version);
        } else {
          // chop off the stack trace which includes PixiJS internal calls
          stack = stack.split('\n').splice(ignoreDepth).join('\n');

          if (console.groupCollapsed) {
            console.groupCollapsed('%cPixiJS Deprecation Warning: %c%s', 'color:#614108;background:#fffbe6', 'font-weight:normal;color:#614108;background:#fffbe6', message + "\nDeprecated since v" + version);
            console.warn(stack);
            console.groupEnd();
          } else {
            console.warn('PixiJS Deprecation Warning: ', message + "\nDeprecated since v" + version);
            console.warn(stack);
          }
        }
        /* eslint-enable no-console */


        warnings[message] = true;
      }
      /**
       * @todo Describe property usage
       *
       * @static
       * @name ProgramCache
       * @memberof PIXI.utils
       * @type {Object}
       */


      var _ProgramCache = {};
      /**
       * @todo Describe property usage
       *
       * @static
       * @name TextureCache
       * @memberof PIXI.utils
       * @type {Object}
       */

      var _TextureCache = Object.create(null);
      /**
       * @todo Describe property usage
       *
       * @static
       * @name BaseTextureCache
       * @memberof PIXI.utils
       * @type {Object}
       */


      var _BaseTextureCache = Object.create(null);
      /**
       * Destroys all texture in the cache
       *
       * @memberof PIXI.utils
       * @function destroyTextureCache
       */


      function _destroyTextureCache() {
        var key;

        for (key in _TextureCache) {
          _TextureCache[key].destroy();
        }

        for (key in _BaseTextureCache) {
          _BaseTextureCache[key].destroy();
        }
      }
      /**
       * Removes all textures from cache, but does not destroy them
       *
       * @memberof PIXI.utils
       * @function clearTextureCache
       */


      function _clearTextureCache() {
        var key;

        for (key in _TextureCache) {
          delete _TextureCache[key];
        }

        for (key in _BaseTextureCache) {
          delete _BaseTextureCache[key];
        }
      }
      /**
       * Creates a Canvas element of the given size to be used as a target for rendering to.
       *
       * @class
       * @memberof PIXI.utils
       */


      var _CanvasRenderTarget =
      /** @class */
      function () {
        /**
         * @param width - the width for the newly created canvas
         * @param height - the height for the newly created canvas
         * @param {number} [resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the canvas
         */
        function CanvasRenderTarget(width, height, resolution) {
          this.canvas = document.createElement('canvas');
          this.context = this.canvas.getContext('2d');
          this.resolution = resolution || _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.RESOLUTION;
          this.resize(width, height);
        }
        /**
         * Clears the canvas that was created by the CanvasRenderTarget class.
         *
         * @private
         */


        CanvasRenderTarget.prototype.clear = function () {
          this.context.setTransform(1, 0, 0, 1, 0, 0);
          this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
        };
        /**
         * Resizes the canvas to the specified width and height.
         *
         * @param desiredWidth - the desired width of the canvas
         * @param desiredHeight - the desired height of the canvas
         */


        CanvasRenderTarget.prototype.resize = function (desiredWidth, desiredHeight) {
          this.canvas.width = Math.round(desiredWidth * this.resolution);
          this.canvas.height = Math.round(desiredHeight * this.resolution);
        };
        /** Destroys this canvas. */


        CanvasRenderTarget.prototype.destroy = function () {
          this.context = null;
          this.canvas = null;
        };

        Object.defineProperty(CanvasRenderTarget.prototype, "width", {
          /**
           * The width of the canvas buffer in pixels.
           *
           * @member {number}
           */
          get: function get() {
            return this.canvas.width;
          },
          set: function set(val) {
            this.canvas.width = Math.round(val);
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(CanvasRenderTarget.prototype, "height", {
          /**
           * The height of the canvas buffer in pixels.
           *
           * @member {number}
           */
          get: function get() {
            return this.canvas.height;
          },
          set: function set(val) {
            this.canvas.height = Math.round(val);
          },
          enumerable: false,
          configurable: true
        });
        return CanvasRenderTarget;
      }();
      /**
       * Trim transparent borders from a canvas
       *
       * @memberof PIXI.utils
       * @function trimCanvas
       * @param {HTMLCanvasElement} canvas - the canvas to trim
       * @returns {object} Trim data
       */


      function _trimCanvas(canvas) {
        // https://gist.github.com/remy/784508
        var width = canvas.width;
        var height = canvas.height;
        var context = canvas.getContext('2d');
        var imageData = context.getImageData(0, 0, width, height);
        var pixels = imageData.data;
        var len = pixels.length;
        var bound = {
          top: null,
          left: null,
          right: null,
          bottom: null
        };
        var data = null;
        var i;
        var x;
        var y;

        for (i = 0; i < len; i += 4) {
          if (pixels[i + 3] !== 0) {
            x = i / 4 % width;
            y = ~~(i / 4 / width);

            if (bound.top === null) {
              bound.top = y;
            }

            if (bound.left === null) {
              bound.left = x;
            } else if (x < bound.left) {
              bound.left = x;
            }

            if (bound.right === null) {
              bound.right = x + 1;
            } else if (bound.right < x) {
              bound.right = x + 1;
            }

            if (bound.bottom === null) {
              bound.bottom = y;
            } else if (bound.bottom < y) {
              bound.bottom = y;
            }
          }
        }

        if (bound.top !== null) {
          width = bound.right - bound.left;
          height = bound.bottom - bound.top + 1;
          data = context.getImageData(bound.left, bound.top, width, height);
        }

        return {
          height: height,
          width: width,
          data: data
        };
      }
      /**
       * Regexp for data URI.
       * Based on: {@link https://github.com/ragingwind/data-uri-regex}
       *
       * @static
       * @constant {RegExp|string} DATA_URI
       * @memberof PIXI
       * @example data:image/png;base64
       */


      var _DATA_URI = /^\s*data:(?:([\w-]+)\/([\w+.-]+))?(?:;charset=([\w-]+))?(?:;(base64))?,(.*)/i;
      /**
       * @memberof PIXI.utils
       * @interface DecomposedDataUri
       */

      /**
       * type, eg. `image`
       * @memberof PIXI.utils.DecomposedDataUri#
       * @member {string} mediaType
       */

      /**
       * Sub type, eg. `png`
       * @memberof PIXI.utils.DecomposedDataUri#
       * @member {string} subType
       */

      /**
       * @memberof PIXI.utils.DecomposedDataUri#
       * @member {string} charset
       */

      /**
       * Data encoding, eg. `base64`
       * @memberof PIXI.utils.DecomposedDataUri#
       * @member {string} encoding
       */

      /**
       * The actual data
       * @memberof PIXI.utils.DecomposedDataUri#
       * @member {string} data
       */

      /**
       * Split a data URI into components. Returns undefined if
       * parameter `dataUri` is not a valid data URI.
       *
       * @memberof PIXI.utils
       * @function decomposeDataUri
       * @param {string} dataUri - the data URI to check
       * @return {PIXI.utils.DecomposedDataUri|undefined} The decomposed data uri or undefined
       */

      function _decomposeDataUri(dataUri) {
        var dataUriMatch = _DATA_URI.exec(dataUri);

        if (dataUriMatch) {
          return {
            mediaType: dataUriMatch[1] ? dataUriMatch[1].toLowerCase() : undefined,
            subType: dataUriMatch[2] ? dataUriMatch[2].toLowerCase() : undefined,
            charset: dataUriMatch[3] ? dataUriMatch[3].toLowerCase() : undefined,
            encoding: dataUriMatch[4] ? dataUriMatch[4].toLowerCase() : undefined,
            data: dataUriMatch[5]
          };
        }

        return undefined;
      }

      var tempAnchor;
      /**
       * Sets the `crossOrigin` property for this resource based on if the url
       * for this resource is cross-origin. If crossOrigin was manually set, this
       * function does nothing.
       * Nipped from the resource loader!
       *
       * @ignore
       * @param {string} url - The url to test.
       * @param {object} [loc=window.location] - The location object to test against.
       * @return {string} The crossOrigin value to use (or empty string for none).
       */

      function _determineCrossOrigin(url$1, loc) {
        if (loc === void 0) {
          loc = self.location;
        } // data: and javascript: urls are considered same-origin


        if (url$1.indexOf('data:') === 0) {
          return '';
        } // default is window.location


        loc = loc || self.location;

        if (!tempAnchor) {
          tempAnchor = document.createElement('a');
        } // let the browser determine the full href for the url of this resource and then
        // parse with the node url lib, we can't use the properties of the anchor element
        // because they don't work in IE9 :(


        tempAnchor.href = url$1;

        var parsedUrl = _url.parse(tempAnchor.href);

        var samePort = !parsedUrl.port && loc.port === '' || parsedUrl.port === loc.port; // if cross origin

        if (parsedUrl.hostname !== loc.hostname || !samePort || parsedUrl.protocol !== loc.protocol) {
          return 'anonymous';
        }

        return '';
      }
      /**
       * get the resolution / device pixel ratio of an asset by looking for the prefix
       * used by spritesheets and image urls
       *
       * @memberof PIXI.utils
       * @function getResolutionOfUrl
       * @param {string} url - the image path
       * @param {number} [defaultValue=1] - the defaultValue if no filename prefix is set.
       * @return {number} resolution / device pixel ratio of an asset
       */


      function _getResolutionOfUrl(url, defaultValue) {
        var resolution = _pixi_settings__WEBPACK_IMPORTED_MODULE_0__.settings.RETINA_PREFIX.exec(url);

        if (resolution) {
          return parseFloat(resolution[1]);
        }

        return defaultValue !== undefined ? defaultValue : 1;
      }
      /***/

    },

    /***/
    97697:
    /*!**********************************************************************!*\
      !*** ./node_modules/@pixi/utils/node_modules/eventemitter3/index.js ***!
      \**********************************************************************/

    /***/
    function _(module) {
      "use strict";

      var has = Object.prototype.hasOwnProperty,
          prefix = '~';
      /**
       * Constructor to create a storage for our `EE` objects.
       * An `Events` instance is a plain object whose properties are event names.
       *
       * @constructor
       * @private
       */

      function Events() {} //
      // We try to not inherit from `Object.prototype`. In some engines creating an
      // instance in this way is faster than calling `Object.create(null)` directly.
      // If `Object.create(null)` is not supported we prefix the event names with a
      // character to make sure that the built-in object properties are not
      // overridden or used as an attack vector.
      //


      if (Object.create) {
        Events.prototype = Object.create(null); //
        // This hack is needed because the `__proto__` property is still inherited in
        // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
        //

        if (!new Events().__proto__) prefix = false;
      }
      /**
       * Representation of a single event listener.
       *
       * @param {Function} fn The listener function.
       * @param {*} context The context to invoke the listener with.
       * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
       * @constructor
       * @private
       */


      function EE(fn, context, once) {
        this.fn = fn;
        this.context = context;
        this.once = once || false;
      }
      /**
       * Add a listener for a given event.
       *
       * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
       * @param {(String|Symbol)} event The event name.
       * @param {Function} fn The listener function.
       * @param {*} context The context to invoke the listener with.
       * @param {Boolean} once Specify if the listener is a one-time listener.
       * @returns {EventEmitter}
       * @private
       */


      function addListener(emitter, event, fn, context, once) {
        if (typeof fn !== 'function') {
          throw new TypeError('The listener must be a function');
        }

        var listener = new EE(fn, context || emitter, once),
            evt = prefix ? prefix + event : event;
        if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);else emitter._events[evt] = [emitter._events[evt], listener];
        return emitter;
      }
      /**
       * Clear event by name.
       *
       * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
       * @param {(String|Symbol)} evt The Event name.
       * @private
       */


      function clearEvent(emitter, evt) {
        if (--emitter._eventsCount === 0) emitter._events = new Events();else delete emitter._events[evt];
      }
      /**
       * Minimal `EventEmitter` interface that is molded against the Node.js
       * `EventEmitter` interface.
       *
       * @constructor
       * @public
       */


      function EventEmitter() {
        this._events = new Events();
        this._eventsCount = 0;
      }
      /**
       * Return an array listing the events for which the emitter has registered
       * listeners.
       *
       * @returns {Array}
       * @public
       */


      EventEmitter.prototype.eventNames = function eventNames() {
        var names = [],
            events,
            name;
        if (this._eventsCount === 0) return names;

        for (name in events = this._events) {
          if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
        }

        if (Object.getOwnPropertySymbols) {
          return names.concat(Object.getOwnPropertySymbols(events));
        }

        return names;
      };
      /**
       * Return the listeners registered for a given event.
       *
       * @param {(String|Symbol)} event The event name.
       * @returns {Array} The registered listeners.
       * @public
       */


      EventEmitter.prototype.listeners = function listeners(event) {
        var evt = prefix ? prefix + event : event,
            handlers = this._events[evt];
        if (!handlers) return [];
        if (handlers.fn) return [handlers.fn];

        for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
          ee[i] = handlers[i].fn;
        }

        return ee;
      };
      /**
       * Return the number of listeners listening to a given event.
       *
       * @param {(String|Symbol)} event The event name.
       * @returns {Number} The number of listeners.
       * @public
       */


      EventEmitter.prototype.listenerCount = function listenerCount(event) {
        var evt = prefix ? prefix + event : event,
            listeners = this._events[evt];
        if (!listeners) return 0;
        if (listeners.fn) return 1;
        return listeners.length;
      };
      /**
       * Calls each of the listeners registered for a given event.
       *
       * @param {(String|Symbol)} event The event name.
       * @returns {Boolean} `true` if the event had listeners, else `false`.
       * @public
       */


      EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
        var evt = prefix ? prefix + event : event;
        if (!this._events[evt]) return false;
        var listeners = this._events[evt],
            len = arguments.length,
            args,
            i;

        if (listeners.fn) {
          if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

          switch (len) {
            case 1:
              return listeners.fn.call(listeners.context), true;

            case 2:
              return listeners.fn.call(listeners.context, a1), true;

            case 3:
              return listeners.fn.call(listeners.context, a1, a2), true;

            case 4:
              return listeners.fn.call(listeners.context, a1, a2, a3), true;

            case 5:
              return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;

            case 6:
              return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
          }

          for (i = 1, args = new Array(len - 1); i < len; i++) {
            args[i - 1] = arguments[i];
          }

          listeners.fn.apply(listeners.context, args);
        } else {
          var length = listeners.length,
              j;

          for (i = 0; i < length; i++) {
            if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

            switch (len) {
              case 1:
                listeners[i].fn.call(listeners[i].context);
                break;

              case 2:
                listeners[i].fn.call(listeners[i].context, a1);
                break;

              case 3:
                listeners[i].fn.call(listeners[i].context, a1, a2);
                break;

              case 4:
                listeners[i].fn.call(listeners[i].context, a1, a2, a3);
                break;

              default:
                if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
                  args[j - 1] = arguments[j];
                }
                listeners[i].fn.apply(listeners[i].context, args);
            }
          }
        }

        return true;
      };
      /**
       * Add a listener for a given event.
       *
       * @param {(String|Symbol)} event The event name.
       * @param {Function} fn The listener function.
       * @param {*} [context=this] The context to invoke the listener with.
       * @returns {EventEmitter} `this`.
       * @public
       */


      EventEmitter.prototype.on = function on(event, fn, context) {
        return addListener(this, event, fn, context, false);
      };
      /**
       * Add a one-time listener for a given event.
       *
       * @param {(String|Symbol)} event The event name.
       * @param {Function} fn The listener function.
       * @param {*} [context=this] The context to invoke the listener with.
       * @returns {EventEmitter} `this`.
       * @public
       */


      EventEmitter.prototype.once = function once(event, fn, context) {
        return addListener(this, event, fn, context, true);
      };
      /**
       * Remove the listeners of a given event.
       *
       * @param {(String|Symbol)} event The event name.
       * @param {Function} fn Only remove the listeners that match this function.
       * @param {*} context Only remove the listeners that have this context.
       * @param {Boolean} once Only remove one-time listeners.
       * @returns {EventEmitter} `this`.
       * @public
       */


      EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
        var evt = prefix ? prefix + event : event;
        if (!this._events[evt]) return this;

        if (!fn) {
          clearEvent(this, evt);
          return this;
        }

        var listeners = this._events[evt];

        if (listeners.fn) {
          if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
            clearEvent(this, evt);
          }
        } else {
          for (var i = 0, events = [], length = listeners.length; i < length; i++) {
            if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
              events.push(listeners[i]);
            }
          } //
          // Reset the array, or remove it completely if we have no more listeners.
          //


          if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;else clearEvent(this, evt);
        }

        return this;
      };
      /**
       * Remove all listeners, or those of the specified event.
       *
       * @param {(String|Symbol)} [event] The event name.
       * @returns {EventEmitter} `this`.
       * @public
       */


      EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
        var evt;

        if (event) {
          evt = prefix ? prefix + event : event;
          if (this._events[evt]) clearEvent(this, evt);
        } else {
          this._events = new Events();
          this._eventsCount = 0;
        }

        return this;
      }; //
      // Alias methods names because people roll like that.
      //


      EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
      EventEmitter.prototype.addListener = EventEmitter.prototype.on; //
      // Expose the prefix.
      //

      EventEmitter.prefixed = prefix; //
      // Allow `EventEmitter` to be imported as module namespace.
      //

      EventEmitter.EventEmitter = EventEmitter; //
      // Expose the module.
      //

      if (true) {
        module.exports = EventEmitter;
      }
      /***/

    },

    /***/
    9205:
    /*!*******************************************!*\
      !*** ./node_modules/earcut/src/earcut.js ***!
      \*******************************************/

    /***/
    function _(module) {
      "use strict";

      module.exports = earcut;
      module.exports["default"] = earcut;

      function earcut(data, holeIndices, dim) {
        dim = dim || 2;
        var hasHoles = holeIndices && holeIndices.length,
            outerLen = hasHoles ? holeIndices[0] * dim : data.length,
            outerNode = linkedList(data, 0, outerLen, dim, true),
            triangles = [];
        if (!outerNode || outerNode.next === outerNode.prev) return triangles;
        var minX, minY, maxX, maxY, x, y, invSize;
        if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox

        if (data.length > 80 * dim) {
          minX = maxX = data[0];
          minY = maxY = data[1];

          for (var i = dim; i < outerLen; i += dim) {
            x = data[i];
            y = data[i + 1];
            if (x < minX) minX = x;
            if (y < minY) minY = y;
            if (x > maxX) maxX = x;
            if (y > maxY) maxY = y;
          } // minX, minY and invSize are later used to transform coords into integers for z-order calculation


          invSize = Math.max(maxX - minX, maxY - minY);
          invSize = invSize !== 0 ? 1 / invSize : 0;
        }

        earcutLinked(outerNode, triangles, dim, minX, minY, invSize);
        return triangles;
      } // create a circular doubly linked list from polygon points in the specified winding order


      function linkedList(data, start, end, dim, clockwise) {
        var i, last;

        if (clockwise === signedArea(data, start, end, dim) > 0) {
          for (i = start; i < end; i += dim) {
            last = insertNode(i, data[i], data[i + 1], last);
          }
        } else {
          for (i = end - dim; i >= start; i -= dim) {
            last = insertNode(i, data[i], data[i + 1], last);
          }
        }

        if (last && equals(last, last.next)) {
          removeNode(last);
          last = last.next;
        }

        return last;
      } // eliminate colinear or duplicate points


      function filterPoints(start, end) {
        if (!start) return start;
        if (!end) end = start;
        var p = start,
            again;

        do {
          again = false;

          if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
            removeNode(p);
            p = end = p.prev;
            if (p === p.next) break;
            again = true;
          } else {
            p = p.next;
          }
        } while (again || p !== end);

        return end;
      } // main ear slicing loop which triangulates a polygon (given as a linked list)


      function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
        if (!ear) return; // interlink polygon nodes in z-order

        if (!pass && invSize) indexCurve(ear, minX, minY, invSize);
        var stop = ear,
            prev,
            next; // iterate through ears, slicing them one by one

        while (ear.prev !== ear.next) {
          prev = ear.prev;
          next = ear.next;

          if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
            // cut off the triangle
            triangles.push(prev.i / dim);
            triangles.push(ear.i / dim);
            triangles.push(next.i / dim);
            removeNode(ear); // skipping the next vertex leads to less sliver triangles

            ear = next.next;
            stop = next.next;
            continue;
          }

          ear = next; // if we looped through the whole remaining polygon and can't find any more ears

          if (ear === stop) {
            // try filtering points and slicing again
            if (!pass) {
              earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1); // if this didn't work, try curing all small self-intersections locally
            } else if (pass === 1) {
              ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
              earcutLinked(ear, triangles, dim, minX, minY, invSize, 2); // as a last resort, try splitting the remaining polygon into two
            } else if (pass === 2) {
              splitEarcut(ear, triangles, dim, minX, minY, invSize);
            }

            break;
          }
        }
      } // check whether a polygon node forms a valid ear with adjacent nodes


      function isEar(ear) {
        var a = ear.prev,
            b = ear,
            c = ear.next;
        if (area(a, b, c) >= 0) return false; // reflex, can't be an ear
        // now make sure we don't have other points inside the potential ear

        var p = ear.next.next;

        while (p !== ear.prev) {
          if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
          p = p.next;
        }

        return true;
      }

      function isEarHashed(ear, minX, minY, invSize) {
        var a = ear.prev,
            b = ear,
            c = ear.next;
        if (area(a, b, c) >= 0) return false; // reflex, can't be an ear
        // triangle bbox; min & max are calculated like this for speed

        var minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,
            minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,
            maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,
            maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;

        var minZ = zOrder(minTX, minTY, minX, minY, invSize),
            maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);
        var p = ear.prevZ,
            n = ear.nextZ; // look for points inside the triangle in both directions

        while (p && p.z >= minZ && n && n.z <= maxZ) {
          if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
          p = p.prevZ;
          if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
          n = n.nextZ;
        } // look for remaining points in decreasing z-order


        while (p && p.z >= minZ) {
          if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
          p = p.prevZ;
        } // look for remaining points in increasing z-order


        while (n && n.z <= maxZ) {
          if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
          n = n.nextZ;
        }

        return true;
      } // go through all polygon nodes and cure small local self-intersections


      function cureLocalIntersections(start, triangles, dim) {
        var p = start;

        do {
          var a = p.prev,
              b = p.next.next;

          if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
            triangles.push(a.i / dim);
            triangles.push(p.i / dim);
            triangles.push(b.i / dim); // remove two nodes involved

            removeNode(p);
            removeNode(p.next);
            p = start = b;
          }

          p = p.next;
        } while (p !== start);

        return filterPoints(p);
      } // try splitting polygon into two and triangulate them independently


      function splitEarcut(start, triangles, dim, minX, minY, invSize) {
        // look for a valid diagonal that divides the polygon into two
        var a = start;

        do {
          var b = a.next.next;

          while (b !== a.prev) {
            if (a.i !== b.i && isValidDiagonal(a, b)) {
              // split the polygon in two by the diagonal
              var c = splitPolygon(a, b); // filter colinear points around the cuts

              a = filterPoints(a, a.next);
              c = filterPoints(c, c.next); // run earcut on each half

              earcutLinked(a, triangles, dim, minX, minY, invSize);
              earcutLinked(c, triangles, dim, minX, minY, invSize);
              return;
            }

            b = b.next;
          }

          a = a.next;
        } while (a !== start);
      } // link every hole into the outer loop, producing a single-ring polygon without holes


      function eliminateHoles(data, holeIndices, outerNode, dim) {
        var queue = [],
            i,
            len,
            start,
            end,
            list;

        for (i = 0, len = holeIndices.length; i < len; i++) {
          start = holeIndices[i] * dim;
          end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
          list = linkedList(data, start, end, dim, false);
          if (list === list.next) list.steiner = true;
          queue.push(getLeftmost(list));
        }

        queue.sort(compareX); // process holes from left to right

        for (i = 0; i < queue.length; i++) {
          outerNode = eliminateHole(queue[i], outerNode);
          outerNode = filterPoints(outerNode, outerNode.next);
        }

        return outerNode;
      }

      function compareX(a, b) {
        return a.x - b.x;
      } // find a bridge between vertices that connects hole with an outer ring and and link it


      function eliminateHole(hole, outerNode) {
        var bridge = findHoleBridge(hole, outerNode);

        if (!bridge) {
          return outerNode;
        }

        var bridgeReverse = splitPolygon(bridge, hole); // filter collinear points around the cuts

        var filteredBridge = filterPoints(bridge, bridge.next);
        filterPoints(bridgeReverse, bridgeReverse.next); // Check if input node was removed by the filtering

        return outerNode === bridge ? filteredBridge : outerNode;
      } // David Eberly's algorithm for finding a bridge between hole and outer polygon


      function findHoleBridge(hole, outerNode) {
        var p = outerNode,
            hx = hole.x,
            hy = hole.y,
            qx = -Infinity,
            m; // find a segment intersected by a ray from the hole's leftmost point to the left;
        // segment's endpoint with lesser x will be potential connection point

        do {
          if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);

            if (x <= hx && x > qx) {
              qx = x;

              if (x === hx) {
                if (hy === p.y) return p;
                if (hy === p.next.y) return p.next;
              }

              m = p.x < p.next.x ? p : p.next;
            }
          }

          p = p.next;
        } while (p !== outerNode);

        if (!m) return null;
        if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint
        // look for points inside the triangle of hole point, segment intersection and endpoint;
        // if there are no points found, we have a valid connection;
        // otherwise choose the point of the minimum angle with the ray as connection point

        var stop = m,
            mx = m.x,
            my = m.y,
            tanMin = Infinity,
            tan;
        p = m;

        do {
          if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential

            if (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {
              m = p;
              tanMin = tan;
            }
          }

          p = p.next;
        } while (p !== stop);

        return m;
      } // whether sector in vertex m contains sector in vertex p in the same coordinates


      function sectorContainsSector(m, p) {
        return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
      } // interlink polygon nodes in z-order


      function indexCurve(start, minX, minY, invSize) {
        var p = start;

        do {
          if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);
          p.prevZ = p.prev;
          p.nextZ = p.next;
          p = p.next;
        } while (p !== start);

        p.prevZ.nextZ = null;
        p.prevZ = null;
        sortLinked(p);
      } // Simon Tatham's linked list merge sort algorithm
      // http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html


      function sortLinked(list) {
        var i,
            p,
            q,
            e,
            tail,
            numMerges,
            pSize,
            qSize,
            inSize = 1;

        do {
          p = list;
          list = null;
          tail = null;
          numMerges = 0;

          while (p) {
            numMerges++;
            q = p;
            pSize = 0;

            for (i = 0; i < inSize; i++) {
              pSize++;
              q = q.nextZ;
              if (!q) break;
            }

            qSize = inSize;

            while (pSize > 0 || qSize > 0 && q) {
              if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
                e = p;
                p = p.nextZ;
                pSize--;
              } else {
                e = q;
                q = q.nextZ;
                qSize--;
              }

              if (tail) tail.nextZ = e;else list = e;
              e.prevZ = tail;
              tail = e;
            }

            p = q;
          }

          tail.nextZ = null;
          inSize *= 2;
        } while (numMerges > 1);

        return list;
      } // z-order of a point given coords and inverse of the longer side of data bbox


      function zOrder(x, y, minX, minY, invSize) {
        // coords are transformed into non-negative 15-bit integer range
        x = 32767 * (x - minX) * invSize;
        y = 32767 * (y - minY) * invSize;
        x = (x | x << 8) & 0x00FF00FF;
        x = (x | x << 4) & 0x0F0F0F0F;
        x = (x | x << 2) & 0x33333333;
        x = (x | x << 1) & 0x55555555;
        y = (y | y << 8) & 0x00FF00FF;
        y = (y | y << 4) & 0x0F0F0F0F;
        y = (y | y << 2) & 0x33333333;
        y = (y | y << 1) & 0x55555555;
        return x | y << 1;
      } // find the leftmost node of a polygon ring


      function getLeftmost(start) {
        var p = start,
            leftmost = start;

        do {
          if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;
          p = p.next;
        } while (p !== start);

        return leftmost;
      } // check if a point lies within a convex triangle


      function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
        return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
      } // check if a diagonal between two polygon nodes is valid (lies in polygon interior)


      function isValidDiagonal(a, b) {
        return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && ( // dones't intersect other edges
        locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && ( // locally visible
        area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors
        equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case
      } // signed area of a triangle


      function area(p, q, r) {
        return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
      } // check if two points are equal


      function equals(p1, p2) {
        return p1.x === p2.x && p1.y === p2.y;
      } // check if two segments intersect


      function intersects(p1, q1, p2, q2) {
        var o1 = sign(area(p1, q1, p2));
        var o2 = sign(area(p1, q1, q2));
        var o3 = sign(area(p2, q2, p1));
        var o4 = sign(area(p2, q2, q1));
        if (o1 !== o2 && o3 !== o4) return true; // general case

        if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1

        if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1

        if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2

        if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2

        return false;
      } // for collinear points p, q, r, check if point q lies on segment pr


      function onSegment(p, q, r) {
        return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
      }

      function sign(num) {
        return num > 0 ? 1 : num < 0 ? -1 : 0;
      } // check if a polygon diagonal intersects any polygon segments


      function intersectsPolygon(a, b) {
        var p = a;

        do {
          if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;
          p = p.next;
        } while (p !== a);

        return false;
      } // check if a polygon diagonal is locally inside the polygon


      function locallyInside(a, b) {
        return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
      } // check if the middle point of a polygon diagonal is inside the polygon


      function middleInside(a, b) {
        var p = a,
            inside = false,
            px = (a.x + b.x) / 2,
            py = (a.y + b.y) / 2;

        do {
          if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;
          p = p.next;
        } while (p !== a);

        return inside;
      } // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
      // if one belongs to the outer ring and another to a hole, it merges it into a single ring


      function splitPolygon(a, b) {
        var a2 = new Node(a.i, a.x, a.y),
            b2 = new Node(b.i, b.x, b.y),
            an = a.next,
            bp = b.prev;
        a.next = b;
        b.prev = a;
        a2.next = an;
        an.prev = a2;
        b2.next = a2;
        a2.prev = b2;
        bp.next = b2;
        b2.prev = bp;
        return b2;
      } // create a node and optionally link it with previous one (in a circular doubly linked list)


      function insertNode(i, x, y, last) {
        var p = new Node(i, x, y);

        if (!last) {
          p.prev = p;
          p.next = p;
        } else {
          p.next = last.next;
          p.prev = last;
          last.next.prev = p;
          last.next = p;
        }

        return p;
      }

      function removeNode(p) {
        p.next.prev = p.prev;
        p.prev.next = p.next;
        if (p.prevZ) p.prevZ.nextZ = p.nextZ;
        if (p.nextZ) p.nextZ.prevZ = p.prevZ;
      }

      function Node(i, x, y) {
        // vertex index in coordinates array
        this.i = i; // vertex coordinates

        this.x = x;
        this.y = y; // previous and next vertex nodes in a polygon ring

        this.prev = null;
        this.next = null; // z-order curve value

        this.z = null; // previous and next nodes in z-order

        this.prevZ = null;
        this.nextZ = null; // indicates whether this is a steiner point

        this.steiner = false;
      } // return a percentage difference between the polygon area and its triangulation area;
      // used to verify correctness of triangulation


      earcut.deviation = function (data, holeIndices, dim, triangles) {
        var hasHoles = holeIndices && holeIndices.length;
        var outerLen = hasHoles ? holeIndices[0] * dim : data.length;
        var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));

        if (hasHoles) {
          for (var i = 0, len = holeIndices.length; i < len; i++) {
            var start = holeIndices[i] * dim;
            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
            polygonArea -= Math.abs(signedArea(data, start, end, dim));
          }
        }

        var trianglesArea = 0;

        for (i = 0; i < triangles.length; i += 3) {
          var a = triangles[i] * dim;
          var b = triangles[i + 1] * dim;
          var c = triangles[i + 2] * dim;
          trianglesArea += Math.abs((data[a] - data[c]) * (data[b + 1] - data[a + 1]) - (data[a] - data[b]) * (data[c + 1] - data[a + 1]));
        }

        return polygonArea === 0 && trianglesArea === 0 ? 0 : Math.abs((trianglesArea - polygonArea) / polygonArea);
      };

      function signedArea(data, start, end, dim) {
        var sum = 0;

        for (var i = start, j = end - dim; i < end; i += dim) {
          sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
          j = i;
        }

        return sum;
      } // turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts


      earcut.flatten = function (data) {
        var dim = data[0][0].length,
            result = {
          vertices: [],
          holes: [],
          dimensions: dim
        },
            holeIndex = 0;

        for (var i = 0; i < data.length; i++) {
          for (var j = 0; j < data[i].length; j++) {
            for (var d = 0; d < dim; d++) {
              result.vertices.push(data[i][j][d]);
            }
          }

          if (i > 0) {
            holeIndex += data[i - 1].length;
            result.holes.push(holeIndex);
          }
        }

        return result;
      };
      /***/

    },

    /***/
    50190:
    /*!**********************************************!*\
      !*** ./node_modules/ismobilejs/esm/index.js ***!
      \**********************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "default": function _default() {
          return (
            /* reexport safe */
            _isMobile__WEBPACK_IMPORTED_MODULE_0__["default"]
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _isMobile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./isMobile */
      67361);
      /***/

    },

    /***/
    67361:
    /*!*************************************************!*\
      !*** ./node_modules/ismobilejs/esm/isMobile.js ***!
      \*************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "default": function _default() {
          return (
            /* binding */
            isMobile
          );
        }
        /* harmony export */

      });

      var appleIphone = /iPhone/i;
      var appleIpod = /iPod/i;
      var appleTablet = /iPad/i;
      var appleUniversal = /\biOS-universal(?:.+)Mac\b/i;
      var androidPhone = /\bAndroid(?:.+)Mobile\b/i;
      var androidTablet = /Android/i;
      var amazonPhone = /(?:SD4930UR|\bSilk(?:.+)Mobile\b)/i;
      var amazonTablet = /Silk/i;
      var windowsPhone = /Windows Phone/i;
      var windowsTablet = /\bWindows(?:.+)ARM\b/i;
      var otherBlackBerry = /BlackBerry/i;
      var otherBlackBerry10 = /BB10/i;
      var otherOpera = /Opera Mini/i;
      var otherChrome = /\b(CriOS|Chrome)(?:.+)Mobile/i;
      var otherFirefox = /Mobile(?:.+)Firefox\b/i;

      var isAppleTabletOnIos13 = function isAppleTabletOnIos13(navigator) {
        return typeof navigator !== 'undefined' && navigator.platform === 'MacIntel' && typeof navigator.maxTouchPoints === 'number' && navigator.maxTouchPoints > 1 && typeof MSStream === 'undefined';
      };

      function createMatch(userAgent) {
        return function (regex) {
          return regex.test(userAgent);
        };
      }

      function isMobile(param) {
        var nav = {
          userAgent: '',
          platform: '',
          maxTouchPoints: 0
        };

        if (!param && typeof navigator !== 'undefined') {
          nav = {
            userAgent: navigator.userAgent,
            platform: navigator.platform,
            maxTouchPoints: navigator.maxTouchPoints || 0
          };
        } else if (typeof param === 'string') {
          nav.userAgent = param;
        } else if (param && param.userAgent) {
          nav = {
            userAgent: param.userAgent,
            platform: param.platform,
            maxTouchPoints: param.maxTouchPoints || 0
          };
        }

        var userAgent = nav.userAgent;
        var tmp = userAgent.split('[FBAN');

        if (typeof tmp[1] !== 'undefined') {
          userAgent = tmp[0];
        }

        tmp = userAgent.split('Twitter');

        if (typeof tmp[1] !== 'undefined') {
          userAgent = tmp[0];
        }

        var match = createMatch(userAgent);
        var result = {
          apple: {
            phone: match(appleIphone) && !match(windowsPhone),
            ipod: match(appleIpod),
            tablet: !match(appleIphone) && (match(appleTablet) || isAppleTabletOnIos13(nav)) && !match(windowsPhone),
            universal: match(appleUniversal),
            device: (match(appleIphone) || match(appleIpod) || match(appleTablet) || match(appleUniversal) || isAppleTabletOnIos13(nav)) && !match(windowsPhone)
          },
          amazon: {
            phone: match(amazonPhone),
            tablet: !match(amazonPhone) && match(amazonTablet),
            device: match(amazonPhone) || match(amazonTablet)
          },
          android: {
            phone: !match(windowsPhone) && match(amazonPhone) || !match(windowsPhone) && match(androidPhone),
            tablet: !match(windowsPhone) && !match(amazonPhone) && !match(androidPhone) && (match(amazonTablet) || match(androidTablet)),
            device: !match(windowsPhone) && (match(amazonPhone) || match(amazonTablet) || match(androidPhone) || match(androidTablet)) || match(/\bokhttp\b/i)
          },
          windows: {
            phone: match(windowsPhone),
            tablet: match(windowsTablet),
            device: match(windowsPhone) || match(windowsTablet)
          },
          other: {
            blackberry: match(otherBlackBerry),
            blackberry10: match(otherBlackBerry10),
            opera: match(otherOpera),
            firefox: match(otherFirefox),
            chrome: match(otherChrome),
            device: match(otherBlackBerry) || match(otherBlackBerry10) || match(otherOpera) || match(otherFirefox) || match(otherChrome)
          },
          any: false,
          phone: false,
          tablet: false
        };
        result.any = result.apple.device || result.android.device || result.windows.device || result.other.device;
        result.phone = result.apple.phone || result.android.phone || result.windows.phone;
        result.tablet = result.apple.tablet || result.android.tablet || result.windows.tablet;
        return result;
      }
      /***/

    },

    /***/
    15707:
    /*!********************************************!*\
      !*** ./node_modules/querystring/decode.js ***!
      \********************************************/

    /***/
    function _(module) {
      "use strict"; // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.
      // If obj.hasOwnProperty has been overridden, then calling
      // obj.hasOwnProperty(prop) will break.
      // See: https://github.com/joyent/node/issues/1707

      function hasOwnProperty(obj, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
      }

      module.exports = function (qs, sep, eq, options) {
        sep = sep || '&';
        eq = eq || '=';
        var obj = {};

        if (typeof qs !== 'string' || qs.length === 0) {
          return obj;
        }

        var regexp = /\+/g;
        qs = qs.split(sep);
        var maxKeys = 1000;

        if (options && typeof options.maxKeys === 'number') {
          maxKeys = options.maxKeys;
        }

        var len = qs.length; // maxKeys <= 0 means that we should not limit keys count

        if (maxKeys > 0 && len > maxKeys) {
          len = maxKeys;
        }

        for (var i = 0; i < len; ++i) {
          var x = qs[i].replace(regexp, '%20'),
              idx = x.indexOf(eq),
              kstr,
              vstr,
              k,
              v;

          if (idx >= 0) {
            kstr = x.substr(0, idx);
            vstr = x.substr(idx + 1);
          } else {
            kstr = x;
            vstr = '';
          }

          k = decodeURIComponent(kstr);
          v = decodeURIComponent(vstr);

          if (!hasOwnProperty(obj, k)) {
            obj[k] = v;
          } else if (Array.isArray(obj[k])) {
            obj[k].push(v);
          } else {
            obj[k] = [obj[k], v];
          }
        }

        return obj;
      };
      /***/

    },

    /***/
    49974:
    /*!********************************************!*\
      !*** ./node_modules/querystring/encode.js ***!
      \********************************************/

    /***/
    function _(module) {
      "use strict"; // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.

      var stringifyPrimitive = function stringifyPrimitive(v) {
        switch (typeof v) {
          case 'string':
            return v;

          case 'boolean':
            return v ? 'true' : 'false';

          case 'number':
            return isFinite(v) ? v : '';

          default:
            return '';
        }
      };

      module.exports = function (obj, sep, eq, name) {
        sep = sep || '&';
        eq = eq || '=';

        if (obj === null) {
          obj = undefined;
        }

        if (typeof obj === 'object') {
          return Object.keys(obj).map(function (k) {
            var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;

            if (Array.isArray(obj[k])) {
              return obj[k].map(function (v) {
                return ks + encodeURIComponent(stringifyPrimitive(v));
              }).join(sep);
            } else {
              return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
            }
          }).join(sep);
        }

        if (!name) return '';
        return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
      };
      /***/

    },

    /***/
    90785:
    /*!*******************************************!*\
      !*** ./node_modules/querystring/index.js ***!
      \*******************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      exports.decode = exports.parse = __webpack_require__(
      /*! ./decode */
      15707);
      exports.encode = exports.stringify = __webpack_require__(
      /*! ./encode */
      49974);
      /***/
    },

    /***/
    34122:
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/dist/esm/internal/observable/forkJoin.js ***!
      \********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "forkJoin": function forkJoin() {
          return (
            /* binding */
            _forkJoin
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../Observable */
      59442);
      /* harmony import */


      var _util_argsArgArrayOrObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/argsArgArrayOrObject */
      42027);
      /* harmony import */


      var _innerFrom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./innerFrom */
      46244);
      /* harmony import */


      var _util_args__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../util/args */
      9674);
      /* harmony import */


      var _operators_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ../operators/OperatorSubscriber */
      87272);
      /* harmony import */


      var _util_mapOneOrManyArgs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ../util/mapOneOrManyArgs */
      86172);
      /* harmony import */


      var _util_createObject__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ../util/createObject */
      89455);

      function _forkJoin() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var resultSelector = (0, _util_args__WEBPACK_IMPORTED_MODULE_0__.popResultSelector)(args);

        var _ref3 = (0, _util_argsArgArrayOrObject__WEBPACK_IMPORTED_MODULE_1__.argsArgArrayOrObject)(args),
            sources = _ref3.args,
            keys = _ref3.keys;

        var result = new _Observable__WEBPACK_IMPORTED_MODULE_2__.Observable(function (subscriber) {
          var length = sources.length;

          if (!length) {
            subscriber.complete();
            return;
          }

          var values = new Array(length);
          var remainingCompletions = length;
          var remainingEmissions = length;

          var _loop = function _loop(sourceIndex) {
            var hasValue = false;
            (0, _innerFrom__WEBPACK_IMPORTED_MODULE_3__.innerFrom)(sources[sourceIndex]).subscribe(new _operators_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_4__.OperatorSubscriber(subscriber, function (value) {
              if (!hasValue) {
                hasValue = true;
                remainingEmissions--;
              }

              values[sourceIndex] = value;
            }, function () {
              return remainingCompletions--;
            }, undefined, function () {
              if (!remainingCompletions || !hasValue) {
                if (!remainingEmissions) {
                  subscriber.next(keys ? (0, _util_createObject__WEBPACK_IMPORTED_MODULE_5__.createObject)(keys, values) : values);
                }

                subscriber.complete();
              }
            }));
          };

          for (var sourceIndex = 0; sourceIndex < length; sourceIndex++) {
            _loop(sourceIndex);
          }
        });
        return resultSelector ? result.pipe((0, _util_mapOneOrManyArgs__WEBPACK_IMPORTED_MODULE_6__.mapOneOrManyArgs)(resultSelector)) : result;
      }
      /***/

    },

    /***/
    25371:
    /*!************************************************************!*\
      !*** ./node_modules/url/node_modules/punycode/punycode.js ***!
      \************************************************************/

    /***/
    function _(module, exports, __webpack_require__) {
      /* module decorator */
      module = __webpack_require__.nmd(module);

      var __WEBPACK_AMD_DEFINE_RESULT__;
      /*! https://mths.be/punycode v1.3.2 by @mathias */


      ;

      (function (root) {
        /** Detect free variables */
        var freeExports = true && exports && !exports.nodeType && exports;
        var freeModule = true && module && !module.nodeType && module;
        var freeGlobal = typeof global == 'object' && global;

        if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
          root = freeGlobal;
        }
        /**
         * The `punycode` object.
         * @name punycode
         * @type Object
         */


        var punycode,

        /** Highest positive signed 32-bit float value */
        maxInt = 2147483647,
            // aka. 0x7FFFFFFF or 2^31-1

        /** Bootstring parameters */
        base = 36,
            tMin = 1,
            tMax = 26,
            skew = 38,
            damp = 700,
            initialBias = 72,
            initialN = 128,
            // 0x80
        delimiter = '-',
            // '\x2D'

        /** Regular expressions */
        regexPunycode = /^xn--/,
            regexNonASCII = /[^\x20-\x7E]/,
            // unprintable ASCII chars + non-ASCII chars
        regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g,
            // RFC 3490 separators

        /** Error messages */
        errors = {
          'overflow': 'Overflow: input needs wider integers to process',
          'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
          'invalid-input': 'Invalid input'
        },

        /** Convenience shortcuts */
        baseMinusTMin = base - tMin,
            floor = Math.floor,
            stringFromCharCode = String.fromCharCode,

        /** Temporary variable */
        key;
        /*--------------------------------------------------------------------------*/

        /**
         * A generic error utility function.
         * @private
         * @param {String} type The error type.
         * @returns {Error} Throws a `RangeError` with the applicable error message.
         */

        function error(type) {
          throw RangeError(errors[type]);
        }
        /**
         * A generic `Array#map` utility function.
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} callback The function that gets called for every array
         * item.
         * @returns {Array} A new array of values returned by the callback function.
         */


        function map(array, fn) {
          var length = array.length;
          var result = [];

          while (length--) {
            result[length] = fn(array[length]);
          }

          return result;
        }
        /**
         * A simple `Array#map`-like wrapper to work with domain name strings or email
         * addresses.
         * @private
         * @param {String} domain The domain name or email address.
         * @param {Function} callback The function that gets called for every
         * character.
         * @returns {Array} A new string of characters returned by the callback
         * function.
         */


        function mapDomain(string, fn) {
          var parts = string.split('@');
          var result = '';

          if (parts.length > 1) {
            // In email addresses, only the domain name should be punycoded. Leave
            // the local part (i.e. everything up to `@`) intact.
            result = parts[0] + '@';
            string = parts[1];
          } // Avoid `split(regex)` for IE8 compatibility. See #17.


          string = string.replace(regexSeparators, '\x2E');
          var labels = string.split('.');
          var encoded = map(labels, fn).join('.');
          return result + encoded;
        }
        /**
         * Creates an array containing the numeric code points of each Unicode
         * character in the string. While JavaScript uses UCS-2 internally,
         * this function will convert a pair of surrogate halves (each of which
         * UCS-2 exposes as separate characters) into a single code point,
         * matching UTF-16.
         * @see `punycode.ucs2.encode`
         * @see <https://mathiasbynens.be/notes/javascript-encoding>
         * @memberOf punycode.ucs2
         * @name decode
         * @param {String} string The Unicode input string (UCS-2).
         * @returns {Array} The new array of code points.
         */


        function ucs2decode(string) {
          var output = [],
              counter = 0,
              length = string.length,
              value,
              extra;

          while (counter < length) {
            value = string.charCodeAt(counter++);

            if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
              // high surrogate, and there is a next character
              extra = string.charCodeAt(counter++);

              if ((extra & 0xFC00) == 0xDC00) {
                // low surrogate
                output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
              } else {
                // unmatched surrogate; only append this code unit, in case the next
                // code unit is the high surrogate of a surrogate pair
                output.push(value);
                counter--;
              }
            } else {
              output.push(value);
            }
          }

          return output;
        }
        /**
         * Creates a string based on an array of numeric code points.
         * @see `punycode.ucs2.decode`
         * @memberOf punycode.ucs2
         * @name encode
         * @param {Array} codePoints The array of numeric code points.
         * @returns {String} The new Unicode string (UCS-2).
         */


        function ucs2encode(array) {
          return map(array, function (value) {
            var output = '';

            if (value > 0xFFFF) {
              value -= 0x10000;
              output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
              value = 0xDC00 | value & 0x3FF;
            }

            output += stringFromCharCode(value);
            return output;
          }).join('');
        }
        /**
         * Converts a basic code point into a digit/integer.
         * @see `digitToBasic()`
         * @private
         * @param {Number} codePoint The basic numeric code point value.
         * @returns {Number} The numeric value of a basic code point (for use in
         * representing integers) in the range `0` to `base - 1`, or `base` if
         * the code point does not represent a value.
         */


        function basicToDigit(codePoint) {
          if (codePoint - 48 < 10) {
            return codePoint - 22;
          }

          if (codePoint - 65 < 26) {
            return codePoint - 65;
          }

          if (codePoint - 97 < 26) {
            return codePoint - 97;
          }

          return base;
        }
        /**
         * Converts a digit/integer into a basic code point.
         * @see `basicToDigit()`
         * @private
         * @param {Number} digit The numeric value of a basic code point.
         * @returns {Number} The basic code point whose value (when used for
         * representing integers) is `digit`, which needs to be in the range
         * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
         * used; else, the lowercase form is used. The behavior is undefined
         * if `flag` is non-zero and `digit` has no uppercase form.
         */


        function digitToBasic(digit, flag) {
          //  0..25 map to ASCII a..z or A..Z
          // 26..35 map to ASCII 0..9
          return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
        }
        /**
         * Bias adaptation function as per section 3.4 of RFC 3492.
         * http://tools.ietf.org/html/rfc3492#section-3.4
         * @private
         */


        function adapt(delta, numPoints, firstTime) {
          var k = 0;
          delta = firstTime ? floor(delta / damp) : delta >> 1;
          delta += floor(delta / numPoints);

          for (; delta > baseMinusTMin * tMax >> 1; k += base) {
            delta = floor(delta / baseMinusTMin);
          }

          return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
        }
        /**
         * Converts a Punycode string of ASCII-only symbols to a string of Unicode
         * symbols.
         * @memberOf punycode
         * @param {String} input The Punycode string of ASCII-only symbols.
         * @returns {String} The resulting string of Unicode symbols.
         */


        function decode(input) {
          // Don't use UCS-2
          var output = [],
              inputLength = input.length,
              out,
              i = 0,
              n = initialN,
              bias = initialBias,
              basic,
              j,
              index,
              oldi,
              w,
              k,
              digit,
              t,

          /** Cached calculation results */
          baseMinusT; // Handle the basic code points: let `basic` be the number of input code
          // points before the last delimiter, or `0` if there is none, then copy
          // the first basic code points to the output.

          basic = input.lastIndexOf(delimiter);

          if (basic < 0) {
            basic = 0;
          }

          for (j = 0; j < basic; ++j) {
            // if it's not a basic code point
            if (input.charCodeAt(j) >= 0x80) {
              error('not-basic');
            }

            output.push(input.charCodeAt(j));
          } // Main decoding loop: start just after the last delimiter if any basic code
          // points were copied; start at the beginning otherwise.


          for (index = basic > 0 ? basic + 1 : 0; index < inputLength;) {
            // `index` is the index of the next character to be consumed.
            // Decode a generalized variable-length integer into `delta`,
            // which gets added to `i`. The overflow checking is easier
            // if we increase `i` as we go, then subtract off its starting
            // value at the end to obtain `delta`.
            for (oldi = i, w = 1, k = base;; k += base) {
              if (index >= inputLength) {
                error('invalid-input');
              }

              digit = basicToDigit(input.charCodeAt(index++));

              if (digit >= base || digit > floor((maxInt - i) / w)) {
                error('overflow');
              }

              i += digit * w;
              t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

              if (digit < t) {
                break;
              }

              baseMinusT = base - t;

              if (w > floor(maxInt / baseMinusT)) {
                error('overflow');
              }

              w *= baseMinusT;
            }

            out = output.length + 1;
            bias = adapt(i - oldi, out, oldi == 0); // `i` was supposed to wrap around from `out` to `0`,
            // incrementing `n` each time, so we'll fix that now:

            if (floor(i / out) > maxInt - n) {
              error('overflow');
            }

            n += floor(i / out);
            i %= out; // Insert `n` at position `i` of the output

            output.splice(i++, 0, n);
          }

          return ucs2encode(output);
        }
        /**
         * Converts a string of Unicode symbols (e.g. a domain name label) to a
         * Punycode string of ASCII-only symbols.
         * @memberOf punycode
         * @param {String} input The string of Unicode symbols.
         * @returns {String} The resulting Punycode string of ASCII-only symbols.
         */


        function encode(input) {
          var n,
              delta,
              handledCPCount,
              basicLength,
              bias,
              j,
              m,
              q,
              k,
              t,
              currentValue,
              output = [],

          /** `inputLength` will hold the number of code points in `input`. */
          inputLength,

          /** Cached calculation results */
          handledCPCountPlusOne,
              baseMinusT,
              qMinusT; // Convert the input in UCS-2 to Unicode

          input = ucs2decode(input); // Cache the length

          inputLength = input.length; // Initialize the state

          n = initialN;
          delta = 0;
          bias = initialBias; // Handle the basic code points

          for (j = 0; j < inputLength; ++j) {
            currentValue = input[j];

            if (currentValue < 0x80) {
              output.push(stringFromCharCode(currentValue));
            }
          }

          handledCPCount = basicLength = output.length; // `handledCPCount` is the number of code points that have been handled;
          // `basicLength` is the number of basic code points.
          // Finish the basic string - if it is not empty - with a delimiter

          if (basicLength) {
            output.push(delimiter);
          } // Main encoding loop:


          while (handledCPCount < inputLength) {
            // All non-basic code points < n have been handled already. Find the next
            // larger one:
            for (m = maxInt, j = 0; j < inputLength; ++j) {
              currentValue = input[j];

              if (currentValue >= n && currentValue < m) {
                m = currentValue;
              }
            } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
            // but guard against overflow


            handledCPCountPlusOne = handledCPCount + 1;

            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
              error('overflow');
            }

            delta += (m - n) * handledCPCountPlusOne;
            n = m;

            for (j = 0; j < inputLength; ++j) {
              currentValue = input[j];

              if (currentValue < n && ++delta > maxInt) {
                error('overflow');
              }

              if (currentValue == n) {
                // Represent delta as a generalized variable-length integer
                for (q = delta, k = base;; k += base) {
                  t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

                  if (q < t) {
                    break;
                  }

                  qMinusT = q - t;
                  baseMinusT = base - t;
                  output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                  q = floor(qMinusT / baseMinusT);
                }

                output.push(stringFromCharCode(digitToBasic(q, 0)));
                bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                delta = 0;
                ++handledCPCount;
              }
            }

            ++delta;
            ++n;
          }

          return output.join('');
        }
        /**
         * Converts a Punycode string representing a domain name or an email address
         * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
         * it doesn't matter if you call it on a string that has already been
         * converted to Unicode.
         * @memberOf punycode
         * @param {String} input The Punycoded domain name or email address to
         * convert to Unicode.
         * @returns {String} The Unicode representation of the given Punycode
         * string.
         */


        function toUnicode(input) {
          return mapDomain(input, function (string) {
            return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
          });
        }
        /**
         * Converts a Unicode string representing a domain name or an email address to
         * Punycode. Only the non-ASCII parts of the domain name will be converted,
         * i.e. it doesn't matter if you call it with a domain that's already in
         * ASCII.
         * @memberOf punycode
         * @param {String} input The domain name or email address to convert, as a
         * Unicode string.
         * @returns {String} The Punycode representation of the given domain name or
         * email address.
         */


        function toASCII(input) {
          return mapDomain(input, function (string) {
            return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
          });
        }
        /*--------------------------------------------------------------------------*/

        /** Define the public API */


        punycode = {
          /**
           * A string representing the current Punycode.js version number.
           * @memberOf punycode
           * @type String
           */
          'version': '1.3.2',

          /**
           * An object of methods to convert from JavaScript's internal character
           * representation (UCS-2) to Unicode code points, and back.
           * @see <https://mathiasbynens.be/notes/javascript-encoding>
           * @memberOf punycode
           * @type Object
           */
          'ucs2': {
            'decode': ucs2decode,
            'encode': ucs2encode
          },
          'decode': decode,
          'encode': encode,
          'toASCII': toASCII,
          'toUnicode': toUnicode
        };
        /** Expose `punycode` */
        // Some AMD build optimizers, like r.js, check for specific condition patterns
        // like the following:

        if (true) {
          !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
            return punycode;
          }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else {}
      })(this);
      /***/

    },

    /***/
    55627:
    /*!*********************************!*\
      !*** ./node_modules/url/url.js ***!
      \*********************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict"; // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.

      var punycode = __webpack_require__(
      /*! punycode */
      25371);

      var util = __webpack_require__(
      /*! ./util */
      40345);

      exports.parse = urlParse;
      exports.resolve = urlResolve;
      exports.resolveObject = urlResolveObject;
      exports.format = urlFormat;
      exports.Url = Url;

      function Url() {
        this.protocol = null;
        this.slashes = null;
        this.auth = null;
        this.host = null;
        this.port = null;
        this.hostname = null;
        this.hash = null;
        this.search = null;
        this.query = null;
        this.pathname = null;
        this.path = null;
        this.href = null;
      } // Reference: RFC 3986, RFC 1808, RFC 2396
      // define these here so at least they only have to be
      // compiled once on the first module load.


      var protocolPattern = /^([a-z0-9.+-]+:)/i,
          portPattern = /:[0-9]*$/,
          // Special case for a simple path URL
      simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
          // RFC 2396: characters reserved for delimiting URLs.
      // We actually just auto-escape these.
      delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
          // RFC 2396: characters not allowed for various reasons.
      unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
          // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
      autoEscape = ['\''].concat(unwise),
          // Characters that are never ever allowed in a hostname.
      // Note that any invalid chars are also handled, but these
      // are the ones that are *expected* to be seen, so we fast-path
      // them.
      nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
          hostEndingChars = ['/', '?', '#'],
          hostnameMaxLen = 255,
          hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
          hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
          // protocols that can allow "unsafe" and "unwise" chars.
      unsafeProtocol = {
        'javascript': true,
        'javascript:': true
      },
          // protocols that never have a hostname.
      hostlessProtocol = {
        'javascript': true,
        'javascript:': true
      },
          // protocols that always contain a // bit.
      slashedProtocol = {
        'http': true,
        'https': true,
        'ftp': true,
        'gopher': true,
        'file': true,
        'http:': true,
        'https:': true,
        'ftp:': true,
        'gopher:': true,
        'file:': true
      },
          querystring = __webpack_require__(
      /*! querystring */
      90785);

      function urlParse(url, parseQueryString, slashesDenoteHost) {
        if (url && util.isObject(url) && url instanceof Url) return url;
        var u = new Url();
        u.parse(url, parseQueryString, slashesDenoteHost);
        return u;
      }

      Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
        if (!util.isString(url)) {
          throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
        } // Copy chrome, IE, opera backslash-handling behavior.
        // Back slashes before the query string get converted to forward slashes
        // See: https://code.google.com/p/chromium/issues/detail?id=25916


        var queryIndex = url.indexOf('?'),
            splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',
            uSplit = url.split(splitter),
            slashRegex = /\\/g;
        uSplit[0] = uSplit[0].replace(slashRegex, '/');
        url = uSplit.join(splitter);
        var rest = url; // trim before proceeding.
        // This is to support parse stuff like "  http://foo.com  \n"

        rest = rest.trim();

        if (!slashesDenoteHost && url.split('#').length === 1) {
          // Try fast path regexp
          var simplePath = simplePathPattern.exec(rest);

          if (simplePath) {
            this.path = rest;
            this.href = rest;
            this.pathname = simplePath[1];

            if (simplePath[2]) {
              this.search = simplePath[2];

              if (parseQueryString) {
                this.query = querystring.parse(this.search.substr(1));
              } else {
                this.query = this.search.substr(1);
              }
            } else if (parseQueryString) {
              this.search = '';
              this.query = {};
            }

            return this;
          }
        }

        var proto = protocolPattern.exec(rest);

        if (proto) {
          proto = proto[0];
          var lowerProto = proto.toLowerCase();
          this.protocol = lowerProto;
          rest = rest.substr(proto.length);
        } // figure out if it's got a host
        // user@server is *always* interpreted as a hostname, and url
        // resolution will treat //foo/bar as host=foo,path=bar because that's
        // how the browser resolves relative URLs.


        if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
          var slashes = rest.substr(0, 2) === '//';

          if (slashes && !(proto && hostlessProtocol[proto])) {
            rest = rest.substr(2);
            this.slashes = true;
          }
        }

        if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
          // there's a hostname.
          // the first instance of /, ?, ;, or # ends the host.
          //
          // If there is an @ in the hostname, then non-host chars *are* allowed
          // to the left of the last @ sign, unless some host-ending character
          // comes *before* the @-sign.
          // URLs are obnoxious.
          //
          // ex:
          // http://a@b@c/ => user:a@b host:c
          // http://a@b?@c => user:a host:c path:/?@c
          // v0.12 TODO(isaacs): This is not quite how Chrome does things.
          // Review our test case against browsers more comprehensively.
          // find the first instance of any hostEndingChars
          var hostEnd = -1;

          for (var i = 0; i < hostEndingChars.length; i++) {
            var hec = rest.indexOf(hostEndingChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
          } // at this point, either we have an explicit point where the
          // auth portion cannot go past, or the last @ char is the decider.


          var auth, atSign;

          if (hostEnd === -1) {
            // atSign can be anywhere.
            atSign = rest.lastIndexOf('@');
          } else {
            // atSign must be in auth portion.
            // http://a@b/c@d => host:b auth:a path:/c@d
            atSign = rest.lastIndexOf('@', hostEnd);
          } // Now we have a portion which is definitely the auth.
          // Pull that off.


          if (atSign !== -1) {
            auth = rest.slice(0, atSign);
            rest = rest.slice(atSign + 1);
            this.auth = decodeURIComponent(auth);
          } // the host is the remaining to the left of the first non-host char


          hostEnd = -1;

          for (var i = 0; i < nonHostChars.length; i++) {
            var hec = rest.indexOf(nonHostChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
          } // if we still have not hit it, then the entire thing is a host.


          if (hostEnd === -1) hostEnd = rest.length;
          this.host = rest.slice(0, hostEnd);
          rest = rest.slice(hostEnd); // pull out port.

          this.parseHost(); // we've indicated that there is a hostname,
          // so even if it's empty, it has to be present.

          this.hostname = this.hostname || ''; // if hostname begins with [ and ends with ]
          // assume that it's an IPv6 address.

          var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']'; // validate a little.

          if (!ipv6Hostname) {
            var hostparts = this.hostname.split(/\./);

            for (var i = 0, l = hostparts.length; i < l; i++) {
              var part = hostparts[i];
              if (!part) continue;

              if (!part.match(hostnamePartPattern)) {
                var newpart = '';

                for (var j = 0, k = part.length; j < k; j++) {
                  if (part.charCodeAt(j) > 127) {
                    // we replace non-ASCII char with a temporary placeholder
                    // we need this to make sure size of hostname is not
                    // broken by replacing non-ASCII by nothing
                    newpart += 'x';
                  } else {
                    newpart += part[j];
                  }
                } // we test again with ASCII char only


                if (!newpart.match(hostnamePartPattern)) {
                  var validParts = hostparts.slice(0, i);
                  var notHost = hostparts.slice(i + 1);
                  var bit = part.match(hostnamePartStart);

                  if (bit) {
                    validParts.push(bit[1]);
                    notHost.unshift(bit[2]);
                  }

                  if (notHost.length) {
                    rest = '/' + notHost.join('.') + rest;
                  }

                  this.hostname = validParts.join('.');
                  break;
                }
              }
            }
          }

          if (this.hostname.length > hostnameMaxLen) {
            this.hostname = '';
          } else {
            // hostnames are always lower case.
            this.hostname = this.hostname.toLowerCase();
          }

          if (!ipv6Hostname) {
            // IDNA Support: Returns a punycoded representation of "domain".
            // It only converts parts of the domain name that
            // have non-ASCII characters, i.e. it doesn't matter if
            // you call it with a domain that already is ASCII-only.
            this.hostname = punycode.toASCII(this.hostname);
          }

          var p = this.port ? ':' + this.port : '';
          var h = this.hostname || '';
          this.host = h + p;
          this.href += this.host; // strip [ and ] from the hostname
          // the host field still retains them, though

          if (ipv6Hostname) {
            this.hostname = this.hostname.substr(1, this.hostname.length - 2);

            if (rest[0] !== '/') {
              rest = '/' + rest;
            }
          }
        } // now rest is set to the post-host stuff.
        // chop off any delim chars.


        if (!unsafeProtocol[lowerProto]) {
          // First, make 100% sure that any "autoEscape" chars get
          // escaped, even if encodeURIComponent doesn't think they
          // need to be.
          for (var i = 0, l = autoEscape.length; i < l; i++) {
            var ae = autoEscape[i];
            if (rest.indexOf(ae) === -1) continue;
            var esc = encodeURIComponent(ae);

            if (esc === ae) {
              esc = escape(ae);
            }

            rest = rest.split(ae).join(esc);
          }
        } // chop off from the tail first.


        var hash = rest.indexOf('#');

        if (hash !== -1) {
          // got a fragment string.
          this.hash = rest.substr(hash);
          rest = rest.slice(0, hash);
        }

        var qm = rest.indexOf('?');

        if (qm !== -1) {
          this.search = rest.substr(qm);
          this.query = rest.substr(qm + 1);

          if (parseQueryString) {
            this.query = querystring.parse(this.query);
          }

          rest = rest.slice(0, qm);
        } else if (parseQueryString) {
          // no query string, but parseQueryString still requested
          this.search = '';
          this.query = {};
        }

        if (rest) this.pathname = rest;

        if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
          this.pathname = '/';
        } //to support http.request


        if (this.pathname || this.search) {
          var p = this.pathname || '';
          var s = this.search || '';
          this.path = p + s;
        } // finally, reconstruct the href based on what has been validated.


        this.href = this.format();
        return this;
      }; // format a parsed object into a url string


      function urlFormat(obj) {
        // ensure it's an object, and not a string url.
        // If it's an obj, this is a no-op.
        // this way, you can call url_format() on strings
        // to clean up potentially wonky urls.
        if (util.isString(obj)) obj = urlParse(obj);
        if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
        return obj.format();
      }

      Url.prototype.format = function () {
        var auth = this.auth || '';

        if (auth) {
          auth = encodeURIComponent(auth);
          auth = auth.replace(/%3A/i, ':');
          auth += '@';
        }

        var protocol = this.protocol || '',
            pathname = this.pathname || '',
            hash = this.hash || '',
            host = false,
            query = '';

        if (this.host) {
          host = auth + this.host;
        } else if (this.hostname) {
          host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');

          if (this.port) {
            host += ':' + this.port;
          }
        }

        if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {
          query = querystring.stringify(this.query);
        }

        var search = this.search || query && '?' + query || '';
        if (protocol && protocol.substr(-1) !== ':') protocol += ':'; // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
        // unless they had them to begin with.

        if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
          host = '//' + (host || '');
          if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
        } else if (!host) {
          host = '';
        }

        if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
        if (search && search.charAt(0) !== '?') search = '?' + search;
        pathname = pathname.replace(/[?#]/g, function (match) {
          return encodeURIComponent(match);
        });
        search = search.replace('#', '%23');
        return protocol + host + pathname + search + hash;
      };

      function urlResolve(source, relative) {
        return urlParse(source, false, true).resolve(relative);
      }

      Url.prototype.resolve = function (relative) {
        return this.resolveObject(urlParse(relative, false, true)).format();
      };

      function urlResolveObject(source, relative) {
        if (!source) return relative;
        return urlParse(source, false, true).resolveObject(relative);
      }

      Url.prototype.resolveObject = function (relative) {
        if (util.isString(relative)) {
          var rel = new Url();
          rel.parse(relative, false, true);
          relative = rel;
        }

        var result = new Url();
        var tkeys = Object.keys(this);

        for (var tk = 0; tk < tkeys.length; tk++) {
          var tkey = tkeys[tk];
          result[tkey] = this[tkey];
        } // hash is always overridden, no matter what.
        // even href="" will remove it.


        result.hash = relative.hash; // if the relative url is empty, then there's nothing left to do here.

        if (relative.href === '') {
          result.href = result.format();
          return result;
        } // hrefs like //foo/bar always cut to the protocol.


        if (relative.slashes && !relative.protocol) {
          // take everything except the protocol from relative
          var rkeys = Object.keys(relative);

          for (var rk = 0; rk < rkeys.length; rk++) {
            var rkey = rkeys[rk];
            if (rkey !== 'protocol') result[rkey] = relative[rkey];
          } //urlParse appends trailing / to urls like http://www.example.com


          if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
            result.path = result.pathname = '/';
          }

          result.href = result.format();
          return result;
        }

        if (relative.protocol && relative.protocol !== result.protocol) {
          // if it's a known url protocol, then changing
          // the protocol does weird things
          // first, if it's not file:, then we MUST have a host,
          // and if there was a path
          // to begin with, then we MUST have a path.
          // if it is file:, then the host is dropped,
          // because that's known to be hostless.
          // anything else is assumed to be absolute.
          if (!slashedProtocol[relative.protocol]) {
            var keys = Object.keys(relative);

            for (var v = 0; v < keys.length; v++) {
              var k = keys[v];
              result[k] = relative[k];
            }

            result.href = result.format();
            return result;
          }

          result.protocol = relative.protocol;

          if (!relative.host && !hostlessProtocol[relative.protocol]) {
            var relPath = (relative.pathname || '').split('/');

            while (relPath.length && !(relative.host = relPath.shift())) {
              ;
            }

            if (!relative.host) relative.host = '';
            if (!relative.hostname) relative.hostname = '';
            if (relPath[0] !== '') relPath.unshift('');
            if (relPath.length < 2) relPath.unshift('');
            result.pathname = relPath.join('/');
          } else {
            result.pathname = relative.pathname;
          }

          result.search = relative.search;
          result.query = relative.query;
          result.host = relative.host || '';
          result.auth = relative.auth;
          result.hostname = relative.hostname || relative.host;
          result.port = relative.port; // to support http.request

          if (result.pathname || result.search) {
            var p = result.pathname || '';
            var s = result.search || '';
            result.path = p + s;
          }

          result.slashes = result.slashes || relative.slashes;
          result.href = result.format();
          return result;
        }

        var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',
            isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',
            mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,
            removeAllDots = mustEndAbs,
            srcPath = result.pathname && result.pathname.split('/') || [],
            relPath = relative.pathname && relative.pathname.split('/') || [],
            psychotic = result.protocol && !slashedProtocol[result.protocol]; // if the url is a non-slashed url, then relative
        // links like ../.. should be able
        // to crawl up to the hostname, as well.  This is strange.
        // result.protocol has already been set by now.
        // Later on, put the first path part into the host field.

        if (psychotic) {
          result.hostname = '';
          result.port = null;

          if (result.host) {
            if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);
          }

          result.host = '';

          if (relative.protocol) {
            relative.hostname = null;
            relative.port = null;

            if (relative.host) {
              if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);
            }

            relative.host = null;
          }

          mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
        }

        if (isRelAbs) {
          // it's absolute.
          result.host = relative.host || relative.host === '' ? relative.host : result.host;
          result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;
          result.search = relative.search;
          result.query = relative.query;
          srcPath = relPath; // fall through to the dot-handling below.
        } else if (relPath.length) {
          // it's relative
          // throw away the existing file, and take the new path instead.
          if (!srcPath) srcPath = [];
          srcPath.pop();
          srcPath = srcPath.concat(relPath);
          result.search = relative.search;
          result.query = relative.query;
        } else if (!util.isNullOrUndefined(relative.search)) {
          // just pull out the search.
          // like href='?foo'.
          // Put this after the other two cases because it simplifies the booleans
          if (psychotic) {
            result.hostname = result.host = srcPath.shift(); //occationaly the auth can get stuck only in host
            //this especially happens in cases like
            //url.resolveObject('mailto:local1@domain1', 'local2@domain2')

            var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

            if (authInHost) {
              result.auth = authInHost.shift();
              result.host = result.hostname = authInHost.shift();
            }
          }

          result.search = relative.search;
          result.query = relative.query; //to support http.request

          if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
            result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
          }

          result.href = result.format();
          return result;
        }

        if (!srcPath.length) {
          // no path at all.  easy.
          // we've already handled the other stuff above.
          result.pathname = null; //to support http.request

          if (result.search) {
            result.path = '/' + result.search;
          } else {
            result.path = null;
          }

          result.href = result.format();
          return result;
        } // if a url ENDs in . or .., then it must get a trailing slash.
        // however, if it ends in anything else non-slashy,
        // then it must NOT get a trailing slash.


        var last = srcPath.slice(-1)[0];
        var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === ''; // strip single dots, resolve double dots to parent dir
        // if the path tries to go above the root, `up` ends up > 0

        var up = 0;

        for (var i = srcPath.length; i >= 0; i--) {
          last = srcPath[i];

          if (last === '.') {
            srcPath.splice(i, 1);
          } else if (last === '..') {
            srcPath.splice(i, 1);
            up++;
          } else if (up) {
            srcPath.splice(i, 1);
            up--;
          }
        } // if the path is allowed to go above the root, restore leading ..s


        if (!mustEndAbs && !removeAllDots) {
          for (; up--; up) {
            srcPath.unshift('..');
          }
        }

        if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
          srcPath.unshift('');
        }

        if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {
          srcPath.push('');
        }

        var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/'; // put the host back

        if (psychotic) {
          result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : ''; //occationaly the auth can get stuck only in host
          //this especially happens in cases like
          //url.resolveObject('mailto:local1@domain1', 'local2@domain2')

          var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

          if (authInHost) {
            result.auth = authInHost.shift();
            result.host = result.hostname = authInHost.shift();
          }
        }

        mustEndAbs = mustEndAbs || result.host && srcPath.length;

        if (mustEndAbs && !isAbsolute) {
          srcPath.unshift('');
        }

        if (!srcPath.length) {
          result.pathname = null;
          result.path = null;
        } else {
          result.pathname = srcPath.join('/');
        } //to support request.http


        if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
          result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
        }

        result.auth = relative.auth || result.auth;
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
      };

      Url.prototype.parseHost = function () {
        var host = this.host;
        var port = portPattern.exec(host);

        if (port) {
          port = port[0];

          if (port !== ':') {
            this.port = port.substr(1);
          }

          host = host.substr(0, host.length - port.length);
        }

        if (host) this.hostname = host;
      };
      /***/

    },

    /***/
    40345:
    /*!**********************************!*\
      !*** ./node_modules/url/util.js ***!
      \**********************************/

    /***/
    function _(module) {
      "use strict";

      module.exports = {
        isString: function isString(arg) {
          return typeof arg === 'string';
        },
        isObject: function isObject(arg) {
          return typeof arg === 'object' && arg !== null;
        },
        isNull: function isNull(arg) {
          return arg === null;
        },
        isNullOrUndefined: function isNullOrUndefined(arg) {
          return arg == null;
        }
      };
      /***/
    },

    /***/
    65590:
    /*!**********************************************************!*\
      !*** ./node_modules/@angular/material/fesm2015/icon.mjs ***!
      \**********************************************************/

    /***/
    function _(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "ICON_REGISTRY_PROVIDER": function ICON_REGISTRY_PROVIDER() {
          return (
            /* binding */
            _ICON_REGISTRY_PROVIDER
          );
        },

        /* harmony export */
        "ICON_REGISTRY_PROVIDER_FACTORY": function ICON_REGISTRY_PROVIDER_FACTORY() {
          return (
            /* binding */
            _ICON_REGISTRY_PROVIDER_FACTORY
          );
        },

        /* harmony export */
        "MAT_ICON_LOCATION": function MAT_ICON_LOCATION() {
          return (
            /* binding */
            _MAT_ICON_LOCATION
          );
        },

        /* harmony export */
        "MAT_ICON_LOCATION_FACTORY": function MAT_ICON_LOCATION_FACTORY() {
          return (
            /* binding */
            _MAT_ICON_LOCATION_FACTORY
          );
        },

        /* harmony export */
        "MatIcon": function MatIcon() {
          return (
            /* binding */
            _MatIcon
          );
        },

        /* harmony export */
        "MatIconModule": function MatIconModule() {
          return (
            /* binding */
            _MatIconModule
          );
        },

        /* harmony export */
        "MatIconRegistry": function MatIconRegistry() {
          return (
            /* binding */
            _MatIconRegistry
          );
        },

        /* harmony export */
        "getMatIconFailedToSanitizeLiteralError": function getMatIconFailedToSanitizeLiteralError() {
          return (
            /* binding */
            _getMatIconFailedToSanitizeLiteralError
          );
        },

        /* harmony export */
        "getMatIconFailedToSanitizeUrlError": function getMatIconFailedToSanitizeUrlError() {
          return (
            /* binding */
            _getMatIconFailedToSanitizeUrlError
          );
        },

        /* harmony export */
        "getMatIconNameNotFoundError": function getMatIconNameNotFoundError() {
          return (
            /* binding */
            _getMatIconNameNotFoundError
          );
        },

        /* harmony export */
        "getMatIconNoHttpProviderError": function getMatIconNoHttpProviderError() {
          return (
            /* binding */
            _getMatIconNoHttpProviderError
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      2316);
      /* harmony import */


      var _angular_material_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! @angular/material/core */
      88133);
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      76484);
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! @angular/common */
      54364);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! rxjs */
      75249);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! rxjs */
      7964);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! rxjs */
      34122);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! rxjs */
      9329);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs/operators */
      7048);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! rxjs/operators */
      53399);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! rxjs/operators */
      82426);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! rxjs/operators */
      94850);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! rxjs/operators */
      62640);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
      /*! rxjs/operators */
      84608);
      /* harmony import */


      var _angular_common_http__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! @angular/common/http */
      53882);
      /* harmony import */


      var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! @angular/platform-browser */
      71570);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * The Trusted Types policy, or null if Trusted Types are not
       * enabled/supported, or undefined if the policy has not been created yet.
       */


      var _c0 = ["*"];
      var policy;
      /**
       * Returns the Trusted Types policy, or null if Trusted Types are not
       * enabled/supported. The first call to this function will create the policy.
       */

      function getPolicy() {
        if (policy === undefined) {
          policy = null;

          if (typeof window !== 'undefined') {
            var ttWindow = window;

            if (ttWindow.trustedTypes !== undefined) {
              policy = ttWindow.trustedTypes.createPolicy('angular#components', {
                createHTML: function createHTML(s) {
                  return s;
                }
              });
            }
          }
        }

        return policy;
      }
      /**
       * Unsafely promote a string to a TrustedHTML, falling back to strings when
       * Trusted Types are not available.
       * @security This is a security-sensitive function; any use of this function
       * must go through security review. In particular, it must be assured that the
       * provided string will never cause an XSS vulnerability if used in a context
       * that will be interpreted as HTML by a browser, e.g. when assigning to
       * element.innerHTML.
       */


      function trustedHTMLFromString(html) {
        var _a;

        return ((_a = getPolicy()) === null || _a === void 0 ? void 0 : _a.createHTML(html)) || html;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Returns an exception to be thrown in the case when attempting to
       * load an icon with a name that cannot be found.
       * @docs-private
       */


      function _getMatIconNameNotFoundError(iconName) {
        return Error("Unable to find icon with the name \"".concat(iconName, "\""));
      }
      /**
       * Returns an exception to be thrown when the consumer attempts to use
       * `<mat-icon>` without including @angular/common/http.
       * @docs-private
       */


      function _getMatIconNoHttpProviderError() {
        return Error('Could not find HttpClient provider for use with Angular Material icons. ' + 'Please include the HttpClientModule from @angular/common/http in your ' + 'app imports.');
      }
      /**
       * Returns an exception to be thrown when a URL couldn't be sanitized.
       * @param url URL that was attempted to be sanitized.
       * @docs-private
       */


      function _getMatIconFailedToSanitizeUrlError(url) {
        return Error("The URL provided to MatIconRegistry was not trusted as a resource URL " + "via Angular's DomSanitizer. Attempted URL was \"".concat(url, "\"."));
      }
      /**
       * Returns an exception to be thrown when a HTML string couldn't be sanitized.
       * @param literal HTML that was attempted to be sanitized.
       * @docs-private
       */


      function _getMatIconFailedToSanitizeLiteralError(literal) {
        return Error("The literal provided to MatIconRegistry was not trusted as safe HTML by " + "Angular's DomSanitizer. Attempted literal was \"".concat(literal, "\"."));
      }
      /**
       * Configuration for an icon, including the URL and possibly the cached SVG element.
       * @docs-private
       */


      var SvgIconConfig = /*#__PURE__*/_createClass(function SvgIconConfig(url, svgText, options) {
        _classCallCheck(this, SvgIconConfig);

        this.url = url;
        this.svgText = svgText;
        this.options = options;
      });
      /**
       * Service to register and display icons used by the `<mat-icon>` component.
       * - Registers icon URLs by namespace and name.
       * - Registers icon set URLs by namespace.
       * - Registers aliases for CSS classes, for use with icon fonts.
       * - Loads icons from URLs and extracts individual icons from icon sets.
       */


      var _MatIconRegistry = /*#__PURE__*/function () {
        function _MatIconRegistry(_httpClient, _sanitizer, document, _errorHandler) {
          _classCallCheck(this, _MatIconRegistry);

          this._httpClient = _httpClient;
          this._sanitizer = _sanitizer;
          this._errorHandler = _errorHandler;
          /**
           * URLs and cached SVG elements for individual icons. Keys are of the format "[namespace]:[icon]".
           */

          this._svgIconConfigs = new Map();
          /**
           * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.
           * Multiple icon sets can be registered under the same namespace.
           */

          this._iconSetConfigs = new Map();
          /** Cache for icons loaded by direct URLs. */

          this._cachedIconsByUrl = new Map();
          /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */

          this._inProgressUrlFetches = new Map();
          /** Map from font identifiers to their CSS class names. Used for icon fonts. */

          this._fontCssClassesByAlias = new Map();
          /** Registered icon resolver functions. */

          this._resolvers = [];
          /**
           * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.
           * The default 'material-icons' value assumes that the material icon font has been loaded as
           * described at http://google.github.io/material-design-icons/#icon-font-for-the-web
           */

          this._defaultFontSetClass = 'material-icons';
          this._document = document;
        }
        /**
         * Registers an icon by URL in the default namespace.
         * @param iconName Name under which the icon should be registered.
         * @param url
         */


        _createClass(_MatIconRegistry, [{
          key: "addSvgIcon",
          value: function addSvgIcon(iconName, url, options) {
            return this.addSvgIconInNamespace('', iconName, url, options);
          }
          /**
           * Registers an icon using an HTML string in the default namespace.
           * @param iconName Name under which the icon should be registered.
           * @param literal SVG source of the icon.
           */

        }, {
          key: "addSvgIconLiteral",
          value: function addSvgIconLiteral(iconName, literal, options) {
            return this.addSvgIconLiteralInNamespace('', iconName, literal, options);
          }
          /**
           * Registers an icon by URL in the specified namespace.
           * @param namespace Namespace in which the icon should be registered.
           * @param iconName Name under which the icon should be registered.
           * @param url
           */

        }, {
          key: "addSvgIconInNamespace",
          value: function addSvgIconInNamespace(namespace, iconName, url, options) {
            return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));
          }
          /**
           * Registers an icon resolver function with the registry. The function will be invoked with the
           * name and namespace of an icon when the registry tries to resolve the URL from which to fetch
           * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,
           * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers
           * will be invoked in the order in which they have been registered.
           * @param resolver Resolver function to be registered.
           */

        }, {
          key: "addSvgIconResolver",
          value: function addSvgIconResolver(resolver) {
            this._resolvers.push(resolver);

            return this;
          }
          /**
           * Registers an icon using an HTML string in the specified namespace.
           * @param namespace Namespace in which the icon should be registered.
           * @param iconName Name under which the icon should be registered.
           * @param literal SVG source of the icon.
           */

        }, {
          key: "addSvgIconLiteralInNamespace",
          value: function addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {
            var cleanLiteral = this._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_0__.SecurityContext.HTML, literal); // TODO: add an ngDevMode check


            if (!cleanLiteral) {
              throw _getMatIconFailedToSanitizeLiteralError(literal);
            } // Security: The literal is passed in as SafeHtml, and is thus trusted.


            var trustedLiteral = trustedHTMLFromString(cleanLiteral);
            return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', trustedLiteral, options));
          }
          /**
           * Registers an icon set by URL in the default namespace.
           * @param url
           */

        }, {
          key: "addSvgIconSet",
          value: function addSvgIconSet(url, options) {
            return this.addSvgIconSetInNamespace('', url, options);
          }
          /**
           * Registers an icon set using an HTML string in the default namespace.
           * @param literal SVG source of the icon set.
           */

        }, {
          key: "addSvgIconSetLiteral",
          value: function addSvgIconSetLiteral(literal, options) {
            return this.addSvgIconSetLiteralInNamespace('', literal, options);
          }
          /**
           * Registers an icon set by URL in the specified namespace.
           * @param namespace Namespace in which to register the icon set.
           * @param url
           */

        }, {
          key: "addSvgIconSetInNamespace",
          value: function addSvgIconSetInNamespace(namespace, url, options) {
            return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));
          }
          /**
           * Registers an icon set using an HTML string in the specified namespace.
           * @param namespace Namespace in which to register the icon set.
           * @param literal SVG source of the icon set.
           */

        }, {
          key: "addSvgIconSetLiteralInNamespace",
          value: function addSvgIconSetLiteralInNamespace(namespace, literal, options) {
            var cleanLiteral = this._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_0__.SecurityContext.HTML, literal);

            if (!cleanLiteral) {
              throw _getMatIconFailedToSanitizeLiteralError(literal);
            } // Security: The literal is passed in as SafeHtml, and is thus trusted.


            var trustedLiteral = trustedHTMLFromString(cleanLiteral);
            return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', trustedLiteral, options));
          }
          /**
           * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon
           * component with the alias as the fontSet input will cause the class name to be applied
           * to the `<mat-icon>` element.
           *
           * @param alias Alias for the font.
           * @param className Class name override to be used instead of the alias.
           */

        }, {
          key: "registerFontClassAlias",
          value: function registerFontClassAlias(alias) {
            var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : alias;

            this._fontCssClassesByAlias.set(alias, className);

            return this;
          }
          /**
           * Returns the CSS class name associated with the alias by a previous call to
           * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.
           */

        }, {
          key: "classNameForFontAlias",
          value: function classNameForFontAlias(alias) {
            return this._fontCssClassesByAlias.get(alias) || alias;
          }
          /**
           * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not
           * have a fontSet input value, and is not loading an icon by name or URL.
           *
           * @param className
           */

        }, {
          key: "setDefaultFontSetClass",
          value: function setDefaultFontSetClass(className) {
            this._defaultFontSetClass = className;
            return this;
          }
          /**
           * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not
           * have a fontSet input value, and is not loading an icon by name or URL.
           */

        }, {
          key: "getDefaultFontSetClass",
          value: function getDefaultFontSetClass() {
            return this._defaultFontSetClass;
          }
          /**
           * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.
           * The response from the URL may be cached so this will not always cause an HTTP request, but
           * the produced element will always be a new copy of the originally fetched icon. (That is,
           * it will not contain any modifications made to elements previously returned).
           *
           * @param safeUrl URL from which to fetch the SVG icon.
           */

        }, {
          key: "getSvgIconFromUrl",
          value: function getSvgIconFromUrl(safeUrl) {
            var _this15 = this;

            var url = this._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_0__.SecurityContext.RESOURCE_URL, safeUrl);

            if (!url) {
              throw _getMatIconFailedToSanitizeUrlError(safeUrl);
            }

            var cachedIcon = this._cachedIconsByUrl.get(url);

            if (cachedIcon) {
              return (0, rxjs__WEBPACK_IMPORTED_MODULE_1__.of)(cloneSvg(cachedIcon));
            }

            return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_2__.tap)(function (svg) {
              return _this15._cachedIconsByUrl.set(url, svg);
            }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(function (svg) {
              return cloneSvg(svg);
            }));
          }
          /**
           * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name
           * and namespace. The icon must have been previously registered with addIcon or addIconSet;
           * if not, the Observable will throw an error.
           *
           * @param name Name of the icon to be retrieved.
           * @param namespace Namespace in which to look for the icon.
           */

        }, {
          key: "getNamedSvgIcon",
          value: function getNamedSvgIcon(name) {
            var namespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
            var key = iconKey(namespace, name);

            var config = this._svgIconConfigs.get(key); // Return (copy of) cached icon if possible.


            if (config) {
              return this._getSvgFromConfig(config);
            } // Otherwise try to resolve the config from one of the resolver functions.


            config = this._getIconConfigFromResolvers(namespace, name);

            if (config) {
              this._svgIconConfigs.set(key, config);

              return this._getSvgFromConfig(config);
            } // See if we have any icon sets registered for the namespace.


            var iconSetConfigs = this._iconSetConfigs.get(namespace);

            if (iconSetConfigs) {
              return this._getSvgFromIconSetConfigs(name, iconSetConfigs);
            }

            return (0, rxjs__WEBPACK_IMPORTED_MODULE_4__.throwError)(_getMatIconNameNotFoundError(key));
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._resolvers = [];

            this._svgIconConfigs.clear();

            this._iconSetConfigs.clear();

            this._cachedIconsByUrl.clear();
          }
          /**
           * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.
           */

        }, {
          key: "_getSvgFromConfig",
          value: function _getSvgFromConfig(config) {
            if (config.svgText) {
              // We already have the SVG element for this icon, return a copy.
              return (0, rxjs__WEBPACK_IMPORTED_MODULE_1__.of)(cloneSvg(this._svgElementFromConfig(config)));
            } else {
              // Fetch the icon from the config's URL, cache it, and return a copy.
              return this._loadSvgIconFromConfig(config).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(function (svg) {
                return cloneSvg(svg);
              }));
            }
          }
          /**
           * Attempts to find an icon with the specified name in any of the SVG icon sets.
           * First searches the available cached icons for a nested element with a matching name, and
           * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets
           * that have not been cached, and searches again after all fetches are completed.
           * The returned Observable produces the SVG element if possible, and throws
           * an error if no icon with the specified name can be found.
           */

        }, {
          key: "_getSvgFromIconSetConfigs",
          value: function _getSvgFromIconSetConfigs(name, iconSetConfigs) {
            var _this16 = this;

            // For all the icon set SVG elements we've fetched, see if any contain an icon with the
            // requested name.
            var namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);

            if (namedIcon) {
              // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every
              // time anyway, there's probably not much advantage compared to just always extracting
              // it from the icon set.
              return (0, rxjs__WEBPACK_IMPORTED_MODULE_1__.of)(namedIcon);
            } // Not found in any cached icon sets. If there are icon sets with URLs that we haven't
            // fetched, fetch them now and look for iconName in the results.


            var iconSetFetchRequests = iconSetConfigs.filter(function (iconSetConfig) {
              return !iconSetConfig.svgText;
            }).map(function (iconSetConfig) {
              return _this16._loadSvgIconSetFromConfig(iconSetConfig).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.catchError)(function (err) {
                var url = _this16._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_0__.SecurityContext.RESOURCE_URL, iconSetConfig.url); // Swallow errors fetching individual URLs so the
                // combined Observable won't necessarily fail.


                var errorMessage = "Loading icon set URL: ".concat(url, " failed: ").concat(err.message);

                _this16._errorHandler.handleError(new Error(errorMessage));

                return (0, rxjs__WEBPACK_IMPORTED_MODULE_1__.of)(null);
              }));
            }); // Fetch all the icon set URLs. When the requests complete, every IconSet should have a
            // cached SVG element (unless the request failed), and we can check again for the icon.

            return (0, rxjs__WEBPACK_IMPORTED_MODULE_6__.forkJoin)(iconSetFetchRequests).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(function () {
              var foundIcon = _this16._extractIconWithNameFromAnySet(name, iconSetConfigs); // TODO: add an ngDevMode check


              if (!foundIcon) {
                throw _getMatIconNameNotFoundError(name);
              }

              return foundIcon;
            }));
          }
          /**
           * Searches the cached SVG elements for the given icon sets for a nested icon element whose "id"
           * tag matches the specified name. If found, copies the nested element to a new SVG element and
           * returns it. Returns null if no matching element is found.
           */

        }, {
          key: "_extractIconWithNameFromAnySet",
          value: function _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {
            // Iterate backwards, so icon sets added later have precedence.
            for (var i = iconSetConfigs.length - 1; i >= 0; i--) {
              var config = iconSetConfigs[i]; // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of
              // the parsing by doing a quick check using `indexOf` to see if there's any chance for the
              // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least
              // some of the parsing.

              if (config.svgText && config.svgText.toString().indexOf(iconName) > -1) {
                var svg = this._svgElementFromConfig(config);

                var foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);

                if (foundIcon) {
                  return foundIcon;
                }
              }
            }

            return null;
          }
          /**
           * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element
           * from it.
           */

        }, {
          key: "_loadSvgIconFromConfig",
          value: function _loadSvgIconFromConfig(config) {
            var _this17 = this;

            return this._fetchIcon(config).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_2__.tap)(function (svgText) {
              return config.svgText = svgText;
            }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(function () {
              return _this17._svgElementFromConfig(config);
            }));
          }
          /**
           * Loads the content of the icon set URL specified in the
           * SvgIconConfig and attaches it to the config.
           */

        }, {
          key: "_loadSvgIconSetFromConfig",
          value: function _loadSvgIconSetFromConfig(config) {
            if (config.svgText) {
              return (0, rxjs__WEBPACK_IMPORTED_MODULE_1__.of)(null);
            }

            return this._fetchIcon(config).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_2__.tap)(function (svgText) {
              return config.svgText = svgText;
            }));
          }
          /**
           * Searches the cached element of the given SvgIconConfig for a nested icon element whose "id"
           * tag matches the specified name. If found, copies the nested element to a new SVG element and
           * returns it. Returns null if no matching element is found.
           */

        }, {
          key: "_extractSvgIconFromSet",
          value: function _extractSvgIconFromSet(iconSet, iconName, options) {
            // Use the `id="iconName"` syntax in order to escape special
            // characters in the ID (versus using the #iconName syntax).
            var iconSource = iconSet.querySelector("[id=\"".concat(iconName, "\"]"));

            if (!iconSource) {
              return null;
            } // Clone the element and remove the ID to prevent multiple elements from being added
            // to the page with the same ID.


            var iconElement = iconSource.cloneNode(true);
            iconElement.removeAttribute('id'); // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as
            // the content of a new <svg> node.

            if (iconElement.nodeName.toLowerCase() === 'svg') {
              return this._setSvgAttributes(iconElement, options);
            } // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note
            // that the same could be achieved by referring to it via <use href="#id">, however the <use>
            // tag is problematic on Firefox, because it needs to include the current page path.


            if (iconElement.nodeName.toLowerCase() === 'symbol') {
              return this._setSvgAttributes(this._toSvgElement(iconElement), options);
            } // createElement('SVG') doesn't work as expected; the DOM ends up with
            // the correct nodes, but the SVG content doesn't render. Instead we
            // have to create an empty SVG node using innerHTML and append its content.
            // Elements created using DOMParser.parseFromString have the same problem.
            // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display


            var svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>')); // Clone the node so we don't remove it from the parent icon set element.


            svg.appendChild(iconElement);
            return this._setSvgAttributes(svg, options);
          }
          /**
           * Creates a DOM element from the given SVG string.
           */

        }, {
          key: "_svgElementFromString",
          value: function _svgElementFromString(str) {
            var div = this._document.createElement('DIV');

            div.innerHTML = str;
            var svg = div.querySelector('svg'); // TODO: add an ngDevMode check

            if (!svg) {
              throw Error('<svg> tag not found');
            }

            return svg;
          }
          /**
           * Converts an element into an SVG node by cloning all of its children.
           */

        }, {
          key: "_toSvgElement",
          value: function _toSvgElement(element) {
            var svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));

            var attributes = element.attributes; // Copy over all the attributes from the `symbol` to the new SVG, except the id.

            for (var i = 0; i < attributes.length; i++) {
              var _attributes$i = attributes[i],
                  name = _attributes$i.name,
                  value = _attributes$i.value;

              if (name !== 'id') {
                svg.setAttribute(name, value);
              }
            }

            for (var _i2 = 0; _i2 < element.childNodes.length; _i2++) {
              if (element.childNodes[_i2].nodeType === this._document.ELEMENT_NODE) {
                svg.appendChild(element.childNodes[_i2].cloneNode(true));
              }
            }

            return svg;
          }
          /**
           * Sets the default attributes for an SVG element to be used as an icon.
           */

        }, {
          key: "_setSvgAttributes",
          value: function _setSvgAttributes(svg, options) {
            svg.setAttribute('fit', '');
            svg.setAttribute('height', '100%');
            svg.setAttribute('width', '100%');
            svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
            svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.

            if (options && options.viewBox) {
              svg.setAttribute('viewBox', options.viewBox);
            }

            return svg;
          }
          /**
           * Returns an Observable which produces the string contents of the given icon. Results may be
           * cached, so future calls with the same URL may not cause another HTTP request.
           */

        }, {
          key: "_fetchIcon",
          value: function _fetchIcon(iconConfig) {
            var _this18 = this;

            var _a;

            var safeUrl = iconConfig.url,
                options = iconConfig.options;
            var withCredentials = (_a = options === null || options === void 0 ? void 0 : options.withCredentials) !== null && _a !== void 0 ? _a : false;

            if (!this._httpClient) {
              throw _getMatIconNoHttpProviderError();
            } // TODO: add an ngDevMode check


            if (safeUrl == null) {
              throw Error("Cannot fetch icon from URL \"".concat(safeUrl, "\"."));
            }

            var url = this._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_0__.SecurityContext.RESOURCE_URL, safeUrl); // TODO: add an ngDevMode check


            if (!url) {
              throw _getMatIconFailedToSanitizeUrlError(safeUrl);
            } // Store in-progress fetches to avoid sending a duplicate request for a URL when there is
            // already a request in progress for that URL. It's necessary to call share() on the
            // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.


            var inProgressFetch = this._inProgressUrlFetches.get(url);

            if (inProgressFetch) {
              return inProgressFetch;
            }

            var req = this._httpClient.get(url, {
              responseType: 'text',
              withCredentials: withCredentials
            }).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(function (svg) {
              // Security: This SVG is fetched from a SafeResourceUrl, and is thus
              // trusted HTML.
              return trustedHTMLFromString(svg);
            }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.finalize)(function () {
              return _this18._inProgressUrlFetches["delete"](url);
            }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.share)());

            this._inProgressUrlFetches.set(url, req);

            return req;
          }
          /**
           * Registers an icon config by name in the specified namespace.
           * @param namespace Namespace in which to register the icon config.
           * @param iconName Name under which to register the config.
           * @param config Config to be registered.
           */

        }, {
          key: "_addSvgIconConfig",
          value: function _addSvgIconConfig(namespace, iconName, config) {
            this._svgIconConfigs.set(iconKey(namespace, iconName), config);

            return this;
          }
          /**
           * Registers an icon set config in the specified namespace.
           * @param namespace Namespace in which to register the icon config.
           * @param config Config to be registered.
           */

        }, {
          key: "_addSvgIconSetConfig",
          value: function _addSvgIconSetConfig(namespace, config) {
            var configNamespace = this._iconSetConfigs.get(namespace);

            if (configNamespace) {
              configNamespace.push(config);
            } else {
              this._iconSetConfigs.set(namespace, [config]);
            }

            return this;
          }
          /** Parses a config's text into an SVG element. */

        }, {
          key: "_svgElementFromConfig",
          value: function _svgElementFromConfig(config) {
            if (!config.svgElement) {
              var svg = this._svgElementFromString(config.svgText);

              this._setSvgAttributes(svg, config.options);

              config.svgElement = svg;
            }

            return config.svgElement;
          }
          /** Tries to create an icon config through the registered resolver functions. */

        }, {
          key: "_getIconConfigFromResolvers",
          value: function _getIconConfigFromResolvers(namespace, name) {
            for (var i = 0; i < this._resolvers.length; i++) {
              var result = this._resolvers[i](name, namespace);

              if (result) {
                return isSafeUrlWithOptions(result) ? new SvgIconConfig(result.url, null, result.options) : new SvgIconConfig(result, null);
              }
            }

            return undefined;
          }
        }]);

        return _MatIconRegistry;
      }();

      _MatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) {
        return new (t || _MatIconRegistry)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common_http__WEBPACK_IMPORTED_MODULE_9__.HttpClient, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_platform_browser__WEBPACK_IMPORTED_MODULE_10__.DomSanitizer), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_11__.DOCUMENT, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ErrorHandler));
      };

      _MatIconRegistry.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: _MatIconRegistry,
        factory: _MatIconRegistry.ɵfac,
        providedIn: 'root'
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_MatIconRegistry, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: _angular_common_http__WEBPACK_IMPORTED_MODULE_9__.HttpClient,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }]
          }, {
            type: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_10__.DomSanitizer
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_11__.DOCUMENT]
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ErrorHandler
          }];
        }, null);
      })();
      /** @docs-private */


      function _ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {
        return parentRegistry || new _MatIconRegistry(httpClient, sanitizer, document, errorHandler);
      }
      /** @docs-private */


      var _ICON_REGISTRY_PROVIDER = {
        // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.
        provide: _MatIconRegistry,
        deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional(), new _angular_core__WEBPACK_IMPORTED_MODULE_0__.SkipSelf(), _MatIconRegistry], [new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional(), _angular_common_http__WEBPACK_IMPORTED_MODULE_9__.HttpClient], _angular_platform_browser__WEBPACK_IMPORTED_MODULE_10__.DomSanitizer, _angular_core__WEBPACK_IMPORTED_MODULE_0__.ErrorHandler, [new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional(), _angular_common__WEBPACK_IMPORTED_MODULE_11__.DOCUMENT]],
        useFactory: _ICON_REGISTRY_PROVIDER_FACTORY
      };
      /** Clones an SVGElement while preserving type information. */

      function cloneSvg(svg) {
        return svg.cloneNode(true);
      }
      /** Returns the cache key to use for an icon namespace and name. */


      function iconKey(namespace, name) {
        return namespace + ':' + name;
      }

      function isSafeUrlWithOptions(value) {
        return !!(value.url && value.options);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // Boilerplate for applying mixins to MatIcon.

      /** @docs-private */


      var _MatIconBase = (0, _angular_material_core__WEBPACK_IMPORTED_MODULE_12__.mixinColor)( /*#__PURE__*/function () {
        function _class(_elementRef) {
          _classCallCheck(this, _class);

          this._elementRef = _elementRef;
        }

        return _createClass(_class);
      }());
      /**
       * Injection token used to provide the current location to `MatIcon`.
       * Used to handle server-side rendering and to stub out during unit tests.
       * @docs-private
       */


      var _MAT_ICON_LOCATION = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('mat-icon-location', {
        providedIn: 'root',
        factory: _MAT_ICON_LOCATION_FACTORY
      });
      /** @docs-private */


      function _MAT_ICON_LOCATION_FACTORY() {
        var _document = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_common__WEBPACK_IMPORTED_MODULE_11__.DOCUMENT);

        var _location = _document ? _document.location : null;

        return {
          // Note that this needs to be a function, rather than a property, because Angular
          // will only resolve it once, but we want the current path on each call.
          getPathname: function getPathname() {
            return _location ? _location.pathname + _location.search : '';
          }
        };
      }
      /** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */


      var funcIriAttributes = ['clip-path', 'color-profile', 'src', 'cursor', 'fill', 'filter', 'marker', 'marker-start', 'marker-mid', 'marker-end', 'mask', 'stroke'];
      /** Selector that can be used to find all elements that are using a `FuncIRI`. */

      var funcIriAttributeSelector = funcIriAttributes.map(function (attr) {
        return "[".concat(attr, "]");
      }).join(', ');
      /** Regex that can be used to extract the id out of a FuncIRI. */

      var funcIriPattern = /^url\(['"]?#(.*?)['"]?\)$/;
      /**
       * Component to display an icon. It can be used in the following ways:
       *
       * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the
       *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of
       *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format
       *   "[namespace]:[name]", if not the value will be the name of an icon in the default namespace.
       *   Examples:
       *     `<mat-icon svgIcon="left-arrow"></mat-icon>
       *     <mat-icon svgIcon="animals:cat"></mat-icon>`
       *
       * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`
       *   component. By default the Material icons font is used as described at
       *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an
       *   alternate font by setting the fontSet input to either the CSS class to apply to use the
       *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.
       *   Examples:
       *     `<mat-icon>home</mat-icon>
       *     <mat-icon fontSet="myfont">sun</mat-icon>`
       *
       * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the
       *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a
       *   CSS class which causes the glyph to be displayed via a :before selector, as in
       *   https://fortawesome.github.io/Font-Awesome/examples/
       *   Example:
       *     `<mat-icon fontSet="fa" fontIcon="alarm"></mat-icon>`
       */

      var _MatIcon = /*#__PURE__*/function (_MatIconBase2) {
        _inherits(_MatIcon, _MatIconBase2);

        var _super5 = _createSuper(_MatIcon);

        function _MatIcon(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {
          var _this19;

          _classCallCheck(this, _MatIcon);

          _this19 = _super5.call(this, elementRef);
          _this19._iconRegistry = _iconRegistry;
          _this19._location = _location;
          _this19._errorHandler = _errorHandler;
          _this19._inline = false;
          /** Subscription to the current in-progress SVG icon request. */

          _this19._currentIconFetch = rxjs__WEBPACK_IMPORTED_MODULE_13__.Subscription.EMPTY; // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is
          // the right thing to do for the majority of icon use-cases.

          if (!ariaHidden) {
            elementRef.nativeElement.setAttribute('aria-hidden', 'true');
          }

          return _this19;
        }
        /**
         * Whether the icon should be inlined, automatically sizing the icon to match the font size of
         * the element the icon is contained in.
         */


        _createClass(_MatIcon, [{
          key: "inline",
          get: function get() {
            return this._inline;
          },
          set: function set(inline) {
            this._inline = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_14__.coerceBooleanProperty)(inline);
          }
          /** Name of the icon in the SVG icon set. */

        }, {
          key: "svgIcon",
          get: function get() {
            return this._svgIcon;
          },
          set: function set(value) {
            if (value !== this._svgIcon) {
              if (value) {
                this._updateSvgIcon(value);
              } else if (this._svgIcon) {
                this._clearSvgElement();
              }

              this._svgIcon = value;
            }
          }
          /** Font set that the icon is a part of. */

        }, {
          key: "fontSet",
          get: function get() {
            return this._fontSet;
          },
          set: function set(value) {
            var newValue = this._cleanupFontValue(value);

            if (newValue !== this._fontSet) {
              this._fontSet = newValue;

              this._updateFontIconClasses();
            }
          }
          /** Name of an icon within a font set. */

        }, {
          key: "fontIcon",
          get: function get() {
            return this._fontIcon;
          },
          set: function set(value) {
            var newValue = this._cleanupFontValue(value);

            if (newValue !== this._fontIcon) {
              this._fontIcon = newValue;

              this._updateFontIconClasses();
            }
          }
          /**
           * Splits an svgIcon binding value into its icon set and icon name components.
           * Returns a 2-element array of [(icon set), (icon name)].
           * The separator for the two fields is ':'. If there is no separator, an empty
           * string is returned for the icon set and the entire value is returned for
           * the icon name. If the argument is falsy, returns an array of two empty strings.
           * Throws an error if the name contains two or more ':' separators.
           * Examples:
           *   `'social:cake' -> ['social', 'cake']
           *   'penguin' -> ['', 'penguin']
           *   null -> ['', '']
           *   'a:b:c' -> (throws Error)`
           */

        }, {
          key: "_splitIconName",
          value: function _splitIconName(iconName) {
            if (!iconName) {
              return ['', ''];
            }

            var parts = iconName.split(':');

            switch (parts.length) {
              case 1:
                return ['', parts[0]];
              // Use default namespace.

              case 2:
                return parts;

              default:
                throw Error("Invalid icon name: \"".concat(iconName, "\""));
              // TODO: add an ngDevMode check
            }
          }
        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            // Update font classes because ngOnChanges won't be called if none of the inputs are present,
            // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.
            this._updateFontIconClasses();
          }
        }, {
          key: "ngAfterViewChecked",
          value: function ngAfterViewChecked() {
            var cachedElements = this._elementsWithExternalReferences;

            if (cachedElements && cachedElements.size) {
              var newPath = this._location.getPathname(); // We need to check whether the URL has changed on each change detection since
              // the browser doesn't have an API that will let us react on link clicks and
              // we can't depend on the Angular router. The references need to be updated,
              // because while most browsers don't care whether the URL is correct after
              // the first render, Safari will break if the user navigates to a different
              // page and the SVG isn't re-rendered.


              if (newPath !== this._previousPath) {
                this._previousPath = newPath;

                this._prependPathToReferences(newPath);
              }
            }
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._currentIconFetch.unsubscribe();

            if (this._elementsWithExternalReferences) {
              this._elementsWithExternalReferences.clear();
            }
          }
        }, {
          key: "_usingFontIcon",
          value: function _usingFontIcon() {
            return !this.svgIcon;
          }
        }, {
          key: "_setSvgElement",
          value: function _setSvgElement(svg) {
            this._clearSvgElement(); // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.
            // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/
            // Do this before inserting the element into the DOM, in order to avoid a style recalculation.


            var styleTags = svg.querySelectorAll('style');

            for (var i = 0; i < styleTags.length; i++) {
              styleTags[i].textContent += ' ';
            } // Note: we do this fix here, rather than the icon registry, because the
            // references have to point to the URL at the time that the icon was created.


            var path = this._location.getPathname();

            this._previousPath = path;

            this._cacheChildrenWithExternalReferences(svg);

            this._prependPathToReferences(path);

            this._elementRef.nativeElement.appendChild(svg);
          }
        }, {
          key: "_clearSvgElement",
          value: function _clearSvgElement() {
            var layoutElement = this._elementRef.nativeElement;
            var childCount = layoutElement.childNodes.length;

            if (this._elementsWithExternalReferences) {
              this._elementsWithExternalReferences.clear();
            } // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that
            // we can't use innerHTML, because IE will throw if the element has a data binding.


            while (childCount--) {
              var child = layoutElement.childNodes[childCount]; // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid
              // of any loose text nodes, as well as any SVG elements in order to remove any old icons.

              if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {
                child.remove();
              }
            }
          }
        }, {
          key: "_updateFontIconClasses",
          value: function _updateFontIconClasses() {
            if (!this._usingFontIcon()) {
              return;
            }

            var elem = this._elementRef.nativeElement;
            var fontSetClass = this.fontSet ? this._iconRegistry.classNameForFontAlias(this.fontSet) : this._iconRegistry.getDefaultFontSetClass();

            if (fontSetClass != this._previousFontSetClass) {
              if (this._previousFontSetClass) {
                elem.classList.remove(this._previousFontSetClass);
              }

              if (fontSetClass) {
                elem.classList.add(fontSetClass);
              }

              this._previousFontSetClass = fontSetClass;
            }

            if (this.fontIcon != this._previousFontIconClass) {
              if (this._previousFontIconClass) {
                elem.classList.remove(this._previousFontIconClass);
              }

              if (this.fontIcon) {
                elem.classList.add(this.fontIcon);
              }

              this._previousFontIconClass = this.fontIcon;
            }
          }
          /**
           * Cleans up a value to be used as a fontIcon or fontSet.
           * Since the value ends up being assigned as a CSS class, we
           * have to trim the value and omit space-separated values.
           */

        }, {
          key: "_cleanupFontValue",
          value: function _cleanupFontValue(value) {
            return typeof value === 'string' ? value.trim().split(' ')[0] : value;
          }
          /**
           * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`
           * reference. This is required because WebKit browsers require references to be prefixed with
           * the current path, if the page has a `base` tag.
           */

        }, {
          key: "_prependPathToReferences",
          value: function _prependPathToReferences(path) {
            var elements = this._elementsWithExternalReferences;

            if (elements) {
              elements.forEach(function (attrs, element) {
                attrs.forEach(function (attr) {
                  element.setAttribute(attr.name, "url('".concat(path, "#").concat(attr.value, "')"));
                });
              });
            }
          }
          /**
           * Caches the children of an SVG element that have `url()`
           * references that we need to prefix with the current path.
           */

        }, {
          key: "_cacheChildrenWithExternalReferences",
          value: function _cacheChildrenWithExternalReferences(element) {
            var elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);
            var elements = this._elementsWithExternalReferences = this._elementsWithExternalReferences || new Map();

            var _loop2 = function _loop2(i) {
              funcIriAttributes.forEach(function (attr) {
                var elementWithReference = elementsWithFuncIri[i];
                var value = elementWithReference.getAttribute(attr);
                var match = value ? value.match(funcIriPattern) : null;

                if (match) {
                  var attributes = elements.get(elementWithReference);

                  if (!attributes) {
                    attributes = [];
                    elements.set(elementWithReference, attributes);
                  }

                  attributes.push({
                    name: attr,
                    value: match[1]
                  });
                }
              });
            };

            for (var i = 0; i < elementsWithFuncIri.length; i++) {
              _loop2(i);
            }
          }
          /** Sets a new SVG icon with a particular name. */

        }, {
          key: "_updateSvgIcon",
          value: function _updateSvgIcon(rawName) {
            var _this20 = this;

            this._svgNamespace = null;
            this._svgName = null;

            this._currentIconFetch.unsubscribe();

            if (rawName) {
              var _this$_splitIconName = this._splitIconName(rawName),
                  _this$_splitIconName2 = _slicedToArray(_this$_splitIconName, 2),
                  namespace = _this$_splitIconName2[0],
                  iconName = _this$_splitIconName2[1];

              if (namespace) {
                this._svgNamespace = namespace;
              }

              if (iconName) {
                this._svgName = iconName;
              }

              this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.take)(1)).subscribe(function (svg) {
                return _this20._setSvgElement(svg);
              }, function (err) {
                var errorMessage = "Error retrieving icon ".concat(namespace, ":").concat(iconName, "! ").concat(err.message);

                _this20._errorHandler.handleError(new Error(errorMessage));
              });
            }
          }
        }]);

        return _MatIcon;
      }(_MatIconBase);

      _MatIcon.ɵfac = function MatIcon_Factory(t) {
        return new (t || _MatIcon)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_MatIconRegistry), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinjectAttribute"]('aria-hidden'), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_MAT_ICON_LOCATION), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ErrorHandler));
      };

      _MatIcon.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: _MatIcon,
        selectors: [["mat-icon"]],
        hostAttrs: ["role", "img", 1, "mat-icon", "notranslate"],
        hostVars: 7,
        hostBindings: function MatIcon_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("data-mat-icon-type", ctx._usingFontIcon() ? "font" : "svg")("data-mat-icon-name", ctx._svgName || ctx.fontIcon)("data-mat-icon-namespace", ctx._svgNamespace || ctx.fontSet);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("mat-icon-inline", ctx.inline)("mat-icon-no-color", ctx.color !== "primary" && ctx.color !== "accent" && ctx.color !== "warn");
          }
        },
        inputs: {
          color: "color",
          inline: "inline",
          svgIcon: "svgIcon",
          fontSet: "fontSet",
          fontIcon: "fontIcon"
        },
        exportAs: ["matIcon"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
        ngContentSelectors: _c0,
        decls: 1,
        vars: 0,
        template: function MatIcon_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](0);
          }
        },
        styles: [".mat-icon{-webkit-user-select:none;-moz-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\n"],
        encapsulation: 2,
        changeDetection: 0
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_MatIcon, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
          args: [{
            template: '<ng-content></ng-content>',
            selector: 'mat-icon',
            exportAs: 'matIcon',
            inputs: ['color'],
            host: {
              'role': 'img',
              'class': 'mat-icon notranslate',
              '[attr.data-mat-icon-type]': '_usingFontIcon() ? "font" : "svg"',
              '[attr.data-mat-icon-name]': '_svgName || fontIcon',
              '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',
              '[class.mat-icon-inline]': 'inline',
              '[class.mat-icon-no-color]': 'color !== "primary" && color !== "accent" && color !== "warn"'
            },
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewEncapsulation.None,
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
            styles: [".mat-icon{-webkit-user-select:none;-moz-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\n"]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
          }, {
            type: _MatIconRegistry
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Attribute,
              args: ['aria-hidden']
            }]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_MAT_ICON_LOCATION]
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ErrorHandler
          }];
        }, {
          inline: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          svgIcon: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          fontSet: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          fontIcon: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var _MatIconModule = /*#__PURE__*/_createClass(function _MatIconModule() {
        _classCallCheck(this, _MatIconModule);
      });

      _MatIconModule.ɵfac = function MatIconModule_Factory(t) {
        return new (t || _MatIconModule)();
      };

      _MatIconModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: _MatIconModule
      });
      _MatIconModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        imports: [[_angular_material_core__WEBPACK_IMPORTED_MODULE_12__.MatCommonModule], _angular_material_core__WEBPACK_IMPORTED_MODULE_12__.MatCommonModule]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_MatIconModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
          args: [{
            imports: [_angular_material_core__WEBPACK_IMPORTED_MODULE_12__.MatCommonModule],
            exports: [_MatIcon, _angular_material_core__WEBPACK_IMPORTED_MODULE_12__.MatCommonModule],
            declarations: [_MatIcon]
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */

      /***/

    }
  }]);
})();
//# sourceMappingURL=default-node_modules_pixi_app_dist_esm_app_js-node_modules_angular_material_fesm2015_icon_mjs-es5.js.map