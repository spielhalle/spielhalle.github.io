{"version":3,"sources":["webpack:///node_modules/@donmahallem/sudoku/dist/esm/index.js"],"names":["COVER_START_IDX","BOARD_START_IDX","CONSTRAINTS","EMPTY_CELL","CELL_VALUE_MIN","checkConstraint","board","row","constraint","column","checkBoxConstraint","boardSize","boxSize","Array","fill","subsectionRowStart","Math","floor","subsectionRowEnd","subsectionColumnStart","subsectionColumnEnd","r","c","checkColumnConstraint","checkRowConstraint","isValid","solve$1","k","createEmptySudokuBoard","map","DancingNode","columnNode","left","right","top","bottom","node","ColumnNode","name","size","removeLeftRight","i","j","removeTopBottom","reinsertTopBottom","reinsertLeftRight","DLX","cover","isDone","header","createDLXList","grid","nbColumns","length","headerNode","columnNodes","n","push","linkRight","aGrid","prev","undefined","col","newNode","linkDown","min","Number","MAX_VALUE","ret","anser","field","parseSolution","resultCallback","answer","result","rcNode","parseInt","tmp","val","ans1","ans2","num","handleSolution","selectColumnNodeHeuristic","search","splice","uncover","cb","getIndex","createBoxConstraints","matrix","headerIter","rowDelta","columnDelta","index","createCellConstraints","createColumnConstraints","iterHeader","createRowConstraints","coverBoard","hBase","createCoverMatrix","coverMatrix","initializeExactCoverBoard","solve","dlx","runSolver","solveNum","results","indexMap","getIndexMap","idx","createSudokuBoard","retainPercentage","sqrt","randomNumbers","sort","random","selectBoard","removeIndexes","removeX","removeY"],"mappings":"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","file":"default-node_modules_donmahallem_sudoku_dist_esm_index_js-es5.js","sourcesContent":["/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst COVER_START_IDX = 1;\r\nconst BOARD_START_IDX = 0;\r\nconst CONSTRAINTS = 4;\r\nconst EMPTY_CELL = 0;\r\nconst CELL_VALUE_MIN = 1;\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst checkConstraint = (board, row, constraint, column) => {\r\n    if (board[row][column] !== EMPTY_CELL) {\r\n        if (!constraint[board[row][column] - 1]) {\r\n            constraint[board[row][column] - 1] = true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst checkBoxConstraint = (board, row, column, boardSize, boxSize) => {\r\n    const constraint = new Array(boardSize).fill(false);\r\n    const subsectionRowStart = Math.floor(row / boxSize) * boxSize;\r\n    const subsectionRowEnd = subsectionRowStart + boxSize;\r\n    const subsectionColumnStart = Math.floor(column / boxSize) * boxSize;\r\n    const subsectionColumnEnd = subsectionColumnStart + boxSize;\r\n    for (let r = subsectionRowStart; r < subsectionRowEnd; r++) {\r\n        for (let c = subsectionColumnStart; c < subsectionColumnEnd; c++) {\r\n            if (!checkConstraint(board, r, constraint, c))\r\n                return false;\r\n        }\r\n    }\r\n    return true;\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst checkColumnConstraint = (board, column, boardSize) => {\r\n    const constraint = new Array(boardSize).fill(false);\r\n    for (let row = BOARD_START_IDX; row < boardSize; row++) {\r\n        if (!checkConstraint(board, row, constraint, column)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst checkRowConstraint = (board, row, boardSize) => {\r\n    const constraint = new Array(boardSize).fill(false);\r\n    for (let column = BOARD_START_IDX; column < boardSize; column++) {\r\n        if (!checkConstraint(board, row, constraint, column)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst isValid = (board, row, column, boardSize, boxSize) => {\r\n    return checkRowConstraint(board, row, boardSize) &&\r\n        checkColumnConstraint(board, column, boardSize) &&\r\n        checkBoxConstraint(board, row, column, boardSize, boxSize);\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst solve$1 = (board, boardSize, boxSize) => {\r\n    for (let row = BOARD_START_IDX; row < boardSize; row++) {\r\n        for (let column = BOARD_START_IDX; column < boardSize; column++) {\r\n            if (board[row][column] === EMPTY_CELL) {\r\n                for (let k = CELL_VALUE_MIN; k <= boardSize; k++) {\r\n                    board[row][column] = k;\r\n                    if (isValid(board, row, column, boardSize, boxSize) && solve$1(board, boardSize, boxSize)) {\r\n                        return true;\r\n                    }\r\n                    board[row][column] = EMPTY_CELL;\r\n                }\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst createEmptySudokuBoard = (boardSize) => {\r\n    return new Array(boardSize)\r\n        .fill(0)\r\n        .map(() => new Array(boardSize).fill(EMPTY_CELL));\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\n// tslint:disable:max-classes-per-file\r\nclass DancingNode {\r\n    constructor(columnNode) {\r\n        this.left = this;\r\n        this.right = this;\r\n        this.top = this;\r\n        this.bottom = this;\r\n        this.column = columnNode;\r\n    }\r\n    linkDown(node) {\r\n        node.bottom = this.bottom;\r\n        node.bottom.top = node;\r\n        node.top = this;\r\n        this.bottom = node;\r\n        return node;\r\n    }\r\n    linkRight(node) {\r\n        node.right = this.right;\r\n        node.right.left = node;\r\n        node.left = this;\r\n        this.right = node;\r\n        return node;\r\n    }\r\n    removeLeftRight() {\r\n        this.left.right = this.right;\r\n        this.right.left = this.left;\r\n    }\r\n    reinsertLeftRight() {\r\n        this.left.right = this;\r\n        this.right.left = this;\r\n    }\r\n    removeTopBottom() {\r\n        this.top.bottom = this.bottom;\r\n        this.bottom.top = this.top;\r\n    }\r\n    reinsertTopBottom() {\r\n        this.top.bottom = this;\r\n        this.bottom.top = this;\r\n    }\r\n}\r\nclass ColumnNode extends DancingNode {\r\n    constructor(name) {\r\n        super();\r\n        this.name = name;\r\n        this.size = 0;\r\n        this.column = this;\r\n    }\r\n    cover() {\r\n        this.removeLeftRight();\r\n        for (let i = this.bottom; i !== this; i = i.bottom) {\r\n            for (let j = i.right; j !== i; j = j.right) {\r\n                j.removeTopBottom();\r\n                j.column.size--;\r\n            }\r\n        }\r\n    }\r\n    uncover() {\r\n        for (let i = this.top; i !== this; i = i.top) {\r\n            for (let j = i.left; j !== i; j = j.left) {\r\n                j.column.size++;\r\n                j.reinsertTopBottom();\r\n            }\r\n        }\r\n        this.reinsertLeftRight();\r\n    }\r\n}\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nclass DLX {\r\n    constructor(cover, boardSize) {\r\n        this.boardSize = boardSize;\r\n        this.isDone = false;\r\n        this.header = this.createDLXList(cover);\r\n    }\r\n    createDLXList(grid) {\r\n        const nbColumns = grid[0].length;\r\n        let headerNode = new ColumnNode('header');\r\n        const columnNodes = [];\r\n        for (let i = 0; i < nbColumns; i++) {\r\n            const n = new ColumnNode(`${i}`);\r\n            columnNodes.push(n);\r\n            headerNode = headerNode.linkRight(n);\r\n        }\r\n        headerNode = headerNode.right.column;\r\n        for (const aGrid of grid) {\r\n            let prev = undefined;\r\n            for (let j = 0; j < nbColumns; j++) {\r\n                if (aGrid[j]) {\r\n                    const col = columnNodes[j];\r\n                    const newNode = new DancingNode(col);\r\n                    // tslint:disable-next-line:triple-equals\r\n                    if (prev == undefined) {\r\n                        prev = newNode;\r\n                    }\r\n                    col.top.linkDown(newNode);\r\n                    prev = prev.linkRight(newNode);\r\n                    col.size++;\r\n                }\r\n            }\r\n        }\r\n        headerNode.size = nbColumns;\r\n        return headerNode;\r\n    }\r\n    selectColumnNodeHeuristic() {\r\n        let min = Number.MAX_VALUE;\r\n        // tslint:disable-next-line:no-unnecessary-initializer\r\n        let ret = undefined;\r\n        for (let c = this.header.right; c !== this.header; c = c.right) {\r\n            if (c.size < min) {\r\n                min = c.size;\r\n                ret = c;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    handleSolution(anser) {\r\n        const field = this.parseSolution(anser);\r\n        this.isDone = this.resultCallback(field);\r\n    }\r\n    parseSolution(answer) {\r\n        const result = createEmptySudokuBoard(this.boardSize);\r\n        for (const n of answer) {\r\n            let rcNode = n;\r\n            let min = parseInt(rcNode.column.name, 10);\r\n            for (let tmp = n.right; tmp !== n; tmp = tmp.right) {\r\n                const val = parseInt(tmp.column.name, 10);\r\n                if (val < min) {\r\n                    min = val;\r\n                    rcNode = tmp;\r\n                }\r\n            }\r\n            const ans1 = parseInt(rcNode.column.name, 10);\r\n            const ans2 = parseInt(rcNode.right.column.name, 10);\r\n            const r = Math.floor(ans1 / this.boardSize);\r\n            const c = ans1 % this.boardSize;\r\n            const num = (ans2 % this.boardSize) + 1;\r\n            result[r][c] = num;\r\n        }\r\n        return result;\r\n    }\r\n    search(k) {\r\n        if (this.isDone) {\r\n            return;\r\n        }\r\n        if (this.header.right === this.header) {\r\n            this.handleSolution(this.answer);\r\n        }\r\n        else {\r\n            let c = this.selectColumnNodeHeuristic();\r\n            c.cover();\r\n            for (let r = c.bottom; r !== c; r = r.bottom) {\r\n                this.answer.push(r);\r\n                for (let j = r.right; j !== r; j = j.right) {\r\n                    j.column.cover();\r\n                }\r\n                this.search(k + 1);\r\n                r = this.answer.splice(this.answer.length - 1, 1)[0];\r\n                c = r.column;\r\n                for (let j = r.left; j !== r; j = j.left) {\r\n                    j.column.uncover();\r\n                }\r\n            }\r\n            c.uncover();\r\n        }\r\n    }\r\n    runSolver(cb) {\r\n        this.answer = [];\r\n        this.isDone = false;\r\n        this.resultCallback = cb;\r\n        this.search(0);\r\n    }\r\n}\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst getIndex = (row, column, num, boardSize) => {\r\n    return (row - 1) * boardSize * boardSize + (column - 1) * boardSize + (num - 1);\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst createBoxConstraints = (matrix, header, boardSize, boxSize) => {\r\n    let headerIter = header;\r\n    for (let row = COVER_START_IDX; row <= boardSize; row += boxSize) {\r\n        for (let column = COVER_START_IDX; column <= boardSize; column += boxSize) {\r\n            for (let n = COVER_START_IDX; n <= boardSize; n++, headerIter++) {\r\n                for (let rowDelta = 0; rowDelta < boxSize; rowDelta++) {\r\n                    for (let columnDelta = 0; columnDelta < boxSize; columnDelta++) {\r\n                        const index = getIndex(row + rowDelta, column + columnDelta, n, boardSize);\r\n                        matrix[index][headerIter] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return headerIter;\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst createCellConstraints = (matrix, header, boardSize) => {\r\n    let headerIter = header;\r\n    for (let row = COVER_START_IDX; row <= boardSize; row++) {\r\n        for (let column = COVER_START_IDX; column <= boardSize; column++, headerIter++) {\r\n            for (let n = COVER_START_IDX; n <= boardSize; n++) {\r\n                const index = getIndex(row, column, n, boardSize);\r\n                // console.log(index, _header, matrix.length);\r\n                matrix[index][headerIter] = true;\r\n            }\r\n        }\r\n    }\r\n    return headerIter;\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst createColumnConstraints = (matrix, header, boardSize) => {\r\n    let iterHeader = header;\r\n    for (let column = COVER_START_IDX; column <= boardSize; column++) {\r\n        for (let n = COVER_START_IDX; n <= boardSize; n++, iterHeader++) {\r\n            for (let row = COVER_START_IDX; row <= boardSize; row++) {\r\n                const index = getIndex(row, column, n, boardSize);\r\n                matrix[index][iterHeader] = true;\r\n            }\r\n        }\r\n    }\r\n    return iterHeader;\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst createRowConstraints = (coverBoard, hBase, boardSize) => {\r\n    let headerIter = hBase;\r\n    for (let row = COVER_START_IDX; row <= boardSize; row++) {\r\n        for (let n = COVER_START_IDX; n <= boardSize; n++, headerIter++) {\r\n            for (let column = COVER_START_IDX; column <= boardSize; column++) {\r\n                const index = getIndex(row, column, n, boardSize);\r\n                coverBoard[index][headerIter] = true;\r\n            }\r\n        }\r\n    }\r\n    return headerIter;\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst createCoverMatrix = (boardSize, boxSize) => {\r\n    const coverMatrix = new Array(boardSize * boardSize * boardSize)\r\n        .fill([])\r\n        .map(() => new Array(boardSize * boardSize * CONSTRAINTS).fill(false));\r\n    let header = 0;\r\n    header = createCellConstraints(coverMatrix, header, boardSize);\r\n    header = createRowConstraints(coverMatrix, header, boardSize);\r\n    header = createColumnConstraints(coverMatrix, header, boardSize);\r\n    createBoxConstraints(coverMatrix, header, boardSize, boxSize);\r\n    return coverMatrix;\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst initializeExactCoverBoard = (board, boardSize, boxSize) => {\r\n    const coverBoard = createCoverMatrix(boardSize, boxSize);\r\n    for (let row = COVER_START_IDX; row <= boardSize; row++) {\r\n        for (let column = COVER_START_IDX; column <= boardSize; column++) {\r\n            const n = board[row - 1][column - 1];\r\n            if (n !== EMPTY_CELL) {\r\n                for (let num = CELL_VALUE_MIN; num <= boardSize; num++) {\r\n                    if (num !== n) {\r\n                        coverBoard[getIndex(row, column, num, boardSize)].fill(false);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return coverBoard;\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst solve = (board, boardSize, boxSize, cb) => {\r\n    const cover = initializeExactCoverBoard(board, boardSize, boxSize);\r\n    const dlx = new DLX(cover, boardSize);\r\n    dlx.runSolver(cb);\r\n};\r\nconst solveNum = (board, boardSize, boxSize, num) => {\r\n    const results = [];\r\n    solve(board, boardSize, boxSize, (result) => {\r\n        results.push(result);\r\n        return results.length >= num;\r\n    });\r\n    return results;\r\n};\n\n/**!\r\n * Source https://github.com/donmahallem/js-libs Package: sudoku\r\n */\r\nconst indexMap = {};\r\nconst getIndexMap = (boardSize) => {\r\n    if (!(boardSize in indexMap)) {\r\n        indexMap[boardSize] = new Array(boardSize ** 2).fill(0).map((val, idx) => idx);\r\n    }\r\n    return indexMap[boardSize];\r\n};\r\nconst createSudokuBoard = (boardSize, retainPercentage) => {\r\n    const board = createEmptySudokuBoard(boardSize);\r\n    const boxSize = Math.sqrt(boardSize);\r\n    const randomNumbers = new Array(boardSize).fill(0).map((val, idx) => idx + 1)\r\n        .sort(() => Math.random() - 0.5);\r\n    for (let i = 0; i < boardSize; i++) {\r\n        board[i][Math.floor(Math.random() * boardSize)] = randomNumbers[i];\r\n    }\r\n    const selectBoard = solveNum(board, boardSize, boxSize, 1)[0];\r\n    const removeIndexes = getIndexMap(boardSize)\r\n        .sort(() => Math.random() - 0.5);\r\n    for (let i = 0; i <= Math.floor(removeIndexes.length * retainPercentage); i++) {\r\n        const removeX = removeIndexes[i] % boardSize;\r\n        const removeY = Math.floor(removeIndexes[i] / boardSize);\r\n        selectBoard[removeX][removeY] = 0;\r\n    }\r\n    return selectBoard;\r\n};\n\nexport { solve$1 as backtrackSolve, createEmptySudokuBoard, createSudokuBoard, solve as knuthSolve, solveNum as knuthSolveNum };\n// BUILD: Tue Jun 29 2021 20:35:46 GMT+0200 (Central European Summer Time)\n\n//# sourceMappingURL=index.js.map\n"]}