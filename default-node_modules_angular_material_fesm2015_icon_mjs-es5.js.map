{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;UAGAA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;UACAC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;UACAC;AACA;AACA;AAAA;;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA,WAFA,MAGA;AACA;AACA;AACAC;AACA;;AACA;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA,mBAFA,MAGA;AACA;AACA;AACA;AACiB,eAdjB;AAeA,aAjBA;AAkBA,WAnBA,MAoBA;AACA;AACA;AACAC;AACA;AACA;;AACA;AACAC;AACA;;AACA;AACA;;AACA;AACA;AACiB,eAVjB;AAWA,aAbA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AAA4BC,wBAA5B;AAA4BC,0BAA5B;AAA4BC;AAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AAA4BF,wBAA5B;AAA4BC,0BAA5B;AAA4BC;AAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AAA4BF,wBAA5B;AAA4BC,0BAA5B;AAA4BC;AAA5B;AACA;;;iBACA;AACA;AACA;AACA;AACA;;;iBACA;AAAA;;AACA;AACA;AACA;AACA,eAFA,MAGA;AACA;AACA;;AACA;;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;iBACA;AAAA;;AACAC;AACAC;AACA;;AACA;AACS,aAHT;AAIA;;;iBACA;AACA;AACAC,6BACA,+EADA;AAEAA;AACA;AACA;;;iBACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACAJ;AACA;;AACA;AACA;AACA;;AACA;AACA;AACAK;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA,iBAHA,MAIA;AACA;;AACA;AACA;AACA;;AACAC;AAAA;AAAA;;AACA;AACA;AACA;AACA,mBAHA,MAIA;AACA;AACA;AACA;;AACA;AAnCA;AAqCA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACAH,oDACAI,OADA,CACA;AAAA;AAAA,aADA;AAEA;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;UACAC;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;;;;;;AAEA;AACA;;AACA;AACA;AACA;AACA;AACA;AACAC;AACA;;AACA,qCACA,4BADA,GAEA,mFAFA;AAAA;AAAA;AAAA;;AAGA;AACAC;AACAC;AACS,WART;AASA;;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA,iBADA;AAEA,iBAFA;AAGA,iBAHA;AAIA,iBAJA;AAKA,iBALA;AAMA,iBANA;AAOA,iBAPA;AAQA,iBARA;AASA;AATA;;AAWA;AACA;AAA8E;;AAAQ;AAAqF,SAA3K;AACA;;AACA;AACA,yBAAcX,KAAd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;UACAY;AACA,+BAA4B;AAAA;;AAAA,cAA5BC,OAA4B,uEAA5B,EAA4B;;AAAA;;AAC5B;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA,WALA,MAMA;AACA;AACAhB;AACA;;AACA;AACa,aAHb;AAIA,WANA,MAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AAA4BiB,0BAA5B;AAA4Bd,0BAA5B;AAA4BC;AAA5B;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACAJ;AACA;;AACA;AACAG;AACAe;AAAmCD,gCAAnC;AAAmCd,iCAAnC;AAAmCC;AAAnC;AACiB,iBAFjB;AAGA,eAJA,MAKA;AACAc;AAA+BD,8BAA/B;AAA+Bd,8BAA/B;AAA+BC;AAA/B;AACA;AACS,aAVT;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AAA4Ba,0BAA5B;AAA4Bd,0BAA5B;AAA4BC;AAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AAA4Ba,0BAA5B;AAA4Bd,0BAA5B;AAA4BC;AAA5B;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA,+BACAU,GADA,CACA;AACA,uDADA,CAEA;AACA;AACA;;;AACA;AAAA;AAAA,iBACAK,IADA,CACA,GADA;AAES,aART,EASA;AACA;AAVA,aAWAC,MAXA,CAWA;AAAA;AAAA,aAXA,EAYAD,IAZA,CAYA,GAZA;AAaA;;;iBACA;AACA;AAAuCE;AAAvC;AACAd;AACAA;AACA;AACA;;;iBACA;AAAA;;AACA;AACA;AACA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACAC;;AACA;;AACA;;AACA;AACA;AACA;;AACA;;AACA;AACAA;AACA;;AACA;AACA;AACA,uBAFA,MAGA;AACA;AACA;AACA,qBAZA,MAaA;AACA;;AACA;AACA;;AAxBA;AA0Ba,eA3Bb;AA4BA;AACA;AACA;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;UACAc,8CACA;AAAA;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;UACAC;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;UACAC;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA,6CA5BA,CA6BA;AACA;;AACA,sBA/BA,CAgCA;AACA;;AACA;AACA;AACA;AACAR;AACA,WAJA,MAKA;AACA;AACAA;AACA,WA1CA,CA2CA;;;AACA;AACA;AACA;AACA,6DAHA,CAIA;;AACA;AACA;AACA,aAPA,CAQA;;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA,WA9DA,CA+DA;;;AACA;AACA;AACA,WAlEA,CAmEA;;;AACA;AACA;AACA,WAtEA,CAuEA;;;AACA;AACA;AACA;AACA,WAHA,MAIA;AACA;AACA;;AACA;AACA;AACA;AACA,aAHA,MAIA;AACA;AACA,0CAFA,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;iBACA;AACA;AACA;AACA;AACA,aAJA,CAKA;AACA;;;AACA,0FACAS,4BADA,IACA,6BADA,EACA;AACA;AACA,aAVA,CAWA;;;AACA;AACA;AACA,aAdA,CAeA;;;AACA,mFACAnB,wBADA,EACA;AACA;AACA,aAnBA,CAoBA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA,aAJA,CAKA;;;AACA;AACA;AACA,aARA,CASA;AACA;;;AACA;AACA;AACA,aAbA,CAcA;;;AACA;AACA;AACA,aAjBA,CAkBA;AACA;;;AACA;AACA;AACA,aAtBA,CAuBA;;;AACA;AACA;AACA,aA1BA,CA2BA;;;AACA,kFACA,8BADA,EACA;AACA;AACA,aA/BA,CAgCA;;;AACA;AACA;;;iBACA,iBAAqB;AAAA,gBAArBoB,MAAqB,uEAArB,EAAqB;;AACrB,mBADqB,CAErB;AACA;;;AACA;AACA;AACA,wEANqB,CAOrB;AACA;AACA;AACA;;AACA,2EAXqB,CAYrB;AACA;;AACA;AACA,mHAfqB,CAgBrB;AACA;;AACA;AACA,sDAnBqB,CAoBrB;;AACA,8FArBqB,CAsBrB;;AACA;AACA;AACA3B,wBACAC,+BACA2B,MADA,CACA;AAAA;AAAA,eADA,EACA5B,OADA,CADA;AAGA,aA5BqB,CA6BrB;;;AACA;AACA;AACAa,qDACAe,MADA,CACA;AAAA;AAAA,eADA,EACAf,MADA;AAEA,aAlCqB,CAmCrB;;;AACA;AACAA,4BADA;AAEAb,8BAFA;AAGA6B,8BAHA;AAIAC,4CAJA;AAKAC,wCALA;AAMAC;AANA;AAQA;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA;;AACA;AACA;AACA;AACA;AACAC;AACA;AACA;AACA;;AACAA;AACA;AACA;AACA;;AACAA;AACA;AACA;AACA;;AACAA;AACA;AACA;AACA;;AACAA;AACA;AACA;AACA;;AACAA;AACC,OAzBD,EAyBCA,uCAzBD;AA0BA;AACA;AACA;AACA;AACA;;;UACAC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA,oCANA,CAOA;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;UACAC;;;;;AACA;AACA;AACA;AACA,uCAAyB;AAAA;;AAAA,cAAzBC,IAAyB,uEAAzB,EAAyB;;AAAA;;AACzB;AACA;AAFyB;AAGzB;AACA;AACA;AACA;AACA;;;;;iBACA,iBAAqB;AAAA,gBAArBT,MAAqB,uEAArB,EAAqB;AACrB;AACA;AACA;AACA3B,qDADA;AAEAqC,+EAFA;AAGAC,8DAHA;AAIAC;AAJA;AAMA;;;;QArBAL;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;UACAM;;;;;AACA;AACA;AACA;AACA,iCAAyB;AAAA;;AAAA,cAAzBJ,IAAyB,uEAAzB,EAAyB;;AAAA;;AACzB;AACA;AACA;AAHyB;AAIzB;;;;iBACA,iBAAqB;AAAA,gBAArBT,MAAqB,uEAArB,EAAqB;AACrB;AACAc,uEADA;AAEAzC,qDAFA;AAGAqC,+EAHA;AAIAC,8DAJA;AAKAC;AALA;AAOA;;;;QAjBAL;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;UACAQ;;;;;AACA;AAAA;;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,6BAPA,CAQA;AACA;AACA;;AACA;AACA,wEAA8DN,2BAA9D;AACA,WAFA,MAGA;AACA,kEAAwDA,2BAAxD,eAAwFA,WAAxF,cAAuGA,eAAvG;AACA;;AACA;AAjBA;AAkBA;;;QAnBAF;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACAO,oBADA;AAEAzC,kCAFA;AAGA6B,kCAHA;AAIAc,kCAJA;AAKA9B,gCALA;AAMAiB,gDANA;AAOAC,4CAPA;AAQAC;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;UACAY;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;iBACA,6BAAoC;AAAA;;AAAA,gBAApC3B,OAAoC,uEAApC,EAAoC;AACpC,oBADoC,CAEpC;;AACA;AACA;AACA;AACA4B;AACA,aAJA,MAKA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA7C;AACA,eAFA,MAGA;AACAA;AACA,eAXA,CAYA;;;AACA;;AACA;AACA;AACAa;AACA,iBAFA,MAGA;AACAA;AAA8CiC;AAA9C;AACA;AACA,eArBA,CAsBA;;;AACAD;AACA7C,gCADA;AAEA6B,wCAFA;AAGAhB,8BAHA;AAIAiB,sDAJA;AAKA;AACAC,4DANA;AAOAC;AAPA;AASA,aAxCoC,CAyCpC;AACA;AACA;AACA;;;AACA,0BAAwB,0CAAEa,GAAF,EAAEE,IAAF,CAAa,2DAAS;AAAA;AAAA,aAAT,CAAb,CAAxB,CA7CoC,CA8CpC;AACA;AACA;;AACA;AACA;AACA,aAnDoC,CAoDpC;AACA;AACA;;;AACA,oCAAkC,wDAAM;AAAA;AAAA,aAAN,CAAlC,EAvDoC,CAwDpC;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAyC,qDAAG;AAC5C;AACA;AACA;AACA;;AACA;AACyB,qBANgB,CAAzC;;AAOA;AACA,qCAAyC,qDAAG;AAC5C;AACA;AACA;AACA;;AACA;AACyB,qBANgB,CAAzC;;AAOA;AACA,qCAAyC,qDAAG;AAC5C;AACA;AACA;AACA;;AACA;AACyB,qBANgB,CAAzC;;AAOA;AACA;AACA;AACA,qCAAyC,qDAAG;AAAA;AAAA,qBAAH,CAAzC;AA5BA;;AA8BA;AACA;AACA;;AACA;AACA;AACA,8EAAuE9B,eAAvE;AA1CA;AA4CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA,sBAA4B;AAAA,gBAA5BA,OAA4B,uEAA5B,EAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA,kBAAyB;AAAA,gBAAzBA,OAAyB,uEAAzB,EAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA,mBAA0B;AAAA,gBAA1BA,OAA0B,uEAA1B,EAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACAJ,+EADA;AAEA8B,6BAFA;AAGAZ;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA,sBAA6B;AAAA,gBAA7Bd,QAA6B,uEAA7B,EAA6B;;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA,0BAAiC;AAAA,gBAAjCA,OAAiC,uEAAjC,EAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA,yBAAgC;AAAA,gBAAhCA,OAAgC,uEAAhC,EAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA,wBAA+B;AAAA,gBAA/BA,OAA+B,uEAA/B,EAA+B;AAC/B;AACA;;;;;;AAEA2B;AAAmD,sCAA6BI,uDAAenD,YAAf,CAA7B;AAA4C,OAA/F;;AACA+C,uCAAiCI,iEAAyB;AAAGC,0BAAH;AAAGC;AAAH,OAAzB,CAAjC;;AACAN;AAAA,gBACA;AAAMO;AAAN,SADA;AAAA;;AAGA;AAAe,2DAAmDH,gEAAwBJ,WAAxB,EAAwB;AAC1FO,gBAAcH;AAD4E,UAAxB,EAE7D;AAAiB;AAAUG;AAAV;AAAiC,SAFW,EAEX,IAFW,CAAnD;AAEkD,OAFjE;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;UACAC;AACA;AAAA;;AACA;AACA;AACA;;;;iBACA;AACA;AACA;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,mCAA8BJ,yDAA9B,CAA4C,mBAA5C;;UACAK;;;;;;;iBACA;AACA;AACA;;;;;;AAEAA;AAA6D;AAAA,OAA7D;;AACAA,2CAAsCL,iEAAyB;AAAGC,8BAAH;AAAGC;AAAH,OAAzB,CAAtC;;AACA;AAAe,2DAAmDF,gEAAwBK,eAAxB,EAAwB;AAC1FF,gBAAcH;AAD4E,UAAxB,EAE7D,IAF6D,EAE7D,IAF6D,CAAnD;AAEO,OAFtB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,6BACA;AACA;;AACA,oFACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;UACAM;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;UACAC;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;;;iBACA;AACA,+CAAoCC,eAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACA;AACA;AACA,aAFA,MAGA;AACA;AACA,aARA,CASA;;;AACA,uBAAmBC,4CAAnB,CAA6B;AAC7B;AACA;AACA;AACA;;AACA,qFAA8EC,QAA9E,SAL6B,CAM7B;;AACA;;AACAC,6BAR6B,CAS7B;AACA;AACA;;AACA,8BAZ6B,CAa7B;;AACA,mCAd6B,CAe7B;AACA;;AACA,oCAjB6B,CAkB7B;AACA;AACA;;AACA;AACA;AACA,qDAFA,CAGA;;AACA;AACA;AACA,iBANA,CAOA;;;AACAlB;AACAmB;AACA,eAVA,CArB6B,CAgC7B;AACA;AACA;;;AACA;AACA;AACA;AACAD;AACA,iBAJA,CAKA;AACA;;;AACA;AACA,eARA,CAnC6B,CA4C7B;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA,iBAJA,CAKA;AACA;AACA;;;AACA;AACA;AACAE,4BAFA,CAGA;;AACA;AACA;AACA;AACAC;AACAvB,8BADA;AAEAF,+BAFA;AAGAC,+CAHA;AAIAyB;AAJA;AAMA;AACA,mBAdA,CAeA;AACA;;;AACAD;AACArB,8BADA;AAEAJ;AAAA;AAFA;AAGAC,oCAHA;AAIAC;AAJA,sBAjBA,CAuBA;;AACAuB;AACiB,iBAzBjB;AA0BA,eAlCA,CAhD6B,CAmF7B;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;;AACAD,0BALA,CAMA;;AACAC;AACAC,8BADA;AAEA1B,2BAFA;AAGAC,2CAHA;AAIAC;AAJA;AAMA,eAbA,CAtF6B,CAoG7B;AACA;;;AACAoB;AACAA;;AACA,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","names":["HttpHandler","HttpBackend","HttpHeaders","headers","Object","values","name","value","op","other","Array","clone","base","existing","forEach","HttpUrlEncodingCodec","params","list","map","HttpParams","options","param","updates","join","filter","encoder","HttpContextToken","HttpContext","HttpRequest","isUrlSearchParams","update","reduce","context","reportProgress","responseType","withCredentials","HttpEventType","HttpResponseBase","HttpHeaderResponse","init","status","statusText","url","HttpResponse","body","HttpErrorResponse","observe","HttpClient","req","fromObject","pipe","_angular_core__WEBPACK_IMPORTED_MODULE_4__","token","factory","type","HttpInterceptorHandler","NoopInterceptor","JsonpCallbackContext","JsonpClientBackend","nextRequestId","rxjs__WEBPACK_IMPORTED_MODULE_5__","callback","node","finished","cleanup","observer","error","cancelled","_angular_common__WEBPACK_IMPORTED_MODULE_6__","decorators","args","JsonpInterceptor","HttpXhrBackend","xhr","headerResponse","partialFromXhr","ok","text","sentHeaders","loaded","progressEvent","progress","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","cookieString","XSRF_COOKIE_NAME","HttpXsrfInterceptor","lcUrl","XSRF_HEADER_NAME","HttpInterceptingHandler","HttpClientXsrfModule","ngModule","providers","provide","useClass","useValue","useExisting","multi","HttpClientModule","imports","cookieName","headerName","HttpClientJsonpModule","useFactory","sources","keys","_Observable__WEBPACK_IMPORTED_MODULE_2__","length","subscriber","sourceIndex","subscribe","_operators_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_4__","hasValue","remainingEmissions","undefined","resultSelector","result","policy","getPolicy","window","ttWindow","trustedTypes","createPolicy","createHTML","s","trustedHTMLFromString","html","_a","getMatIconNameNotFoundError","iconName","Error","getMatIconNoHttpProviderError","getMatIconFailedToSanitizeUrlError","getMatIconFailedToSanitizeLiteralError","literal","SvgIconConfig","constructor","svgText","MatIconRegistry","_httpClient","_sanitizer","document","_errorHandler","_svgIconConfigs","Map","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_resolvers","_defaultFontSetClass","_document","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","addSvgIconResolver","resolver","push","cleanLiteral","sanitize","SecurityContext","trustedLiteral","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","registerFontClassAlias","alias","className","set","classNameForFontAlias","get","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","cachedIcon","of","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","key","iconKey","config","_getSvgFromConfig","_getIconConfigFromResolvers","iconSetConfigs","_getSvgFromIconSetConfigs","throwError","ngOnDestroy","clear","_svgElementFromConfig","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","errorMessage","message","handleError","forkJoin","foundIcon","i","toString","indexOf","_extractSvgIconFromSet","_fetchIcon","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","nodeName","toLowerCase","_setSvgAttributes","_toSvgElement","_svgElementFromString","appendChild","str","div","createElement","innerHTML","element","attributes","setAttribute","childNodes","nodeType","ELEMENT_NODE","viewBox","iconConfig","inProgressFetch","finalize","share","configNamespace","svgElement","isSafeUrlWithOptions","ɵfac","i0","i1","i2","DOCUMENT","ɵprov","providedIn","Injectable","Optional","Inject","ICON_REGISTRY_PROVIDER_FACTORY","parentRegistry","httpClient","sanitizer","errorHandler","ICON_REGISTRY_PROVIDER","deps","SkipSelf","DomSanitizer","ErrorHandler","_MatIconBase","mixinColor","_elementRef","MAT_ICON_LOCATION","InjectionToken","MAT_ICON_LOCATION_FACTORY","inject","_location","location","getPathname","pathname","search","funcIriAttributes","funcIriAttributeSelector","attr","funcIriPattern","MatIcon","elementRef","_iconRegistry","ariaHidden","_inline","_currentIconFetch","Subscription","nativeElement","inline","coerceBooleanProperty","_svgIcon","_updateSvgIcon","_clearSvgElement","_fontSet","newValue","_cleanupFontValue","_updateFontIconClasses","_fontIcon","_splitIconName","parts","split","ngOnInit","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","size","newPath","_previousPath","_prependPathToReferences","unsubscribe","_usingFontIcon","svgIcon","_setSvgElement","styleTags","querySelectorAll","textContent","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","remove","elem","fontSetClass","fontSet","_previousFontSetClass","classList","add","fontIcon","_previousFontIconClass","trim","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","rawName","_svgNamespace","_svgName","take","ɵcmp","selectors","hostAttrs","hostVars","hostBindings","ctx","inputs","color","exportAs","features","ngContentSelectors","decls","vars","template","styles","encapsulation","changeDetection","Component","selector","host","ViewEncapsulation","ChangeDetectionStrategy","Attribute","Input","MatIconModule","ɵmod","ɵinj","MatCommonModule","NgModule","exports","declarations"],"sources":["webpack:///node_modules/@angular/common/__ivy_ngcc__/fesm2015/http.js","webpack:///node_modules/rxjs/dist/esm/internal/observable/forkJoin.js","webpack:///node_modules/@angular/material/fesm2015/icon.mjs"],"sourcesContent":["/**\n * @license Angular v12.2.15\n * (c) 2010-2021 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { DOCUMENT, XhrFactory as XhrFactory$1, ɵparseCookieValue } from '@angular/common';\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nclass HttpHandler {\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nclass HttpBackend {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nclass HttpHeaders {\n    /**  Constructs a new HTTP header object with the given values.*/\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach(line => {\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        const name = line.slice(0, index);\n                        const key = name.toLowerCase();\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            this.headers.get(key).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                Object.keys(headers).forEach(name => {\n                    let values = headers[name];\n                    const key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        this.headers.set(key, values);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param name The header name to check for existence.\n     *\n     * @returns True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or overide for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach(key => {\n            this.headers.set(key, other.headers.get(key));\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\n        });\n    }\n    clone(update) {\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    applyUpdate(update) {\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                let value = update.value;\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                const toDelete = update.value;\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * @internal\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    encodeKey(key) {\n        return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n    encodeValue(value) {\n        return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n    decodeKey(key) {\n        return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n    decodeValue(value) {\n        return decodeURIComponent(value);\n    }\n}\nfunction paramParser(rawParams, codec) {\n    const map = new Map();\n    if (rawParams.length > 0) {\n        // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n        // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n        // may start with the `?` char, so we strip it if it's present.\n        const params = rawParams.replace(/^\\?/, '').split('&');\n        params.forEach((param) => {\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS = {\n    '40': '@',\n    '3A': ':',\n    '24': '$',\n    '2C': ',',\n    '3B': ';',\n    '2B': '+',\n    '3D': '=',\n    '3F': '?',\n    '2F': '/',\n};\nfunction standardEncoding(v) {\n    return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, (s, t) => { var _a; return (_a = STANDARD_ENCODING_REPLACEMENTS[t]) !== null && _a !== void 0 ? _a : s; });\n}\nfunction valueToString(value) {\n    return `${value}`;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nclass HttpParams {\n    constructor(options = {}) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(key => {\n                const value = options.fromObject[key];\n                this.map.set(key, Array.isArray(value) ? value : [value]);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param param The parameter name.\n     * @returns True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        const res = this.map.get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n    append(param, value) {\n        return this.clone({ param, value, op: 'a' });\n    }\n    /**\n     * Constructs a new body with appended values for the given parameter name.\n     * @param params parameters and values\n     * @return A new body with the new value.\n     */\n    appendAll(params) {\n        const updates = [];\n        Object.keys(params).forEach(param => {\n            const value = params[param];\n            if (Array.isArray(value)) {\n                value.forEach(_value => {\n                    updates.push({ param, value: _value, op: 'a' });\n                });\n            }\n            else {\n                updates.push({ param, value: value, op: 'a' });\n            }\n        });\n        return this.clone(updates);\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n    set(param, value) {\n        return this.clone({ param, value, op: 's' });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) {\n        return this.clone({ param, value, op: 'd' });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map(key => {\n            const eKey = this.encoder.encodeKey(key);\n            // `a: ['1']` produces `'a=1'`\n            // `b: []` produces `''`\n            // `c: ['1', '2']` produces `'c=1&c=2'`\n            return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value))\n                .join('&');\n        })\n            // filter out empty values because `b: []` produces `''`\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n            .filter(param => param !== '')\n            .join('&');\n    }\n    clone(update) {\n        const clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat(update);\n        return clone;\n    }\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n            this.updates.forEach(update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n                        base.push(valueToString(update.value));\n                        this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            let base = this.map.get(update.param) || [];\n                            const idx = base.indexOf(valueToString(update.value));\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                this.map.set(update.param, base);\n                            }\n                            else {\n                                this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nclass HttpContextToken {\n    constructor(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n}\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nclass HttpContext {\n    constructor() {\n        this.map = new Map();\n    }\n    /**\n     * Store a value in the context. If a value is already present it will be overwritten.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     * @param value The value to store.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    set(token, value) {\n        this.map.set(token, value);\n        return this;\n    }\n    /**\n     * Retrieve the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns The stored value or default if one is defined.\n     */\n    get(token) {\n        if (!this.map.has(token)) {\n            this.map.set(token, token.defaultValue());\n        }\n        return this.map.get(token);\n    }\n    /**\n     * Delete the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    delete(token) {\n        this.map.delete(token);\n        return this;\n    }\n    /**\n     * @returns a list of tokens currently stored in the context.\n     */\n    keys() {\n        return this.map.keys();\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value) {\n    return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nclass HttpRequest {\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.context) {\n                this.context = options.context;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no context have been passed in, construct a new HttpContext instance.\n        if (!this.context) {\n            this.context = new HttpContext();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            isUrlSearchParams(this.body) || typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, boolean and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            typeof this.body === 'boolean') {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    clone(update = {}) {\n        var _a;\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        const method = update.method || this.method;\n        const url = update.url || this.url;\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        let headers = update.headers || this.headers;\n        let params = update.params || this.params;\n        // Pass on context if needed\n        const context = (_a = update.context) !== null && _a !== void 0 ? _a : this.context;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((params, param) => params.set(param, update.setParams[param]), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params,\n            headers,\n            context,\n            reportProgress,\n            responseType,\n            withCredentials,\n        });\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType;\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    constructor(init, defaultStatus = 200 /* Ok */, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        context: options.context,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\nclass HttpClient {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n    request(first, url, options = {}) {\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\n                headers,\n                context: options.context,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((res) => res.body));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilities of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n}\nHttpClient.ɵfac = function HttpClient_Factory(t) { return new (t || HttpClient)(ɵngcc0.ɵɵinject(HttpHandler)); };\nHttpClient.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpClient, factory: HttpClient.ɵfac });\nHttpClient.ctorParameters = () => [\n    { type: HttpHandler }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClient, [{\n        type: Injectable\n    }], function () { return [{ type: HttpHandler }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nclass HttpInterceptorHandler {\n    constructor(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    handle(req) {\n        return this.interceptor.intercept(req, this.next);\n    }\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nclass NoopInterceptor {\n    intercept(req, next) {\n        return next.handle(req);\n    }\n}\nNoopInterceptor.ɵfac = function NoopInterceptor_Factory(t) { return new (t || NoopInterceptor)(); };\nNoopInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NoopInterceptor, factory: NoopInterceptor.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NoopInterceptor, [{\n        type: Injectable\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nclass JsonpCallbackContext {\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\nclass JsonpClientBackend {\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n        /**\n         * A resolved promise that can be used to schedule microtasks in the event handlers.\n         */\n        this.resolvedPromise = Promise.resolve();\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    nextCallback() {\n        return `ng_jsonp_callback_${nextRequestId++}`;\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            const callback = this.nextCallback();\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            let body = null;\n            // Whether the response callback has been called.\n            let finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            let cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            const cleanup = () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            const onLoad = (event) => {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // We wrap it in an extra Promise, to ensure the microtask\n                // is scheduled after the loaded endpoint has executed any potential microtask itself,\n                // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n                this.resolvedPromise.then(() => {\n                    // Cleanup the page.\n                    cleanup();\n                    // Check whether the response callback has run.\n                    if (!finished) {\n                        // It hasn't, something went wrong with the request. Return an error via\n                        // the Observable error path. All JSONP errors have status 0.\n                        observer.error(new HttpErrorResponse({\n                            url,\n                            status: 0,\n                            statusText: 'JSONP Error',\n                            error: new Error(JSONP_ERR_NO_CALLBACK),\n                        }));\n                        return;\n                    }\n                    // Success. body either contains the response body or null if none was\n                    // returned.\n                    observer.next(new HttpResponse({\n                        body,\n                        status: 200 /* Ok */,\n                        statusText: 'OK',\n                        url,\n                    }));\n                    // Complete the stream, the response is over.\n                    observer.complete();\n                });\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            const onError = (error) => {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error',\n                    url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return () => {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    }\n}\nJsonpClientBackend.ɵfac = function JsonpClientBackend_Factory(t) { return new (t || JsonpClientBackend)(ɵngcc0.ɵɵinject(JsonpCallbackContext), ɵngcc0.ɵɵinject(DOCUMENT)); };\nJsonpClientBackend.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: JsonpClientBackend, factory: JsonpClientBackend.ɵfac });\nJsonpClientBackend.ctorParameters = () => [\n    { type: JsonpCallbackContext },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpClientBackend, [{\n        type: Injectable\n    }], function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\nclass JsonpInterceptor {\n    constructor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param req The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n    intercept(req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle(req);\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    }\n}\nJsonpInterceptor.ɵfac = function JsonpInterceptor_Factory(t) { return new (t || JsonpInterceptor)(ɵngcc0.ɵɵinject(JsonpClientBackend)); };\nJsonpInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: JsonpInterceptor, factory: JsonpInterceptor.ɵfac });\nJsonpInterceptor.ctorParameters = () => [\n    { type: JsonpClientBackend }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpInterceptor, [{\n        type: Injectable\n    }], function () { return [{ type: JsonpClientBackend }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\nclass HttpXhrBackend {\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\n        if (req.method === 'JSONP') {\n            throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\n        }\n        // Everything happens on Observable subscription.\n        return new Observable((observer) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            const xhr = this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                const detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                const responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            const reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            let headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            const partialFromXhr = () => {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (https://bugs.jquery.com/ticket/1450).\n                const status = xhr.status === 1223 ? 204 /* NoContent */ : xhr.status;\n                const statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                const url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers, status, statusText, url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            const onLoad = () => {\n                // Read response state from the memoized partial data.\n                let { headers, status, statusText, url } = partialFromXhr();\n                // The body will be read out if present.\n                let body = null;\n                if (status !== 204 /* NoContent */) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 /* Ok */ : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                let ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    const originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = { error, text: body };\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            const onError = (error) => {\n                const { url } = partialFromXhr();\n                const res = new HttpErrorResponse({\n                    error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            let sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            const onDownProgress = (event) => {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                let progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            const onUpProgress = (event) => {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                let progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            xhr.addEventListener('timeout', onError);\n            xhr.addEventListener('abort', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return () => {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('abort', onError);\n                xhr.removeEventListener('load', onLoad);\n                xhr.removeEventListener('timeout', onError);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                if (xhr.readyState !== xhr.DONE) {\n                    xhr.abort();\n                }\n            };\n        });\n    }\n}\nHttpXhrBackend.ɵfac = function HttpXhrBackend_Factory(t) { return new (t || HttpXhrBackend)(ɵngcc0.ɵɵinject(ɵngcc1.XhrFactory)); };\nHttpXhrBackend.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpXhrBackend, factory: HttpXhrBackend.ɵfac });\nHttpXhrBackend.ctorParameters = () => [\n    { type: XhrFactory$1 }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXhrBackend, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc1.XhrFactory }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nclass HttpXsrfTokenExtractor {\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * @internal for testing\n         */\n        this.parseCount = 0;\n    }\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n}\nHttpXsrfCookieExtractor.ɵfac = function HttpXsrfCookieExtractor_Factory(t) { return new (t || HttpXsrfCookieExtractor)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(XSRF_COOKIE_NAME)); };\nHttpXsrfCookieExtractor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfCookieExtractor, factory: HttpXsrfCookieExtractor.ɵfac });\nHttpXsrfCookieExtractor.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXsrfCookieExtractor, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: String, decorators: [{\n                type: Inject,\n                args: [XSRF_COOKIE_NAME]\n            }] }]; }, null); })();\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    constructor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    intercept(req, next) {\n        const lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        const token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    }\n}\nHttpXsrfInterceptor.ɵfac = function HttpXsrfInterceptor_Factory(t) { return new (t || HttpXsrfInterceptor)(ɵngcc0.ɵɵinject(HttpXsrfTokenExtractor), ɵngcc0.ɵɵinject(XSRF_HEADER_NAME)); };\nHttpXsrfInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfInterceptor, factory: HttpXsrfInterceptor.ɵfac });\nHttpXsrfInterceptor.ctorParameters = () => [\n    { type: HttpXsrfTokenExtractor },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXsrfInterceptor, [{\n        type: Injectable\n    }], function () { return [{ type: HttpXsrfTokenExtractor }, { type: String, decorators: [{\n                type: Inject,\n                args: [XSRF_HEADER_NAME]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nclass HttpInterceptingHandler {\n    constructor(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    handle(req) {\n        if (this.chain === null) {\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\n        }\n        return this.chain.handle(req);\n    }\n}\nHttpInterceptingHandler.ɵfac = function HttpInterceptingHandler_Factory(t) { return new (t || HttpInterceptingHandler)(ɵngcc0.ɵɵinject(HttpBackend), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };\nHttpInterceptingHandler.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpInterceptingHandler, factory: HttpInterceptingHandler.ɵfac });\nHttpInterceptingHandler.ctorParameters = () => [\n    { type: HttpBackend },\n    { type: Injector }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpInterceptingHandler, [{\n        type: Injectable\n    }], function () { return [{ type: HttpBackend }, { type: ɵngcc0.Injector }]; }, null); })();\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n */\nfunction interceptingHandler(backend, interceptors = []) {\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    }\n}\nHttpClientXsrfModule.ɵfac = function HttpClientXsrfModule_Factory(t) { return new (t || HttpClientXsrfModule)(); };\nHttpClientXsrfModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HttpClientXsrfModule });\nHttpClientXsrfModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        HttpXsrfInterceptor,\n        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n    ] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientXsrfModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    HttpXsrfInterceptor,\n                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                ]\n            }]\n    }], null, null); })();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientModule {\n}\nHttpClientModule.ɵfac = function HttpClientModule_Factory(t) { return new (t || HttpClientModule)(); };\nHttpClientModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HttpClientModule });\nHttpClientModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        HttpClient,\n        { provide: HttpHandler, useClass: HttpInterceptingHandler },\n        HttpXhrBackend,\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\n    ], imports: [[\n            HttpClientXsrfModule.withOptions({\n                cookieName: 'XSRF-TOKEN',\n                headerName: 'X-XSRF-TOKEN'\n            }),\n        ]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientModule, [{\n        type: NgModule,\n        args: [{\n                /**\n                 * Optional configuration for XSRF protection.\n                 */\n                imports: [\n                    HttpClientXsrfModule.withOptions({\n                        cookieName: 'XSRF-TOKEN',\n                        headerName: 'X-XSRF-TOKEN'\n                    }),\n                ],\n                /**\n                 * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                 * with supporting services for HTTP communications.\n                 */\n                providers: [\n                    HttpClient,\n                    { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                    HttpXhrBackend,\n                    { provide: HttpBackend, useExisting: HttpXhrBackend },\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HttpClientModule, { imports: [HttpClientXsrfModule] }); })();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientJsonpModule {\n}\nHttpClientJsonpModule.ɵfac = function HttpClientJsonpModule_Factory(t) { return new (t || HttpClientJsonpModule)(); };\nHttpClientJsonpModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HttpClientJsonpModule });\nHttpClientJsonpModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        JsonpClientBackend,\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n    ] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientJsonpModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    JsonpClientBackend,\n                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n * @see `XhrFactory`\n * @deprecated\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\n */\nconst XhrFactory = XhrFactory$1;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, HttpInterceptingHandler as ɵHttpInterceptingHandler, NoopInterceptor as ɵangular_packages_common_http_http_a, JsonpCallbackContext as ɵangular_packages_common_http_http_b, jsonpCallbackContext as ɵangular_packages_common_http_http_c, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_d, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_e, HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_f, HttpXsrfInterceptor as ɵangular_packages_common_http_http_g };\n\n","import { Observable } from '../Observable';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { innerFrom } from './innerFrom';\nimport { popResultSelector } from '../util/args';\nimport { OperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { createObject } from '../util/createObject';\nexport function forkJoin(...args) {\n    const resultSelector = popResultSelector(args);\n    const { args: sources, keys } = argsArgArrayOrObject(args);\n    const result = new Observable((subscriber) => {\n        const { length } = sources;\n        if (!length) {\n            subscriber.complete();\n            return;\n        }\n        const values = new Array(length);\n        let remainingCompletions = length;\n        let remainingEmissions = length;\n        for (let sourceIndex = 0; sourceIndex < length; sourceIndex++) {\n            let hasValue = false;\n            innerFrom(sources[sourceIndex]).subscribe(new OperatorSubscriber(subscriber, (value) => {\n                if (!hasValue) {\n                    hasValue = true;\n                    remainingEmissions--;\n                }\n                values[sourceIndex] = value;\n            }, () => remainingCompletions--, undefined, () => {\n                if (!remainingCompletions || !hasValue) {\n                    if (!remainingEmissions) {\n                        subscriber.next(keys ? createObject(keys, values) : values);\n                    }\n                    subscriber.complete();\n                }\n            }));\n        }\n    });\n    return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;\n}\n","import * as i0 from '@angular/core';\nimport { SecurityContext, Injectable, Optional, Inject, SkipSelf, ErrorHandler, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport * as i1 from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport * as i2 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy() {\n    if (policy === undefined) {\n        policy = null;\n        if (typeof window !== 'undefined') {\n            const ttWindow = window;\n            if (ttWindow.trustedTypes !== undefined) {\n                policy = ttWindow.trustedTypes.createPolicy('angular#components', {\n                    createHTML: (s) => s,\n                });\n            }\n        }\n    }\n    return policy;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\nfunction trustedHTMLFromString(html) {\n    var _a;\n    return ((_a = getPolicy()) === null || _a === void 0 ? void 0 : _a.createHTML(html)) || html;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n    constructor(url, svgText, options) {\n        this.url = url;\n        this.svgText = svgText;\n        this.options = options;\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /** Cache for icons loaded by direct URLs. */\n        this._cachedIconsByUrl = new Map();\n        /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n        this._inProgressUrlFetches = new Map();\n        /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n        this._fontCssClassesByAlias = new Map();\n        /** Registered icon resolver functions. */\n        this._resolvers = [];\n        /**\n         * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n         * The default 'material-icons' value assumes that the material icon font has been loaded as\n         * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = 'material-icons';\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName, url, options) {\n        return this.addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon resolver function with the registry. The function will be invoked with the\n     * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n     * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n     * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n     * will be invoked in the order in which they have been registered.\n     * @param resolver Resolver function to be registered.\n     */\n    addSvgIconResolver(resolver) {\n        this._resolvers.push(resolver);\n        return this;\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        // TODO: add an ngDevMode check\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url, options) {\n        return this.addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return this.addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @param alias Alias for the font.\n     * @param className Class name override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias, className = alias) {\n        this._fontCssClassesByAlias.set(alias, className);\n        return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @param className\n     */\n    setDefaultFontSetClass(className) {\n        this._defaultFontSetClass = className;\n        return this;\n    }\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl) {\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        const key = iconKey(namespace, name);\n        let config = this._svgIconConfigs.get(key);\n        // Return (copy of) cached icon if possible.\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // Otherwise try to resolve the config from one of the resolver functions.\n        config = this._getIconConfigFromResolvers(namespace, name);\n        if (config) {\n            this._svgIconConfigs.set(key, config);\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    ngOnDestroy() {\n        this._resolvers = [];\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgText) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(this._svgElementFromConfig(config)));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        const iconSetFetchRequests = iconSetConfigs\n            .filter(iconSetConfig => !iconSetConfig.svgText)\n            .map(iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n                return of(null);\n            }));\n        });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map(() => {\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            // TODO: add an ngDevMode check\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            const config = iconSetConfigs[i];\n            // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n            // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n            // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n            // some of the parsing.\n            if (config.svgText && config.svgText.toString().indexOf(iconName) > -1) {\n                const svg = this._svgElementFromConfig(config);\n                const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)), map(() => this._svgElementFromConfig(config)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the\n     * SvgIconConfig and attaches it to the config.\n     */\n    _loadSvgIconSetFromConfig(config) {\n        if (config.svgText) {\n            return of(null);\n        }\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)));\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        const iconElement = iconSource.cloneNode(true);\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes(iconElement, options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    _svgElementFromString(str) {\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        const svg = div.querySelector('svg');\n        // TODO: add an ngDevMode check\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    _toSvgElement(element) {\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    _fetchIcon(iconConfig) {\n        var _a;\n        const { url: safeUrl, options } = iconConfig;\n        const withCredentials = (_a = options === null || options === void 0 ? void 0 : options.withCredentials) !== null && _a !== void 0 ? _a : false;\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        // TODO: add an ngDevMode check\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        // TODO: add an ngDevMode check\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        const req = this._httpClient.get(url, { responseType: 'text', withCredentials }).pipe(map(svg => {\n            // Security: This SVG is fetched from a SafeResourceUrl, and is thus\n            // trusted HTML.\n            return trustedHTMLFromString(svg);\n        }), finalize(() => this._inProgressUrlFetches.delete(url)), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        const configNamespace = this._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    }\n    /** Parses a config's text into an SVG element. */\n    _svgElementFromConfig(config) {\n        if (!config.svgElement) {\n            const svg = this._svgElementFromString(config.svgText);\n            this._setSvgAttributes(svg, config.options);\n            config.svgElement = svg;\n        }\n        return config.svgElement;\n    }\n    /** Tries to create an icon config through the registered resolver functions. */\n    _getIconConfigFromResolvers(namespace, name) {\n        for (let i = 0; i < this._resolvers.length; i++) {\n            const result = this._resolvers[i](name, namespace);\n            if (result) {\n                return isSafeUrlWithOptions(result)\n                    ? new SvgIconConfig(result.url, null, result.options)\n                    : new SvgIconConfig(result, null);\n            }\n        }\n        return undefined;\n    }\n}\nMatIconRegistry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatIconRegistry, deps: [{ token: i1.HttpClient, optional: true }, { token: i2.DomSanitizer }, { token: DOCUMENT, optional: true }, { token: i0.ErrorHandler }], target: i0.ɵɵFactoryTarget.Injectable });\nMatIconRegistry.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatIconRegistry, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatIconRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.HttpClient, decorators: [{\n                        type: Optional\n                    }] }, { type: i2.DomSanitizer }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i0.ErrorHandler }];\n    } });\n/** @docs-private */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        ErrorHandler,\n        [new Optional(), DOCUMENT],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg) {\n    return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\nfunction isSafeUrlWithOptions(value) {\n    return !!(value.url && value.options);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nconst _MatIconBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n});\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY,\n});\n/** @docs-private */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => (_location ? _location.pathname + _location.search : ''),\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke',\n];\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconBase {\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        this._inline = false;\n        /** Subscription to the current in-progress SVG icon request. */\n        this._currentIconFetch = Subscription.EMPTY;\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    get inline() {\n        return this._inline;\n    }\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /** Name of the icon in the SVG icon set. */\n    get svgIcon() {\n        return this._svgIcon;\n    }\n    set svgIcon(value) {\n        if (value !== this._svgIcon) {\n            if (value) {\n                this._updateSvgIcon(value);\n            }\n            else if (this._svgIcon) {\n                this._clearSvgElement();\n            }\n            this._svgIcon = value;\n        }\n    }\n    /** Font set that the icon is a part of. */\n    get fontSet() {\n        return this._fontSet;\n    }\n    set fontSet(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontSet) {\n            this._fontSet = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /** Name of an icon within a font set. */\n    get fontIcon() {\n        return this._fontIcon;\n    }\n    set fontIcon(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontIcon) {\n            this._fontIcon = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1:\n                return ['', parts[0]]; // Use default namespace.\n            case 2:\n                return parts;\n            default:\n                throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n        }\n    }\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        this._updateFontIconClasses();\n    }\n    ngAfterViewChecked() {\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && cachedElements.size) {\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n        // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n        const styleTags = svg.querySelectorAll('style');\n        for (let i = 0; i < styleTags.length; i++) {\n            styleTags[i].textContent += ' ';\n        }\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        const path = this._location.getPathname();\n        this._previousPath = path;\n        this._cacheChildrenWithExternalReferences(svg);\n        this._prependPathToReferences(path);\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n        const layoutElement = this._elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                child.remove();\n            }\n        }\n    }\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        const elem = this._elementRef.nativeElement;\n        const fontSetClass = this.fontSet\n            ? this._iconRegistry.classNameForFontAlias(this.fontSet)\n            : this._iconRegistry.getDefaultFontSetClass();\n        if (fontSetClass != this._previousFontSetClass) {\n            if (this._previousFontSetClass) {\n                elem.classList.remove(this._previousFontSetClass);\n            }\n            if (fontSetClass) {\n                elem.classList.add(fontSetClass);\n            }\n            this._previousFontSetClass = fontSetClass;\n        }\n        if (this.fontIcon != this._previousFontIconClass) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        const elements = (this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map());\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                const elementWithReference = elementsWithFuncIri[i];\n                const value = elementWithReference.getAttribute(attr);\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n    /** Sets a new SVG icon with a particular name. */\n    _updateSvgIcon(rawName) {\n        this._svgNamespace = null;\n        this._svgName = null;\n        this._currentIconFetch.unsubscribe();\n        if (rawName) {\n            const [namespace, iconName] = this._splitIconName(rawName);\n            if (namespace) {\n                this._svgNamespace = namespace;\n            }\n            if (iconName) {\n                this._svgName = iconName;\n            }\n            this._currentIconFetch = this._iconRegistry\n                .getNamedSvgIcon(iconName, namespace)\n                .pipe(take(1))\n                .subscribe(svg => this._setSvgElement(svg), (err) => {\n                const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n            });\n        }\n    }\n}\nMatIcon.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatIcon, deps: [{ token: i0.ElementRef }, { token: MatIconRegistry }, { token: 'aria-hidden', attribute: true }, { token: MAT_ICON_LOCATION }, { token: i0.ErrorHandler }], target: i0.ɵɵFactoryTarget.Component });\nMatIcon.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: MatIcon, selector: \"mat-icon\", inputs: { color: \"color\", inline: \"inline\", svgIcon: \"svgIcon\", fontSet: \"fontSet\", fontIcon: \"fontIcon\" }, host: { attributes: { \"role\": \"img\" }, properties: { \"attr.data-mat-icon-type\": \"_usingFontIcon() ? \\\"font\\\" : \\\"svg\\\"\", \"attr.data-mat-icon-name\": \"_svgName || fontIcon\", \"attr.data-mat-icon-namespace\": \"_svgNamespace || fontSet\", \"class.mat-icon-inline\": \"inline\", \"class.mat-icon-no-color\": \"color !== \\\"primary\\\" && color !== \\\"accent\\\" && color !== \\\"warn\\\"\" }, classAttribute: \"mat-icon notranslate\" }, exportAs: [\"matIcon\"], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [\".mat-icon{-webkit-user-select:none;-moz-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatIcon, decorators: [{\n            type: Component,\n            args: [{ template: '<ng-content></ng-content>', selector: 'mat-icon', exportAs: 'matIcon', inputs: ['color'], host: {\n                        'role': 'img',\n                        'class': 'mat-icon notranslate',\n                        '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n                        '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n                        '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n                        '[class.mat-icon-inline]': 'inline',\n                        '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-icon{-webkit-user-select:none;-moz-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: MatIconRegistry }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['aria-hidden']\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_ICON_LOCATION]\n                    }] }, { type: i0.ErrorHandler }];\n    }, propDecorators: { inline: [{\n                type: Input\n            }], svgIcon: [{\n                type: Input\n            }], fontSet: [{\n                type: Input\n            }], fontIcon: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatIconModule {\n}\nMatIconModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatIconModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatIconModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatIconModule, declarations: [MatIcon], imports: [MatCommonModule], exports: [MatIcon, MatCommonModule] });\nMatIconModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatIconModule, imports: [[MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatIconModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule],\n                    exports: [MatIcon, MatCommonModule],\n                    declarations: [MatIcon],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError };\n"]}