{"version":3,"file":"default-node_modules_donmahallem_sudoku_dist_esm_index_js-es2015.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sBAAsB;AAC3D,4CAA4C,yBAAyB;AACrE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,iBAAiB;AACrD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,oBAAoB;AAC3D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oCAAoC,iBAAiB;AACrD,2CAA2C,oBAAoB;AAC/D;AACA,6CAA6C,gBAAgB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,YAAY;AAC9C,kCAAkC,SAAS;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,YAAY;AAC3C,iCAAiC,SAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,eAAe;AACvC,wCAAwC,EAAE;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,mBAAmB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,WAAW;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,SAAS;AAC5C;AACA,sCAAsC,SAAS;AAC/C;AACA;AACA;AACA;AACA;AACA,qCAAqC,SAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,kBAAkB;AACtD,2CAA2C,qBAAqB;AAChE,0CAA0C,gBAAgB;AAC1D,uCAAuC,oBAAoB;AAC3D,8CAA8C,uBAAuB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,kBAAkB;AACtD,2CAA2C,qBAAqB;AAChE,0CAA0C,gBAAgB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,qBAAqB;AAC5D,sCAAsC,gBAAgB;AACtD,4CAA4C,kBAAkB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,kBAAkB;AACtD,sCAAsC,gBAAgB;AACtD,+CAA+C,qBAAqB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,kBAAkB;AACtD,2CAA2C,qBAAqB;AAChE;AACA;AACA,+CAA+C,kBAAkB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,eAAe;AACnC;AACA;AACA;AACA;AACA,oBAAoB,0DAA0D;AAC9E;AACA;AACA;AACA;AACA;AACA;;AAEgI;AAChI","sources":["./node_modules/@donmahallem/sudoku/dist/esm/index.js"],"sourcesContent":["/*\r\n * Package @donmahallem/sudoku\r\n * Source https://donmahallem.github.io/js-libs/\r\n */\r\nconst COVER_START_IDX = 1;\r\nconst BOARD_START_IDX = 0;\r\nconst CONSTRAINTS = 4;\r\nconst EMPTY_CELL = 0;\r\nconst CELL_VALUE_MIN = 1;\n\n/*\r\n * Package @donmahallem/sudoku\r\n * Source https://donmahallem.github.io/js-libs/\r\n */\r\nconst checkConstraint = (board, row, constraint, column) => {\r\n    if (board[row][column] !== EMPTY_CELL) {\r\n        if (!constraint[board[row][column] - 1]) {\r\n            constraint[board[row][column] - 1] = true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\n\n/*\r\n * Package @donmahallem/sudoku\r\n * Source https://donmahallem.github.io/js-libs/\r\n */\r\nconst checkBoxConstraint = (board, row, column, boardSize, boxSize) => {\r\n    const constraint = new Array(boardSize).fill(false);\r\n    const subsectionRowStart = Math.floor(row / boxSize) * boxSize;\r\n    const subsectionRowEnd = subsectionRowStart + boxSize;\r\n    const subsectionColumnStart = Math.floor(column / boxSize) * boxSize;\r\n    const subsectionColumnEnd = subsectionColumnStart + boxSize;\r\n    for (let r = subsectionRowStart; r < subsectionRowEnd; r++) {\r\n        for (let c = subsectionColumnStart; c < subsectionColumnEnd; c++) {\r\n            if (!checkConstraint(board, r, constraint, c))\r\n                return false;\r\n        }\r\n    }\r\n    return true;\r\n};\n\n/*\r\n * Package @donmahallem/sudoku\r\n * Source https://donmahallem.github.io/js-libs/\r\n */\r\nconst checkColumnConstraint = (board, column, boardSize) => {\r\n    const constraint = new Array(boardSize).fill(false);\r\n    for (let row = BOARD_START_IDX; row < boardSize; row++) {\r\n        if (!checkConstraint(board, row, constraint, column)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\n\n/*\r\n * Package @donmahallem/sudoku\r\n * Source https://donmahallem.github.io/js-libs/\r\n */\r\nconst checkRowConstraint = (board, row, boardSize) => {\r\n    const constraint = new Array(boardSize).fill(false);\r\n    for (let column = BOARD_START_IDX; column < boardSize; column++) {\r\n        if (!checkConstraint(board, row, constraint, column)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\n\n/*\r\n * Package @donmahallem/sudoku\r\n * Source https://donmahallem.github.io/js-libs/\r\n */\r\nconst isValid = (board, row, column, boardSize, boxSize) => {\r\n    return (checkRowConstraint(board, row, boardSize) &&\r\n        checkColumnConstraint(board, column, boardSize) &&\r\n        checkBoxConstraint(board, row, column, boardSize, boxSize));\r\n};\n\n/*\r\n * Package @donmahallem/sudoku\r\n * Source https://donmahallem.github.io/js-libs/\r\n */\r\nconst solve$1 = (board, boardSize, boxSize) => {\r\n    for (let row = BOARD_START_IDX; row < boardSize; row++) {\r\n        for (let column = BOARD_START_IDX; column < boardSize; column++) {\r\n            if (board[row][column] === EMPTY_CELL) {\r\n                for (let k = CELL_VALUE_MIN; k <= boardSize; k++) {\r\n                    board[row][column] = k;\r\n                    if (isValid(board, row, column, boardSize, boxSize) && solve$1(board, boardSize, boxSize)) {\r\n                        return true;\r\n                    }\r\n                    board[row][column] = EMPTY_CELL;\r\n                }\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n};\n\n/*\r\n * Package @donmahallem/sudoku\r\n * Source https://donmahallem.github.io/js-libs/\r\n */\r\nconst createEmptySudokuBoard = (boardSize) => {\r\n    return new Array(boardSize).fill(0).map(() => new Array(boardSize).fill(EMPTY_CELL));\r\n};\n\n/*\r\n * Package @donmahallem/sudoku\r\n * Source https://donmahallem.github.io/js-libs/\r\n */\r\n// tslint:disable:max-classes-per-file\r\nclass DancingNode {\r\n    constructor(columnNode) {\r\n        this.left = this;\r\n        this.right = this;\r\n        this.top = this;\r\n        this.bottom = this;\r\n        if (columnNode) {\r\n            this.column = columnNode;\r\n        }\r\n    }\r\n    linkDown(node) {\r\n        node.bottom = this.bottom;\r\n        node.bottom.top = node;\r\n        node.top = this;\r\n        this.bottom = node;\r\n        return node;\r\n    }\r\n    linkRight(node) {\r\n        node.right = this.right;\r\n        node.right.left = node;\r\n        node.left = this;\r\n        this.right = node;\r\n        return node;\r\n    }\r\n    removeLeftRight() {\r\n        this.left.right = this.right;\r\n        this.right.left = this.left;\r\n    }\r\n    reinsertLeftRight() {\r\n        this.left.right = this;\r\n        this.right.left = this;\r\n    }\r\n    removeTopBottom() {\r\n        this.top.bottom = this.bottom;\r\n        this.bottom.top = this.top;\r\n    }\r\n    reinsertTopBottom() {\r\n        this.top.bottom = this;\r\n        this.bottom.top = this;\r\n    }\r\n}\r\nclass ColumnNode extends DancingNode {\r\n    constructor(name) {\r\n        super();\r\n        this.name = name;\r\n        this.size = 0;\r\n        this.column = this;\r\n    }\r\n    cover() {\r\n        this.removeLeftRight();\r\n        for (let i = this.bottom; i !== this; i = i.bottom) {\r\n            for (let j = i.right; j !== i; j = j.right) {\r\n                j.removeTopBottom();\r\n                j.column.size--;\r\n            }\r\n        }\r\n    }\r\n    uncover() {\r\n        for (let i = this.top; i !== this; i = i.top) {\r\n            for (let j = i.left; j !== i; j = j.left) {\r\n                j.column.size++;\r\n                j.reinsertTopBottom();\r\n            }\r\n        }\r\n        this.reinsertLeftRight();\r\n    }\r\n}\n\n/*\r\n * Package @donmahallem/sudoku\r\n * Source https://donmahallem.github.io/js-libs/\r\n */\r\nclass DLX {\r\n    constructor(cover, boardSize) {\r\n        this.boardSize = boardSize;\r\n        this.isDone = false;\r\n        this.header = this.createDLXList(cover);\r\n    }\r\n    createDLXList(grid) {\r\n        const nbColumns = grid[0].length;\r\n        let headerNode = new ColumnNode('header');\r\n        const columnNodes = [];\r\n        for (let i = 0; i < nbColumns; i++) {\r\n            const n = new ColumnNode(`${i}`);\r\n            columnNodes.push(n);\r\n            headerNode = headerNode.linkRight(n);\r\n        }\r\n        headerNode = headerNode.right.column;\r\n        for (const aGrid of grid) {\r\n            let prev = undefined;\r\n            for (let j = 0; j < nbColumns; j++) {\r\n                if (aGrid[j]) {\r\n                    const col = columnNodes[j];\r\n                    const newNode = new DancingNode(col);\r\n                    // tslint:disable-next-line:triple-equals\r\n                    if (prev == undefined) {\r\n                        prev = newNode;\r\n                    }\r\n                    col.top.linkDown(newNode);\r\n                    prev = prev.linkRight(newNode);\r\n                    col.size++;\r\n                }\r\n            }\r\n        }\r\n        headerNode.size = nbColumns;\r\n        return headerNode;\r\n    }\r\n    selectColumnNodeHeuristic() {\r\n        let min = Number.MAX_VALUE;\r\n        // tslint:disable-next-line:no-unnecessary-initializer\r\n        let ret = this.header.right;\r\n        for (let c = this.header.right; c !== this.header; c = c.right) {\r\n            if (c.size < min) {\r\n                min = c.size;\r\n                ret = c;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    handleSolution(anser) {\r\n        const field = this.parseSolution(anser);\r\n        this.isDone = this.resultCallback(field);\r\n    }\r\n    parseSolution(answer) {\r\n        const result = createEmptySudokuBoard(this.boardSize);\r\n        for (const n of answer) {\r\n            let rcNode = n;\r\n            let min = parseInt(rcNode.column.name, 10);\r\n            for (let tmp = n.right; tmp !== n; tmp = tmp.right) {\r\n                const val = parseInt(tmp.column.name, 10);\r\n                if (val < min) {\r\n                    min = val;\r\n                    rcNode = tmp;\r\n                }\r\n            }\r\n            const ans1 = parseInt(rcNode.column.name, 10);\r\n            const ans2 = parseInt(rcNode.right.column.name, 10);\r\n            const r = Math.floor(ans1 / this.boardSize);\r\n            const c = ans1 % this.boardSize;\r\n            const num = (ans2 % this.boardSize) + 1;\r\n            result[r][c] = num;\r\n        }\r\n        return result;\r\n    }\r\n    search(k) {\r\n        if (this.isDone) {\r\n            return;\r\n        }\r\n        if (this.header.right === this.header) {\r\n            this.handleSolution(this.answer);\r\n        }\r\n        else {\r\n            let c = this.selectColumnNodeHeuristic();\r\n            c.cover();\r\n            for (let r = c.bottom; r !== c; r = r.bottom) {\r\n                this.answer.push(r);\r\n                for (let j = r.right; j !== r; j = j.right) {\r\n                    j.column.cover();\r\n                }\r\n                this.search(k + 1);\r\n                r = this.answer.splice(this.answer.length - 1, 1)[0];\r\n                c = r.column;\r\n                for (let j = r.left; j !== r; j = j.left) {\r\n                    j.column.uncover();\r\n                }\r\n            }\r\n            c.uncover();\r\n        }\r\n    }\r\n    runSolver(cb) {\r\n        this.answer = [];\r\n        this.isDone = false;\r\n        this.resultCallback = cb;\r\n        this.search(0);\r\n    }\r\n}\n\n/*\r\n * Package @donmahallem/sudoku\r\n * Source https://donmahallem.github.io/js-libs/\r\n */\r\nconst getIndex = (row, column, num, boardSize) => {\r\n    return (row - 1) * boardSize * boardSize + (column - 1) * boardSize + (num - 1);\r\n};\n\n/*\r\n * Package @donmahallem/sudoku\r\n * Source https://donmahallem.github.io/js-libs/\r\n */\r\nconst createBoxConstraints = (matrix, header, boardSize, boxSize) => {\r\n    let headerIter = header;\r\n    for (let row = COVER_START_IDX; row <= boardSize; row += boxSize) {\r\n        for (let column = COVER_START_IDX; column <= boardSize; column += boxSize) {\r\n            for (let n = COVER_START_IDX; n <= boardSize; n++, headerIter++) {\r\n                for (let rowDelta = 0; rowDelta < boxSize; rowDelta++) {\r\n                    for (let columnDelta = 0; columnDelta < boxSize; columnDelta++) {\r\n                        const index = getIndex(row + rowDelta, column + columnDelta, n, boardSize);\r\n                        matrix[index][headerIter] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return headerIter;\r\n};\n\n/*\r\n * Package @donmahallem/sudoku\r\n * Source https://donmahallem.github.io/js-libs/\r\n */\r\nconst createCellConstraints = (matrix, header, boardSize) => {\r\n    let headerIter = header;\r\n    for (let row = COVER_START_IDX; row <= boardSize; row++) {\r\n        for (let column = COVER_START_IDX; column <= boardSize; column++, headerIter++) {\r\n            for (let n = COVER_START_IDX; n <= boardSize; n++) {\r\n                const index = getIndex(row, column, n, boardSize);\r\n                // console.log(index, _header, matrix.length);\r\n                matrix[index][headerIter] = true;\r\n            }\r\n        }\r\n    }\r\n    return headerIter;\r\n};\n\n/*\r\n * Package @donmahallem/sudoku\r\n * Source https://donmahallem.github.io/js-libs/\r\n */\r\nconst createColumnConstraints = (matrix, header, boardSize) => {\r\n    let iterHeader = header;\r\n    for (let column = COVER_START_IDX; column <= boardSize; column++) {\r\n        for (let n = COVER_START_IDX; n <= boardSize; n++, iterHeader++) {\r\n            for (let row = COVER_START_IDX; row <= boardSize; row++) {\r\n                const index = getIndex(row, column, n, boardSize);\r\n                matrix[index][iterHeader] = true;\r\n            }\r\n        }\r\n    }\r\n    return iterHeader;\r\n};\n\n/*\r\n * Package @donmahallem/sudoku\r\n * Source https://donmahallem.github.io/js-libs/\r\n */\r\nconst createRowConstraints = (coverBoard, hBase, boardSize) => {\r\n    let headerIter = hBase;\r\n    for (let row = COVER_START_IDX; row <= boardSize; row++) {\r\n        for (let n = COVER_START_IDX; n <= boardSize; n++, headerIter++) {\r\n            for (let column = COVER_START_IDX; column <= boardSize; column++) {\r\n                const index = getIndex(row, column, n, boardSize);\r\n                coverBoard[index][headerIter] = true;\r\n            }\r\n        }\r\n    }\r\n    return headerIter;\r\n};\n\n/*\r\n * Package @donmahallem/sudoku\r\n * Source https://donmahallem.github.io/js-libs/\r\n */\r\nconst createCoverMatrix = (boardSize, boxSize) => {\r\n    const coverMatrix = new Array(boardSize * boardSize * boardSize)\r\n        .fill([])\r\n        .map(() => new Array(boardSize * boardSize * CONSTRAINTS).fill(false));\r\n    let header = 0;\r\n    header = createCellConstraints(coverMatrix, header, boardSize);\r\n    header = createRowConstraints(coverMatrix, header, boardSize);\r\n    header = createColumnConstraints(coverMatrix, header, boardSize);\r\n    createBoxConstraints(coverMatrix, header, boardSize, boxSize);\r\n    return coverMatrix;\r\n};\n\n/*\r\n * Package @donmahallem/sudoku\r\n * Source https://donmahallem.github.io/js-libs/\r\n */\r\nconst initializeExactCoverBoard = (board, boardSize, boxSize) => {\r\n    const coverBoard = createCoverMatrix(boardSize, boxSize);\r\n    for (let row = COVER_START_IDX; row <= boardSize; row++) {\r\n        for (let column = COVER_START_IDX; column <= boardSize; column++) {\r\n            const n = board[row - 1][column - 1];\r\n            if (n !== EMPTY_CELL) {\r\n                for (let num = CELL_VALUE_MIN; num <= boardSize; num++) {\r\n                    if (num !== n) {\r\n                        coverBoard[getIndex(row, column, num, boardSize)].fill(false);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return coverBoard;\r\n};\n\n/*\r\n * Package @donmahallem/sudoku\r\n * Source https://donmahallem.github.io/js-libs/\r\n */\r\nconst solve = (board, boardSize, boxSize, cb) => {\r\n    const cover = initializeExactCoverBoard(board, boardSize, boxSize);\r\n    const dlx = new DLX(cover, boardSize);\r\n    dlx.runSolver(cb);\r\n};\r\nconst solveNum = (board, boardSize, boxSize, num) => {\r\n    const results = [];\r\n    solve(board, boardSize, boxSize, (result) => {\r\n        results.push(result);\r\n        return results.length >= num;\r\n    });\r\n    return results;\r\n};\n\n/*\r\n * Package @donmahallem/sudoku\r\n * Source https://donmahallem.github.io/js-libs/\r\n */\r\nconst indexMap = {};\r\nconst getIndexMap = (boardSize) => {\r\n    if (!(boardSize in indexMap)) {\r\n        indexMap[boardSize] = new Array(boardSize ** 2).fill(0).map((val, idx) => idx);\r\n    }\r\n    return indexMap[boardSize];\r\n};\r\nconst createSudokuBoard = (boardSize, retainPercentage) => {\r\n    const board = createEmptySudokuBoard(boardSize);\r\n    const boxSize = Math.sqrt(boardSize);\r\n    const randomNumbers = new Array(boardSize)\r\n        .fill(0)\r\n        .map((val, idx) => idx + 1)\r\n        .sort(() => Math.random() - 0.5);\r\n    for (let i = 0; i < boardSize; i++) {\r\n        board[i][Math.floor(Math.random() * boardSize)] = randomNumbers[i];\r\n    }\r\n    const selectBoard = solveNum(board, boardSize, boxSize, 1)[0];\r\n    const removeIndexes = getIndexMap(boardSize).sort(() => Math.random() - 0.5);\r\n    for (let i = 0; i <= Math.floor(removeIndexes.length * retainPercentage); i++) {\r\n        const removeX = removeIndexes[i] % boardSize;\r\n        const removeY = Math.floor(removeIndexes[i] / boardSize);\r\n        selectBoard[removeX][removeY] = 0;\r\n    }\r\n    return selectBoard;\r\n};\n\nexport { solve$1 as backtrackSolve, createEmptySudokuBoard, createSudokuBoard, solve as knuthSolve, solveNum as knuthSolveNum };\n// BUILD: Fri Dec 10 2021 15:20:26 GMT+0100 (Central European Standard Time)\n\n"],"names":[],"sourceRoot":"webpack:///"}